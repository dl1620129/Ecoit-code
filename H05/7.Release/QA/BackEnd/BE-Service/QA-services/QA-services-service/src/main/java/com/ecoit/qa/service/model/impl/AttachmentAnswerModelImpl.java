/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.qa.service.model.impl;

import com.ecoit.qa.service.model.AttachmentAnswer;
import com.ecoit.qa.service.model.AttachmentAnswerModel;
import com.ecoit.qa.service.model.AttachmentAnswerSoap;
import com.ecoit.qa.service.service.persistence.AttachmentAnswerPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttachmentAnswer service. Represents a row in the &quot;ecoit_qa_AttachmentAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttachmentAnswerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentAnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttachmentAnswerImpl
 * @generated
 */
@JSON(strict = true)
public class AttachmentAnswerModelImpl
	extends BaseModelImpl<AttachmentAnswer> implements AttachmentAnswerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attachment answer model instance should use the <code>AttachmentAnswer</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_qa_AttachmentAnswer";

	public static final Object[][] TABLE_COLUMNS = {
		{"attachmentId", Types.BIGINT}, {"answerId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_qa_AttachmentAnswer (attachmentId LONG not null,answerId LONG not null,primary key (attachmentId, answerId))";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_qa_AttachmentAnswer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attachmentAnswer.id.attachmentId ASC, attachmentAnswer.id.answerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_qa_AttachmentAnswer.attachmentId ASC, ecoit_qa_AttachmentAnswer.answerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ANSWERID_COLUMN_BITMASK = 1L;

	public static final long ATTACHMENTID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AttachmentAnswer toModel(AttachmentAnswerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AttachmentAnswer model = new AttachmentAnswerImpl();

		model.setAttachmentId(soapModel.getAttachmentId());
		model.setAnswerId(soapModel.getAnswerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AttachmentAnswer> toModels(
		AttachmentAnswerSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AttachmentAnswer> models = new ArrayList<AttachmentAnswer>(
			soapModels.length);

		for (AttachmentAnswerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AttachmentAnswerModelImpl() {
	}

	@Override
	public AttachmentAnswerPK getPrimaryKey() {
		return new AttachmentAnswerPK(_attachmentId, _answerId);
	}

	@Override
	public void setPrimaryKey(AttachmentAnswerPK primaryKey) {
		setAttachmentId(primaryKey.attachmentId);
		setAnswerId(primaryKey.answerId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AttachmentAnswerPK(_attachmentId, _answerId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AttachmentAnswerPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AttachmentAnswer.class;
	}

	@Override
	public String getModelClassName() {
		return AttachmentAnswer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttachmentAnswer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttachmentAnswer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentAnswer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttachmentAnswer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttachmentAnswer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttachmentAnswer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttachmentAnswer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttachmentAnswer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttachmentAnswer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AttachmentAnswer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AttachmentAnswer.class.getClassLoader(), AttachmentAnswer.class,
			ModelWrapper.class);

		try {
			Constructor<AttachmentAnswer> constructor =
				(Constructor<AttachmentAnswer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AttachmentAnswer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AttachmentAnswer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AttachmentAnswer, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AttachmentAnswer, Object>>();
		Map<String, BiConsumer<AttachmentAnswer, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AttachmentAnswer, ?>>();

		attributeGetterFunctions.put(
			"attachmentId", AttachmentAnswer::getAttachmentId);
		attributeSetterBiConsumers.put(
			"attachmentId",
			(BiConsumer<AttachmentAnswer, Long>)
				AttachmentAnswer::setAttachmentId);
		attributeGetterFunctions.put("answerId", AttachmentAnswer::getAnswerId);
		attributeSetterBiConsumers.put(
			"answerId",
			(BiConsumer<AttachmentAnswer, Long>)AttachmentAnswer::setAnswerId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAttachmentId() {
		return _attachmentId;
	}

	@Override
	public void setAttachmentId(long attachmentId) {
		_columnBitmask |= ATTACHMENTID_COLUMN_BITMASK;

		if (!_setOriginalAttachmentId) {
			_setOriginalAttachmentId = true;

			_originalAttachmentId = _attachmentId;
		}

		_attachmentId = attachmentId;
	}

	public long getOriginalAttachmentId() {
		return _originalAttachmentId;
	}

	@JSON
	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_columnBitmask |= ANSWERID_COLUMN_BITMASK;

		if (!_setOriginalAnswerId) {
			_setOriginalAnswerId = true;

			_originalAnswerId = _answerId;
		}

		_answerId = answerId;
	}

	public long getOriginalAnswerId() {
		return _originalAnswerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AttachmentAnswer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttachmentAnswer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachmentAnswerImpl attachmentAnswerImpl = new AttachmentAnswerImpl();

		attachmentAnswerImpl.setAttachmentId(getAttachmentId());
		attachmentAnswerImpl.setAnswerId(getAnswerId());

		attachmentAnswerImpl.resetOriginalValues();

		return attachmentAnswerImpl;
	}

	@Override
	public int compareTo(AttachmentAnswer attachmentAnswer) {
		AttachmentAnswerPK primaryKey = attachmentAnswer.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AttachmentAnswer)) {
			return false;
		}

		AttachmentAnswer attachmentAnswer = (AttachmentAnswer)obj;

		AttachmentAnswerPK primaryKey = attachmentAnswer.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AttachmentAnswerModelImpl attachmentAnswerModelImpl = this;

		attachmentAnswerModelImpl._originalAttachmentId =
			attachmentAnswerModelImpl._attachmentId;

		attachmentAnswerModelImpl._setOriginalAttachmentId = false;

		attachmentAnswerModelImpl._originalAnswerId =
			attachmentAnswerModelImpl._answerId;

		attachmentAnswerModelImpl._setOriginalAnswerId = false;

		attachmentAnswerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AttachmentAnswer> toCacheModel() {
		AttachmentAnswerCacheModel attachmentAnswerCacheModel =
			new AttachmentAnswerCacheModel();

		attachmentAnswerCacheModel.attachmentAnswerPK = getPrimaryKey();

		attachmentAnswerCacheModel.attachmentId = getAttachmentId();

		attachmentAnswerCacheModel.answerId = getAnswerId();

		return attachmentAnswerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttachmentAnswer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttachmentAnswer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentAnswer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AttachmentAnswer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AttachmentAnswer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AttachmentAnswer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentAnswer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AttachmentAnswer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttachmentAnswer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _attachmentId;
	private long _originalAttachmentId;
	private boolean _setOriginalAttachmentId;
	private long _answerId;
	private long _originalAnswerId;
	private boolean _setOriginalAnswerId;
	private long _columnBitmask;
	private AttachmentAnswer _escapedModel;

}