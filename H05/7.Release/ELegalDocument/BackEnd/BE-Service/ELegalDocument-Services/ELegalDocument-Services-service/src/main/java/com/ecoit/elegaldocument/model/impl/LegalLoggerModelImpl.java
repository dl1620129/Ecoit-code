/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalLogger;
import com.ecoit.elegaldocument.model.LegalLoggerModel;
import com.ecoit.elegaldocument.model.LegalLoggerSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalLogger service. Represents a row in the &quot;ecoit_doc_LegalLogger&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalLoggerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalLoggerImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalLoggerImpl
 * @generated
 */
@JSON(strict = true)
public class LegalLoggerModelImpl
	extends BaseModelImpl<LegalLogger> implements LegalLoggerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal logger model instance should use the <code>LegalLogger</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalLogger";

	public static final Object[][] TABLE_COLUMNS = {
		{"loggerId", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"language", Types.VARCHAR},
		{"entryId", Types.VARCHAR}, {"createdDate", Types.TIMESTAMP},
		{"createdByUser", Types.VARCHAR}, {"classEntry", Types.VARCHAR},
		{"content", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("loggerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classEntry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalLogger (loggerId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,language VARCHAR(75) null,entryId VARCHAR(75) null,createdDate DATE null,createdByUser VARCHAR(75) null,classEntry VARCHAR(75) null,content VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalLogger";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalLogger.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalLogger.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLASSENTRY_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long CREATEDBYUSER_COLUMN_BITMASK = 4L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 8L;

	public static final long ENTRYID_COLUMN_BITMASK = 16L;

	public static final long GROUPID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalLogger toModel(LegalLoggerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalLogger model = new LegalLoggerImpl();

		model.setLoggerId(soapModel.getLoggerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setLanguage(soapModel.getLanguage());
		model.setEntryId(soapModel.getEntryId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setClassEntry(soapModel.getClassEntry());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalLogger> toModels(LegalLoggerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LegalLogger> models = new ArrayList<LegalLogger>(
			soapModels.length);

		for (LegalLoggerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalLoggerModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setLoggerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return LegalLogger.class;
	}

	@Override
	public String getModelClassName() {
		return LegalLogger.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalLogger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalLogger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLogger, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LegalLogger)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalLogger, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalLogger, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalLogger)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalLogger, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalLogger, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalLogger>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalLogger.class.getClassLoader(), LegalLogger.class,
			ModelWrapper.class);

		try {
			Constructor<LegalLogger> constructor =
				(Constructor<LegalLogger>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalLogger, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalLogger, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalLogger, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LegalLogger, Object>>();
		Map<String, BiConsumer<LegalLogger, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LegalLogger, ?>>();

		attributeGetterFunctions.put("loggerId", LegalLogger::getLoggerId);
		attributeSetterBiConsumers.put(
			"loggerId",
			(BiConsumer<LegalLogger, String>)LegalLogger::setLoggerId);
		attributeGetterFunctions.put("groupId", LegalLogger::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<LegalLogger, Long>)LegalLogger::setGroupId);
		attributeGetterFunctions.put("companyId", LegalLogger::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalLogger, Long>)LegalLogger::setCompanyId);
		attributeGetterFunctions.put("language", LegalLogger::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalLogger, String>)LegalLogger::setLanguage);
		attributeGetterFunctions.put("entryId", LegalLogger::getEntryId);
		attributeSetterBiConsumers.put(
			"entryId",
			(BiConsumer<LegalLogger, String>)LegalLogger::setEntryId);
		attributeGetterFunctions.put(
			"createdDate", LegalLogger::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalLogger, Date>)LegalLogger::setCreatedDate);
		attributeGetterFunctions.put(
			"createdByUser", LegalLogger::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LegalLogger, String>)LegalLogger::setCreatedByUser);
		attributeGetterFunctions.put("classEntry", LegalLogger::getClassEntry);
		attributeSetterBiConsumers.put(
			"classEntry",
			(BiConsumer<LegalLogger, String>)LegalLogger::setClassEntry);
		attributeGetterFunctions.put("content", LegalLogger::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<LegalLogger, String>)LegalLogger::setContent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getLoggerId() {
		if (_loggerId == null) {
			return "";
		}
		else {
			return _loggerId;
		}
	}

	@Override
	public void setLoggerId(String loggerId) {
		_loggerId = loggerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@JSON
	@Override
	public String getEntryId() {
		if (_entryId == null) {
			return "";
		}
		else {
			return _entryId;
		}
	}

	@Override
	public void setEntryId(String entryId) {
		_columnBitmask |= ENTRYID_COLUMN_BITMASK;

		if (_originalEntryId == null) {
			_originalEntryId = _entryId;
		}

		_entryId = entryId;
	}

	public String getOriginalEntryId() {
		return GetterUtil.getString(_originalEntryId);
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		if (_originalCreatedDate == null) {
			_originalCreatedDate = _createdDate;
		}

		_createdDate = createdDate;
	}

	public Date getOriginalCreatedDate() {
		return _originalCreatedDate;
	}

	@JSON
	@Override
	public String getCreatedByUser() {
		if (_createdByUser == null) {
			return "";
		}
		else {
			return _createdByUser;
		}
	}

	@Override
	public void setCreatedByUser(String createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (_originalCreatedByUser == null) {
			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public String getOriginalCreatedByUser() {
		return GetterUtil.getString(_originalCreatedByUser);
	}

	@JSON
	@Override
	public String getClassEntry() {
		if (_classEntry == null) {
			return "";
		}
		else {
			return _classEntry;
		}
	}

	@Override
	public void setClassEntry(String classEntry) {
		_columnBitmask |= CLASSENTRY_COLUMN_BITMASK;

		if (_originalClassEntry == null) {
			_originalClassEntry = _classEntry;
		}

		_classEntry = classEntry;
	}

	public String getOriginalClassEntry() {
		return GetterUtil.getString(_originalClassEntry);
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LegalLogger toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalLogger>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalLoggerImpl legalLoggerImpl = new LegalLoggerImpl();

		legalLoggerImpl.setLoggerId(getLoggerId());
		legalLoggerImpl.setGroupId(getGroupId());
		legalLoggerImpl.setCompanyId(getCompanyId());
		legalLoggerImpl.setLanguage(getLanguage());
		legalLoggerImpl.setEntryId(getEntryId());
		legalLoggerImpl.setCreatedDate(getCreatedDate());
		legalLoggerImpl.setCreatedByUser(getCreatedByUser());
		legalLoggerImpl.setClassEntry(getClassEntry());
		legalLoggerImpl.setContent(getContent());

		legalLoggerImpl.resetOriginalValues();

		return legalLoggerImpl;
	}

	@Override
	public int compareTo(LegalLogger legalLogger) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreatedDate(), legalLogger.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalLogger)) {
			return false;
		}

		LegalLogger legalLogger = (LegalLogger)obj;

		String primaryKey = legalLogger.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalLoggerModelImpl legalLoggerModelImpl = this;

		legalLoggerModelImpl._originalGroupId = legalLoggerModelImpl._groupId;

		legalLoggerModelImpl._setOriginalGroupId = false;

		legalLoggerModelImpl._originalCompanyId =
			legalLoggerModelImpl._companyId;

		legalLoggerModelImpl._setOriginalCompanyId = false;

		legalLoggerModelImpl._originalEntryId = legalLoggerModelImpl._entryId;

		legalLoggerModelImpl._originalCreatedDate =
			legalLoggerModelImpl._createdDate;

		legalLoggerModelImpl._originalCreatedByUser =
			legalLoggerModelImpl._createdByUser;

		legalLoggerModelImpl._originalClassEntry =
			legalLoggerModelImpl._classEntry;

		legalLoggerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalLogger> toCacheModel() {
		LegalLoggerCacheModel legalLoggerCacheModel =
			new LegalLoggerCacheModel();

		legalLoggerCacheModel.loggerId = getLoggerId();

		String loggerId = legalLoggerCacheModel.loggerId;

		if ((loggerId != null) && (loggerId.length() == 0)) {
			legalLoggerCacheModel.loggerId = null;
		}

		legalLoggerCacheModel.groupId = getGroupId();

		legalLoggerCacheModel.companyId = getCompanyId();

		legalLoggerCacheModel.language = getLanguage();

		String language = legalLoggerCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalLoggerCacheModel.language = null;
		}

		legalLoggerCacheModel.entryId = getEntryId();

		String entryId = legalLoggerCacheModel.entryId;

		if ((entryId != null) && (entryId.length() == 0)) {
			legalLoggerCacheModel.entryId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalLoggerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalLoggerCacheModel.createdDate = Long.MIN_VALUE;
		}

		legalLoggerCacheModel.createdByUser = getCreatedByUser();

		String createdByUser = legalLoggerCacheModel.createdByUser;

		if ((createdByUser != null) && (createdByUser.length() == 0)) {
			legalLoggerCacheModel.createdByUser = null;
		}

		legalLoggerCacheModel.classEntry = getClassEntry();

		String classEntry = legalLoggerCacheModel.classEntry;

		if ((classEntry != null) && (classEntry.length() == 0)) {
			legalLoggerCacheModel.classEntry = null;
		}

		legalLoggerCacheModel.content = getContent();

		String content = legalLoggerCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			legalLoggerCacheModel.content = null;
		}

		return legalLoggerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalLogger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalLogger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLogger, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalLogger)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalLogger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalLogger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLogger, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalLogger)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalLogger>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _loggerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _language;
	private String _entryId;
	private String _originalEntryId;
	private Date _createdDate;
	private Date _originalCreatedDate;
	private String _createdByUser;
	private String _originalCreatedByUser;
	private String _classEntry;
	private String _originalClassEntry;
	private String _content;
	private long _columnBitmask;
	private LegalLogger _escapedModel;

}