/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.EcmsGURelation;
import com.ecoit.elegaldocument.model.EcmsGURelationModel;
import com.ecoit.elegaldocument.model.EcmsGURelationSoap;
import com.ecoit.elegaldocument.service.persistence.EcmsGURelationPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EcmsGURelation service. Represents a row in the &quot;ecoit_doc_EcmsGURelation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EcmsGURelationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EcmsGURelationImpl}.
 * </p>
 *
 * @author Liverpool
 * @see EcmsGURelationImpl
 * @generated
 */
@JSON(strict = true)
public class EcmsGURelationModelImpl
	extends BaseModelImpl<EcmsGURelation> implements EcmsGURelationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ecms gu relation model instance should use the <code>EcmsGURelation</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_EcmsGURelation";

	public static final Object[][] TABLE_COLUMNS = {
		{"userId", Types.BIGINT}, {"groupUserId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_EcmsGURelation (userId LONG not null,groupUserId LONG not null,primary key (userId, groupUserId))";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_EcmsGURelation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ecmsGURelation.id.userId ASC, ecmsGURelation.id.groupUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_EcmsGURelation.userId ASC, ecoit_doc_EcmsGURelation.groupUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPUSERID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EcmsGURelation toModel(EcmsGURelationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EcmsGURelation model = new EcmsGURelationImpl();

		model.setUserId(soapModel.getUserId());
		model.setGroupUserId(soapModel.getGroupUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EcmsGURelation> toModels(
		EcmsGURelationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EcmsGURelation> models = new ArrayList<EcmsGURelation>(
			soapModels.length);

		for (EcmsGURelationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EcmsGURelationModelImpl() {
	}

	@Override
	public EcmsGURelationPK getPrimaryKey() {
		return new EcmsGURelationPK(_userId, _groupUserId);
	}

	@Override
	public void setPrimaryKey(EcmsGURelationPK primaryKey) {
		setUserId(primaryKey.userId);
		setGroupUserId(primaryKey.groupUserId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new EcmsGURelationPK(_userId, _groupUserId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((EcmsGURelationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return EcmsGURelation.class;
	}

	@Override
	public String getModelClassName() {
		return EcmsGURelation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EcmsGURelation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EcmsGURelation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EcmsGURelation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EcmsGURelation)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EcmsGURelation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EcmsGURelation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EcmsGURelation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EcmsGURelation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EcmsGURelation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EcmsGURelation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EcmsGURelation.class.getClassLoader(), EcmsGURelation.class,
			ModelWrapper.class);

		try {
			Constructor<EcmsGURelation> constructor =
				(Constructor<EcmsGURelation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EcmsGURelation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EcmsGURelation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EcmsGURelation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EcmsGURelation, Object>>();
		Map<String, BiConsumer<EcmsGURelation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EcmsGURelation, ?>>();

		attributeGetterFunctions.put("userId", EcmsGURelation::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EcmsGURelation, Long>)EcmsGURelation::setUserId);
		attributeGetterFunctions.put(
			"groupUserId", EcmsGURelation::getGroupUserId);
		attributeSetterBiConsumers.put(
			"groupUserId",
			(BiConsumer<EcmsGURelation, Long>)EcmsGURelation::setGroupUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGroupUserId() {
		return _groupUserId;
	}

	@Override
	public void setGroupUserId(long groupUserId) {
		_columnBitmask |= GROUPUSERID_COLUMN_BITMASK;

		if (!_setOriginalGroupUserId) {
			_setOriginalGroupUserId = true;

			_originalGroupUserId = _groupUserId;
		}

		_groupUserId = groupUserId;
	}

	@Override
	public String getGroupUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getGroupUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setGroupUserUuid(String groupUserUuid) {
	}

	public long getOriginalGroupUserId() {
		return _originalGroupUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public EcmsGURelation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EcmsGURelation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EcmsGURelationImpl ecmsGURelationImpl = new EcmsGURelationImpl();

		ecmsGURelationImpl.setUserId(getUserId());
		ecmsGURelationImpl.setGroupUserId(getGroupUserId());

		ecmsGURelationImpl.resetOriginalValues();

		return ecmsGURelationImpl;
	}

	@Override
	public int compareTo(EcmsGURelation ecmsGURelation) {
		EcmsGURelationPK primaryKey = ecmsGURelation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EcmsGURelation)) {
			return false;
		}

		EcmsGURelation ecmsGURelation = (EcmsGURelation)obj;

		EcmsGURelationPK primaryKey = ecmsGURelation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		EcmsGURelationModelImpl ecmsGURelationModelImpl = this;

		ecmsGURelationModelImpl._originalUserId =
			ecmsGURelationModelImpl._userId;

		ecmsGURelationModelImpl._setOriginalUserId = false;

		ecmsGURelationModelImpl._originalGroupUserId =
			ecmsGURelationModelImpl._groupUserId;

		ecmsGURelationModelImpl._setOriginalGroupUserId = false;

		ecmsGURelationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EcmsGURelation> toCacheModel() {
		EcmsGURelationCacheModel ecmsGURelationCacheModel =
			new EcmsGURelationCacheModel();

		ecmsGURelationCacheModel.ecmsGURelationPK = getPrimaryKey();

		ecmsGURelationCacheModel.userId = getUserId();

		ecmsGURelationCacheModel.groupUserId = getGroupUserId();

		return ecmsGURelationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EcmsGURelation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EcmsGURelation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EcmsGURelation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EcmsGURelation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EcmsGURelation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EcmsGURelation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EcmsGURelation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EcmsGURelation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EcmsGURelation>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupUserId;
	private long _originalGroupUserId;
	private boolean _setOriginalGroupUserId;
	private long _columnBitmask;
	private EcmsGURelation _escapedModel;

}