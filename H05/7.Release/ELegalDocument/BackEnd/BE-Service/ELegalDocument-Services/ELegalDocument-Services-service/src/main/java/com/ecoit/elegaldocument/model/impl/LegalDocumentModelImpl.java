/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalDocument;
import com.ecoit.elegaldocument.model.LegalDocumentModel;
import com.ecoit.elegaldocument.model.LegalDocumentSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalDocument service. Represents a row in the &quot;ecoit_doc_LegalDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalDocumentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalDocumentImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalDocumentImpl
 * @generated
 */
@JSON(strict = true)
public class LegalDocumentModelImpl
	extends BaseModelImpl<LegalDocument> implements LegalDocumentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal document model instance should use the <code>LegalDocument</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalDocument";

	public static final Object[][] TABLE_COLUMNS = {
		{"docId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdByUser", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"modifiedByUser", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP},
		{"approvedByUser", Types.BIGINT}, {"approvedDate", Types.TIMESTAMP},
		{"forwardedByUser", Types.BIGINT}, {"forwardedDate", Types.TIMESTAMP},
		{"publishedByUser", Types.BIGINT}, {"publishedDate", Types.TIMESTAMP},
		{"symbol", Types.VARCHAR}, {"num", Types.VARCHAR},
		{"promulDate", Types.TIMESTAMP}, {"effectivedDate", Types.TIMESTAMP},
		{"expiredDate", Types.TIMESTAMP}, {"replaceDoc", Types.VARCHAR},
		{"summary", Types.VARCHAR}, {"content", Types.VARCHAR},
		{"language", Types.VARCHAR}, {"userHit", Types.INTEGER},
		{"statusDoc", Types.INTEGER}, {"isPublic", Types.INTEGER},
		{"typeId", Types.BIGINT}, {"fieldId", Types.BIGINT},
		{"organizationId", Types.BIGINT}, {"orgRels", Types.VARCHAR},
		{"signerRels", Types.VARCHAR}, {"fieldRels", Types.VARCHAR},
		{"numRels", Types.VARCHAR}, {"docCode", Types.VARCHAR},
		{"departmentRels", Types.VARCHAR}, {"signerName", Types.VARCHAR},
		{"ngayDangCongBao", Types.TIMESTAMP}, {"soCongBao", Types.VARCHAR},
		{"levelValidityId", Types.BIGINT}, {"tags", Types.VARCHAR},
		{"docRelation", Types.VARCHAR}, {"newGopY", Types.BOOLEAN},
		{"view", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("docId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("forwardedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("forwardedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("symbol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("num", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("promulDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("replaceDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusDoc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isPublic", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("orgRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signerRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngayDangCongBao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("soCongBao", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("levelValidityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docRelation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGopY", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("view", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalDocument (docId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,forwardedByUser LONG,forwardedDate DATE null,publishedByUser LONG,publishedDate DATE null,symbol VARCHAR(100) null,num VARCHAR(75) null,promulDate DATE null,effectivedDate DATE null,expiredDate DATE null,replaceDoc VARCHAR(75) null,summary VARCHAR(550) null,content STRING null,language VARCHAR(75) null,userHit INTEGER,statusDoc INTEGER,isPublic INTEGER,typeId LONG,fieldId LONG,organizationId LONG,orgRels VARCHAR(550) null,signerRels STRING null,fieldRels VARCHAR(75) null,numRels VARCHAR(75) null,docCode VARCHAR(75) null,departmentRels VARCHAR(75) null,signerName VARCHAR(75) null,ngayDangCongBao DATE null,soCongBao VARCHAR(75) null,levelValidityId LONG,tags VARCHAR(75) null,docRelation VARCHAR(550) null,newGopY BOOLEAN,view LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalDocument";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalDocument.promulDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalDocument.promulDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CREATEDBYUSER_COLUMN_BITMASK = 2L;

	public static final long DOCID_COLUMN_BITMASK = 4L;

	public static final long FIELDID_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long ISPUBLIC_COLUMN_BITMASK = 32L;

	public static final long LANGUAGE_COLUMN_BITMASK = 64L;

	public static final long NUM_COLUMN_BITMASK = 128L;

	public static final long ORGANIZATIONID_COLUMN_BITMASK = 256L;

	public static final long STATUSDOC_COLUMN_BITMASK = 512L;

	public static final long SYMBOL_COLUMN_BITMASK = 1024L;

	public static final long TYPEID_COLUMN_BITMASK = 2048L;

	public static final long USERID_COLUMN_BITMASK = 4096L;

	public static final long PROMULDATE_COLUMN_BITMASK = 8192L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalDocument toModel(LegalDocumentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalDocument model = new LegalDocumentImpl();

		model.setDocId(soapModel.getDocId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setForwardedByUser(soapModel.getForwardedByUser());
		model.setForwardedDate(soapModel.getForwardedDate());
		model.setPublishedByUser(soapModel.getPublishedByUser());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setSymbol(soapModel.getSymbol());
		model.setNum(soapModel.getNum());
		model.setPromulDate(soapModel.getPromulDate());
		model.setEffectivedDate(soapModel.getEffectivedDate());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setReplaceDoc(soapModel.getReplaceDoc());
		model.setSummary(soapModel.getSummary());
		model.setContent(soapModel.getContent());
		model.setLanguage(soapModel.getLanguage());
		model.setUserHit(soapModel.getUserHit());
		model.setStatusDoc(soapModel.getStatusDoc());
		model.setIsPublic(soapModel.getIsPublic());
		model.setTypeId(soapModel.getTypeId());
		model.setFieldId(soapModel.getFieldId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setOrgRels(soapModel.getOrgRels());
		model.setSignerRels(soapModel.getSignerRels());
		model.setFieldRels(soapModel.getFieldRels());
		model.setNumRels(soapModel.getNumRels());
		model.setDocCode(soapModel.getDocCode());
		model.setDepartmentRels(soapModel.getDepartmentRels());
		model.setSignerName(soapModel.getSignerName());
		model.setNgayDangCongBao(soapModel.getNgayDangCongBao());
		model.setSoCongBao(soapModel.getSoCongBao());
		model.setLevelValidityId(soapModel.getLevelValidityId());
		model.setTags(soapModel.getTags());
		model.setDocRelation(soapModel.getDocRelation());
		model.setNewGopY(soapModel.isNewGopY());
		model.setView(soapModel.getView());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalDocument> toModels(LegalDocumentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LegalDocument> models = new ArrayList<LegalDocument>(
			soapModels.length);

		for (LegalDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _docId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _docId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalDocument.class;
	}

	@Override
	public String getModelClassName() {
		return LegalDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalDocument, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDocument, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LegalDocument)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalDocument, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalDocument, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalDocument)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalDocument, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalDocument, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalDocument>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalDocument.class.getClassLoader(), LegalDocument.class,
			ModelWrapper.class);

		try {
			Constructor<LegalDocument> constructor =
				(Constructor<LegalDocument>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalDocument, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalDocument, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalDocument, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LegalDocument, Object>>();
		Map<String, BiConsumer<LegalDocument, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LegalDocument, ?>>();

		attributeGetterFunctions.put("docId", LegalDocument::getDocId);
		attributeSetterBiConsumers.put(
			"docId", (BiConsumer<LegalDocument, Long>)LegalDocument::setDocId);
		attributeGetterFunctions.put("groupId", LegalDocument::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setGroupId);
		attributeGetterFunctions.put("companyId", LegalDocument::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setCompanyId);
		attributeGetterFunctions.put("userId", LegalDocument::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setUserId);
		attributeGetterFunctions.put(
			"createdByUser", LegalDocument::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setCreatedByUser);
		attributeGetterFunctions.put(
			"createdDate", LegalDocument::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedByUser", LegalDocument::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setModifiedByUser);
		attributeGetterFunctions.put(
			"modifiedDate", LegalDocument::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setModifiedDate);
		attributeGetterFunctions.put(
			"approvedByUser", LegalDocument::getApprovedByUser);
		attributeSetterBiConsumers.put(
			"approvedByUser",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setApprovedByUser);
		attributeGetterFunctions.put(
			"approvedDate", LegalDocument::getApprovedDate);
		attributeSetterBiConsumers.put(
			"approvedDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setApprovedDate);
		attributeGetterFunctions.put(
			"forwardedByUser", LegalDocument::getForwardedByUser);
		attributeSetterBiConsumers.put(
			"forwardedByUser",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setForwardedByUser);
		attributeGetterFunctions.put(
			"forwardedDate", LegalDocument::getForwardedDate);
		attributeSetterBiConsumers.put(
			"forwardedDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setForwardedDate);
		attributeGetterFunctions.put(
			"publishedByUser", LegalDocument::getPublishedByUser);
		attributeSetterBiConsumers.put(
			"publishedByUser",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setPublishedByUser);
		attributeGetterFunctions.put(
			"publishedDate", LegalDocument::getPublishedDate);
		attributeSetterBiConsumers.put(
			"publishedDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setPublishedDate);
		attributeGetterFunctions.put("symbol", LegalDocument::getSymbol);
		attributeSetterBiConsumers.put(
			"symbol",
			(BiConsumer<LegalDocument, String>)LegalDocument::setSymbol);
		attributeGetterFunctions.put("num", LegalDocument::getNum);
		attributeSetterBiConsumers.put(
			"num", (BiConsumer<LegalDocument, String>)LegalDocument::setNum);
		attributeGetterFunctions.put(
			"promulDate", LegalDocument::getPromulDate);
		attributeSetterBiConsumers.put(
			"promulDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setPromulDate);
		attributeGetterFunctions.put(
			"effectivedDate", LegalDocument::getEffectivedDate);
		attributeSetterBiConsumers.put(
			"effectivedDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setEffectivedDate);
		attributeGetterFunctions.put(
			"expiredDate", LegalDocument::getExpiredDate);
		attributeSetterBiConsumers.put(
			"expiredDate",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setExpiredDate);
		attributeGetterFunctions.put(
			"replaceDoc", LegalDocument::getReplaceDoc);
		attributeSetterBiConsumers.put(
			"replaceDoc",
			(BiConsumer<LegalDocument, String>)LegalDocument::setReplaceDoc);
		attributeGetterFunctions.put("summary", LegalDocument::getSummary);
		attributeSetterBiConsumers.put(
			"summary",
			(BiConsumer<LegalDocument, String>)LegalDocument::setSummary);
		attributeGetterFunctions.put("content", LegalDocument::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<LegalDocument, String>)LegalDocument::setContent);
		attributeGetterFunctions.put("language", LegalDocument::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalDocument, String>)LegalDocument::setLanguage);
		attributeGetterFunctions.put("userHit", LegalDocument::getUserHit);
		attributeSetterBiConsumers.put(
			"userHit",
			(BiConsumer<LegalDocument, Integer>)LegalDocument::setUserHit);
		attributeGetterFunctions.put("statusDoc", LegalDocument::getStatusDoc);
		attributeSetterBiConsumers.put(
			"statusDoc",
			(BiConsumer<LegalDocument, Integer>)LegalDocument::setStatusDoc);
		attributeGetterFunctions.put("isPublic", LegalDocument::getIsPublic);
		attributeSetterBiConsumers.put(
			"isPublic",
			(BiConsumer<LegalDocument, Integer>)LegalDocument::setIsPublic);
		attributeGetterFunctions.put("typeId", LegalDocument::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setTypeId);
		attributeGetterFunctions.put("fieldId", LegalDocument::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setFieldId);
		attributeGetterFunctions.put(
			"organizationId", LegalDocument::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setOrganizationId);
		attributeGetterFunctions.put("orgRels", LegalDocument::getOrgRels);
		attributeSetterBiConsumers.put(
			"orgRels",
			(BiConsumer<LegalDocument, String>)LegalDocument::setOrgRels);
		attributeGetterFunctions.put(
			"signerRels", LegalDocument::getSignerRels);
		attributeSetterBiConsumers.put(
			"signerRels",
			(BiConsumer<LegalDocument, String>)LegalDocument::setSignerRels);
		attributeGetterFunctions.put("fieldRels", LegalDocument::getFieldRels);
		attributeSetterBiConsumers.put(
			"fieldRels",
			(BiConsumer<LegalDocument, String>)LegalDocument::setFieldRels);
		attributeGetterFunctions.put("numRels", LegalDocument::getNumRels);
		attributeSetterBiConsumers.put(
			"numRels",
			(BiConsumer<LegalDocument, String>)LegalDocument::setNumRels);
		attributeGetterFunctions.put("docCode", LegalDocument::getDocCode);
		attributeSetterBiConsumers.put(
			"docCode",
			(BiConsumer<LegalDocument, String>)LegalDocument::setDocCode);
		attributeGetterFunctions.put(
			"departmentRels", LegalDocument::getDepartmentRels);
		attributeSetterBiConsumers.put(
			"departmentRels",
			(BiConsumer<LegalDocument, String>)
				LegalDocument::setDepartmentRels);
		attributeGetterFunctions.put(
			"signerName", LegalDocument::getSignerName);
		attributeSetterBiConsumers.put(
			"signerName",
			(BiConsumer<LegalDocument, String>)LegalDocument::setSignerName);
		attributeGetterFunctions.put(
			"ngayDangCongBao", LegalDocument::getNgayDangCongBao);
		attributeSetterBiConsumers.put(
			"ngayDangCongBao",
			(BiConsumer<LegalDocument, Date>)LegalDocument::setNgayDangCongBao);
		attributeGetterFunctions.put("soCongBao", LegalDocument::getSoCongBao);
		attributeSetterBiConsumers.put(
			"soCongBao",
			(BiConsumer<LegalDocument, String>)LegalDocument::setSoCongBao);
		attributeGetterFunctions.put(
			"levelValidityId", LegalDocument::getLevelValidityId);
		attributeSetterBiConsumers.put(
			"levelValidityId",
			(BiConsumer<LegalDocument, Long>)LegalDocument::setLevelValidityId);
		attributeGetterFunctions.put("tags", LegalDocument::getTags);
		attributeSetterBiConsumers.put(
			"tags", (BiConsumer<LegalDocument, String>)LegalDocument::setTags);
		attributeGetterFunctions.put(
			"docRelation", LegalDocument::getDocRelation);
		attributeSetterBiConsumers.put(
			"docRelation",
			(BiConsumer<LegalDocument, String>)LegalDocument::setDocRelation);
		attributeGetterFunctions.put("newGopY", LegalDocument::getNewGopY);
		attributeSetterBiConsumers.put(
			"newGopY",
			(BiConsumer<LegalDocument, Boolean>)LegalDocument::setNewGopY);
		attributeGetterFunctions.put("view", LegalDocument::getView);
		attributeSetterBiConsumers.put(
			"view", (BiConsumer<LegalDocument, Long>)LegalDocument::setView);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDocId() {
		return _docId;
	}

	@Override
	public void setDocId(long docId) {
		_columnBitmask |= DOCID_COLUMN_BITMASK;

		if (!_setOriginalDocId) {
			_setOriginalDocId = true;

			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public long getOriginalDocId() {
		return _originalDocId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (!_setOriginalCreatedByUser) {
			_setOriginalCreatedByUser = true;

			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public long getOriginalCreatedByUser() {
		return _originalCreatedByUser;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public long getForwardedByUser() {
		return _forwardedByUser;
	}

	@Override
	public void setForwardedByUser(long forwardedByUser) {
		_forwardedByUser = forwardedByUser;
	}

	@JSON
	@Override
	public Date getForwardedDate() {
		return _forwardedDate;
	}

	@Override
	public void setForwardedDate(Date forwardedDate) {
		_forwardedDate = forwardedDate;
	}

	@JSON
	@Override
	public long getPublishedByUser() {
		return _publishedByUser;
	}

	@Override
	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@JSON
	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@JSON
	@Override
	public String getSymbol() {
		if (_symbol == null) {
			return "";
		}
		else {
			return _symbol;
		}
	}

	@Override
	public void setSymbol(String symbol) {
		_columnBitmask |= SYMBOL_COLUMN_BITMASK;

		if (_originalSymbol == null) {
			_originalSymbol = _symbol;
		}

		_symbol = symbol;
	}

	public String getOriginalSymbol() {
		return GetterUtil.getString(_originalSymbol);
	}

	@JSON
	@Override
	public String getNum() {
		if (_num == null) {
			return "";
		}
		else {
			return _num;
		}
	}

	@Override
	public void setNum(String num) {
		_columnBitmask |= NUM_COLUMN_BITMASK;

		if (_originalNum == null) {
			_originalNum = _num;
		}

		_num = num;
	}

	public String getOriginalNum() {
		return GetterUtil.getString(_originalNum);
	}

	@JSON
	@Override
	public Date getPromulDate() {
		return _promulDate;
	}

	@Override
	public void setPromulDate(Date promulDate) {
		_columnBitmask = -1L;

		_promulDate = promulDate;
	}

	@JSON
	@Override
	public Date getEffectivedDate() {
		return _effectivedDate;
	}

	@Override
	public void setEffectivedDate(Date effectivedDate) {
		_effectivedDate = effectivedDate;
	}

	@JSON
	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@JSON
	@Override
	public String getReplaceDoc() {
		if (_replaceDoc == null) {
			return "";
		}
		else {
			return _replaceDoc;
		}
	}

	@Override
	public void setReplaceDoc(String replaceDoc) {
		_replaceDoc = replaceDoc;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return "";
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@JSON
	@Override
	public int getStatusDoc() {
		return _statusDoc;
	}

	@Override
	public void setStatusDoc(int statusDoc) {
		_columnBitmask |= STATUSDOC_COLUMN_BITMASK;

		if (!_setOriginalStatusDoc) {
			_setOriginalStatusDoc = true;

			_originalStatusDoc = _statusDoc;
		}

		_statusDoc = statusDoc;
	}

	public int getOriginalStatusDoc() {
		return _originalStatusDoc;
	}

	@JSON
	@Override
	public int getIsPublic() {
		return _isPublic;
	}

	@Override
	public void setIsPublic(int isPublic) {
		_columnBitmask |= ISPUBLIC_COLUMN_BITMASK;

		if (!_setOriginalIsPublic) {
			_setOriginalIsPublic = true;

			_originalIsPublic = _isPublic;
		}

		_isPublic = isPublic;
	}

	public int getOriginalIsPublic() {
		return _originalIsPublic;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (!_setOriginalFieldId) {
			_setOriginalFieldId = true;

			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public long getOriginalFieldId() {
		return _originalFieldId;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@JSON
	@Override
	public String getOrgRels() {
		if (_orgRels == null) {
			return "";
		}
		else {
			return _orgRels;
		}
	}

	@Override
	public void setOrgRels(String orgRels) {
		_orgRels = orgRels;
	}

	@JSON
	@Override
	public String getSignerRels() {
		if (_signerRels == null) {
			return "";
		}
		else {
			return _signerRels;
		}
	}

	@Override
	public void setSignerRels(String signerRels) {
		_signerRels = signerRels;
	}

	@JSON
	@Override
	public String getFieldRels() {
		if (_fieldRels == null) {
			return "";
		}
		else {
			return _fieldRels;
		}
	}

	@Override
	public void setFieldRels(String fieldRels) {
		_fieldRels = fieldRels;
	}

	@JSON
	@Override
	public String getNumRels() {
		if (_numRels == null) {
			return "";
		}
		else {
			return _numRels;
		}
	}

	@Override
	public void setNumRels(String numRels) {
		_numRels = numRels;
	}

	@JSON
	@Override
	public String getDocCode() {
		if (_docCode == null) {
			return "";
		}
		else {
			return _docCode;
		}
	}

	@Override
	public void setDocCode(String docCode) {
		_docCode = docCode;
	}

	@JSON
	@Override
	public String getDepartmentRels() {
		if (_departmentRels == null) {
			return "";
		}
		else {
			return _departmentRels;
		}
	}

	@Override
	public void setDepartmentRels(String departmentRels) {
		_departmentRels = departmentRels;
	}

	@JSON
	@Override
	public String getSignerName() {
		if (_signerName == null) {
			return "";
		}
		else {
			return _signerName;
		}
	}

	@Override
	public void setSignerName(String signerName) {
		_signerName = signerName;
	}

	@JSON
	@Override
	public Date getNgayDangCongBao() {
		return _ngayDangCongBao;
	}

	@Override
	public void setNgayDangCongBao(Date ngayDangCongBao) {
		_ngayDangCongBao = ngayDangCongBao;
	}

	@JSON
	@Override
	public String getSoCongBao() {
		if (_soCongBao == null) {
			return "";
		}
		else {
			return _soCongBao;
		}
	}

	@Override
	public void setSoCongBao(String soCongBao) {
		_soCongBao = soCongBao;
	}

	@JSON
	@Override
	public long getLevelValidityId() {
		return _levelValidityId;
	}

	@Override
	public void setLevelValidityId(long levelValidityId) {
		_levelValidityId = levelValidityId;
	}

	@JSON
	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@JSON
	@Override
	public String getDocRelation() {
		if (_docRelation == null) {
			return "";
		}
		else {
			return _docRelation;
		}
	}

	@Override
	public void setDocRelation(String docRelation) {
		_docRelation = docRelation;
	}

	@JSON
	@Override
	public boolean getNewGopY() {
		return _newGopY;
	}

	@JSON
	@Override
	public boolean isNewGopY() {
		return _newGopY;
	}

	@Override
	public void setNewGopY(boolean newGopY) {
		_newGopY = newGopY;
	}

	@JSON
	@Override
	public long getView() {
		return _view;
	}

	@Override
	public void setView(long view) {
		_view = view;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalDocument.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalDocument toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalDocument>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalDocumentImpl legalDocumentImpl = new LegalDocumentImpl();

		legalDocumentImpl.setDocId(getDocId());
		legalDocumentImpl.setGroupId(getGroupId());
		legalDocumentImpl.setCompanyId(getCompanyId());
		legalDocumentImpl.setUserId(getUserId());
		legalDocumentImpl.setCreatedByUser(getCreatedByUser());
		legalDocumentImpl.setCreatedDate(getCreatedDate());
		legalDocumentImpl.setModifiedByUser(getModifiedByUser());
		legalDocumentImpl.setModifiedDate(getModifiedDate());
		legalDocumentImpl.setApprovedByUser(getApprovedByUser());
		legalDocumentImpl.setApprovedDate(getApprovedDate());
		legalDocumentImpl.setForwardedByUser(getForwardedByUser());
		legalDocumentImpl.setForwardedDate(getForwardedDate());
		legalDocumentImpl.setPublishedByUser(getPublishedByUser());
		legalDocumentImpl.setPublishedDate(getPublishedDate());
		legalDocumentImpl.setSymbol(getSymbol());
		legalDocumentImpl.setNum(getNum());
		legalDocumentImpl.setPromulDate(getPromulDate());
		legalDocumentImpl.setEffectivedDate(getEffectivedDate());
		legalDocumentImpl.setExpiredDate(getExpiredDate());
		legalDocumentImpl.setReplaceDoc(getReplaceDoc());
		legalDocumentImpl.setSummary(getSummary());
		legalDocumentImpl.setContent(getContent());
		legalDocumentImpl.setLanguage(getLanguage());
		legalDocumentImpl.setUserHit(getUserHit());
		legalDocumentImpl.setStatusDoc(getStatusDoc());
		legalDocumentImpl.setIsPublic(getIsPublic());
		legalDocumentImpl.setTypeId(getTypeId());
		legalDocumentImpl.setFieldId(getFieldId());
		legalDocumentImpl.setOrganizationId(getOrganizationId());
		legalDocumentImpl.setOrgRels(getOrgRels());
		legalDocumentImpl.setSignerRels(getSignerRels());
		legalDocumentImpl.setFieldRels(getFieldRels());
		legalDocumentImpl.setNumRels(getNumRels());
		legalDocumentImpl.setDocCode(getDocCode());
		legalDocumentImpl.setDepartmentRels(getDepartmentRels());
		legalDocumentImpl.setSignerName(getSignerName());
		legalDocumentImpl.setNgayDangCongBao(getNgayDangCongBao());
		legalDocumentImpl.setSoCongBao(getSoCongBao());
		legalDocumentImpl.setLevelValidityId(getLevelValidityId());
		legalDocumentImpl.setTags(getTags());
		legalDocumentImpl.setDocRelation(getDocRelation());
		legalDocumentImpl.setNewGopY(isNewGopY());
		legalDocumentImpl.setView(getView());

		legalDocumentImpl.resetOriginalValues();

		return legalDocumentImpl;
	}

	@Override
	public int compareTo(LegalDocument legalDocument) {
		int value = 0;

		value = DateUtil.compareTo(
			getPromulDate(), legalDocument.getPromulDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalDocument)) {
			return false;
		}

		LegalDocument legalDocument = (LegalDocument)obj;

		long primaryKey = legalDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalDocumentModelImpl legalDocumentModelImpl = this;

		legalDocumentModelImpl._originalDocId = legalDocumentModelImpl._docId;

		legalDocumentModelImpl._setOriginalDocId = false;

		legalDocumentModelImpl._originalGroupId =
			legalDocumentModelImpl._groupId;

		legalDocumentModelImpl._setOriginalGroupId = false;

		legalDocumentModelImpl._originalCompanyId =
			legalDocumentModelImpl._companyId;

		legalDocumentModelImpl._setOriginalCompanyId = false;

		legalDocumentModelImpl._originalUserId = legalDocumentModelImpl._userId;

		legalDocumentModelImpl._setOriginalUserId = false;

		legalDocumentModelImpl._originalCreatedByUser =
			legalDocumentModelImpl._createdByUser;

		legalDocumentModelImpl._setOriginalCreatedByUser = false;

		legalDocumentModelImpl._originalSymbol = legalDocumentModelImpl._symbol;

		legalDocumentModelImpl._originalNum = legalDocumentModelImpl._num;

		legalDocumentModelImpl._originalLanguage =
			legalDocumentModelImpl._language;

		legalDocumentModelImpl._originalStatusDoc =
			legalDocumentModelImpl._statusDoc;

		legalDocumentModelImpl._setOriginalStatusDoc = false;

		legalDocumentModelImpl._originalIsPublic =
			legalDocumentModelImpl._isPublic;

		legalDocumentModelImpl._setOriginalIsPublic = false;

		legalDocumentModelImpl._originalTypeId = legalDocumentModelImpl._typeId;

		legalDocumentModelImpl._setOriginalTypeId = false;

		legalDocumentModelImpl._originalFieldId =
			legalDocumentModelImpl._fieldId;

		legalDocumentModelImpl._setOriginalFieldId = false;

		legalDocumentModelImpl._originalOrganizationId =
			legalDocumentModelImpl._organizationId;

		legalDocumentModelImpl._setOriginalOrganizationId = false;

		legalDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalDocument> toCacheModel() {
		LegalDocumentCacheModel legalDocumentCacheModel =
			new LegalDocumentCacheModel();

		legalDocumentCacheModel.docId = getDocId();

		legalDocumentCacheModel.groupId = getGroupId();

		legalDocumentCacheModel.companyId = getCompanyId();

		legalDocumentCacheModel.userId = getUserId();

		legalDocumentCacheModel.createdByUser = getCreatedByUser();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.modifiedByUser = getModifiedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legalDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.approvedByUser = getApprovedByUser();

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			legalDocumentCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			legalDocumentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.forwardedByUser = getForwardedByUser();

		Date forwardedDate = getForwardedDate();

		if (forwardedDate != null) {
			legalDocumentCacheModel.forwardedDate = forwardedDate.getTime();
		}
		else {
			legalDocumentCacheModel.forwardedDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.publishedByUser = getPublishedByUser();

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			legalDocumentCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			legalDocumentCacheModel.publishedDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.symbol = getSymbol();

		String symbol = legalDocumentCacheModel.symbol;

		if ((symbol != null) && (symbol.length() == 0)) {
			legalDocumentCacheModel.symbol = null;
		}

		legalDocumentCacheModel.num = getNum();

		String num = legalDocumentCacheModel.num;

		if ((num != null) && (num.length() == 0)) {
			legalDocumentCacheModel.num = null;
		}

		Date promulDate = getPromulDate();

		if (promulDate != null) {
			legalDocumentCacheModel.promulDate = promulDate.getTime();
		}
		else {
			legalDocumentCacheModel.promulDate = Long.MIN_VALUE;
		}

		Date effectivedDate = getEffectivedDate();

		if (effectivedDate != null) {
			legalDocumentCacheModel.effectivedDate = effectivedDate.getTime();
		}
		else {
			legalDocumentCacheModel.effectivedDate = Long.MIN_VALUE;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			legalDocumentCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			legalDocumentCacheModel.expiredDate = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.replaceDoc = getReplaceDoc();

		String replaceDoc = legalDocumentCacheModel.replaceDoc;

		if ((replaceDoc != null) && (replaceDoc.length() == 0)) {
			legalDocumentCacheModel.replaceDoc = null;
		}

		legalDocumentCacheModel.summary = getSummary();

		String summary = legalDocumentCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			legalDocumentCacheModel.summary = null;
		}

		legalDocumentCacheModel.content = getContent();

		String content = legalDocumentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			legalDocumentCacheModel.content = null;
		}

		legalDocumentCacheModel.language = getLanguage();

		String language = legalDocumentCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalDocumentCacheModel.language = null;
		}

		legalDocumentCacheModel.userHit = getUserHit();

		legalDocumentCacheModel.statusDoc = getStatusDoc();

		legalDocumentCacheModel.isPublic = getIsPublic();

		legalDocumentCacheModel.typeId = getTypeId();

		legalDocumentCacheModel.fieldId = getFieldId();

		legalDocumentCacheModel.organizationId = getOrganizationId();

		legalDocumentCacheModel.orgRels = getOrgRels();

		String orgRels = legalDocumentCacheModel.orgRels;

		if ((orgRels != null) && (orgRels.length() == 0)) {
			legalDocumentCacheModel.orgRels = null;
		}

		legalDocumentCacheModel.signerRels = getSignerRels();

		String signerRels = legalDocumentCacheModel.signerRels;

		if ((signerRels != null) && (signerRels.length() == 0)) {
			legalDocumentCacheModel.signerRels = null;
		}

		legalDocumentCacheModel.fieldRels = getFieldRels();

		String fieldRels = legalDocumentCacheModel.fieldRels;

		if ((fieldRels != null) && (fieldRels.length() == 0)) {
			legalDocumentCacheModel.fieldRels = null;
		}

		legalDocumentCacheModel.numRels = getNumRels();

		String numRels = legalDocumentCacheModel.numRels;

		if ((numRels != null) && (numRels.length() == 0)) {
			legalDocumentCacheModel.numRels = null;
		}

		legalDocumentCacheModel.docCode = getDocCode();

		String docCode = legalDocumentCacheModel.docCode;

		if ((docCode != null) && (docCode.length() == 0)) {
			legalDocumentCacheModel.docCode = null;
		}

		legalDocumentCacheModel.departmentRels = getDepartmentRels();

		String departmentRels = legalDocumentCacheModel.departmentRels;

		if ((departmentRels != null) && (departmentRels.length() == 0)) {
			legalDocumentCacheModel.departmentRels = null;
		}

		legalDocumentCacheModel.signerName = getSignerName();

		String signerName = legalDocumentCacheModel.signerName;

		if ((signerName != null) && (signerName.length() == 0)) {
			legalDocumentCacheModel.signerName = null;
		}

		Date ngayDangCongBao = getNgayDangCongBao();

		if (ngayDangCongBao != null) {
			legalDocumentCacheModel.ngayDangCongBao = ngayDangCongBao.getTime();
		}
		else {
			legalDocumentCacheModel.ngayDangCongBao = Long.MIN_VALUE;
		}

		legalDocumentCacheModel.soCongBao = getSoCongBao();

		String soCongBao = legalDocumentCacheModel.soCongBao;

		if ((soCongBao != null) && (soCongBao.length() == 0)) {
			legalDocumentCacheModel.soCongBao = null;
		}

		legalDocumentCacheModel.levelValidityId = getLevelValidityId();

		legalDocumentCacheModel.tags = getTags();

		String tags = legalDocumentCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			legalDocumentCacheModel.tags = null;
		}

		legalDocumentCacheModel.docRelation = getDocRelation();

		String docRelation = legalDocumentCacheModel.docRelation;

		if ((docRelation != null) && (docRelation.length() == 0)) {
			legalDocumentCacheModel.docRelation = null;
		}

		legalDocumentCacheModel.newGopY = isNewGopY();

		legalDocumentCacheModel.view = getView();

		return legalDocumentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalDocument, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalDocument)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalDocument, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalDocument)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalDocument>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _docId;
	private long _originalDocId;
	private boolean _setOriginalDocId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _createdByUser;
	private long _originalCreatedByUser;
	private boolean _setOriginalCreatedByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _forwardedByUser;
	private Date _forwardedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private String _symbol;
	private String _originalSymbol;
	private String _num;
	private String _originalNum;
	private Date _promulDate;
	private Date _effectivedDate;
	private Date _expiredDate;
	private String _replaceDoc;
	private String _summary;
	private String _content;
	private String _language;
	private String _originalLanguage;
	private int _userHit;
	private int _statusDoc;
	private int _originalStatusDoc;
	private boolean _setOriginalStatusDoc;
	private int _isPublic;
	private int _originalIsPublic;
	private boolean _setOriginalIsPublic;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _fieldId;
	private long _originalFieldId;
	private boolean _setOriginalFieldId;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private String _orgRels;
	private String _signerRels;
	private String _fieldRels;
	private String _numRels;
	private String _docCode;
	private String _departmentRels;
	private String _signerName;
	private Date _ngayDangCongBao;
	private String _soCongBao;
	private long _levelValidityId;
	private String _tags;
	private String _docRelation;
	private boolean _newGopY;
	private long _view;
	private long _columnBitmask;
	private LegalDocument _escapedModel;

}