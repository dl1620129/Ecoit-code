/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalTDRel;
import com.ecoit.elegaldocument.model.LegalTDRelModel;
import com.ecoit.elegaldocument.model.LegalTDRelSoap;
import com.ecoit.elegaldocument.service.persistence.LegalTDRelPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalTDRel service. Represents a row in the &quot;ecoit_doc_LegalTDRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalTDRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalTDRelImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalTDRelImpl
 * @generated
 */
@JSON(strict = true)
public class LegalTDRelModelImpl
	extends BaseModelImpl<LegalTDRel> implements LegalTDRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal td rel model instance should use the <code>LegalTDRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalTDRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"docId", Types.BIGINT}, {"tagId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("docId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tagId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalTDRel (docId LONG not null,tagId LONG not null,primary key (docId, tagId))";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalTDRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalTDRel.id.docId DESC, legalTDRel.id.tagId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalTDRel.docId DESC, ecoit_doc_LegalTDRel.tagId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DOCID_COLUMN_BITMASK = 1L;

	public static final long TAGID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalTDRel toModel(LegalTDRelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalTDRel model = new LegalTDRelImpl();

		model.setDocId(soapModel.getDocId());
		model.setTagId(soapModel.getTagId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalTDRel> toModels(LegalTDRelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LegalTDRel> models = new ArrayList<LegalTDRel>(soapModels.length);

		for (LegalTDRelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalTDRelModelImpl() {
	}

	@Override
	public LegalTDRelPK getPrimaryKey() {
		return new LegalTDRelPK(_docId, _tagId);
	}

	@Override
	public void setPrimaryKey(LegalTDRelPK primaryKey) {
		setDocId(primaryKey.docId);
		setTagId(primaryKey.tagId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new LegalTDRelPK(_docId, _tagId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((LegalTDRelPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return LegalTDRel.class;
	}

	@Override
	public String getModelClassName() {
		return LegalTDRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalTDRel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalTDRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTDRel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LegalTDRel)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalTDRel, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalTDRel, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalTDRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalTDRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalTDRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalTDRel>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalTDRel.class.getClassLoader(), LegalTDRel.class,
			ModelWrapper.class);

		try {
			Constructor<LegalTDRel> constructor =
				(Constructor<LegalTDRel>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalTDRel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalTDRel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalTDRel, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LegalTDRel, Object>>();
		Map<String, BiConsumer<LegalTDRel, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LegalTDRel, ?>>();

		attributeGetterFunctions.put("docId", LegalTDRel::getDocId);
		attributeSetterBiConsumers.put(
			"docId", (BiConsumer<LegalTDRel, Long>)LegalTDRel::setDocId);
		attributeGetterFunctions.put("tagId", LegalTDRel::getTagId);
		attributeSetterBiConsumers.put(
			"tagId", (BiConsumer<LegalTDRel, Long>)LegalTDRel::setTagId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDocId() {
		return _docId;
	}

	@Override
	public void setDocId(long docId) {
		_columnBitmask = -1L;

		if (!_setOriginalDocId) {
			_setOriginalDocId = true;

			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public long getOriginalDocId() {
		return _originalDocId;
	}

	@JSON
	@Override
	public long getTagId() {
		return _tagId;
	}

	@Override
	public void setTagId(long tagId) {
		_columnBitmask = -1L;

		if (!_setOriginalTagId) {
			_setOriginalTagId = true;

			_originalTagId = _tagId;
		}

		_tagId = tagId;
	}

	public long getOriginalTagId() {
		return _originalTagId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LegalTDRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalTDRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalTDRelImpl legalTDRelImpl = new LegalTDRelImpl();

		legalTDRelImpl.setDocId(getDocId());
		legalTDRelImpl.setTagId(getTagId());

		legalTDRelImpl.resetOriginalValues();

		return legalTDRelImpl;
	}

	@Override
	public int compareTo(LegalTDRel legalTDRel) {
		int value = 0;

		if (getDocId() < legalTDRel.getDocId()) {
			value = -1;
		}
		else if (getDocId() > legalTDRel.getDocId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		if (getTagId() < legalTDRel.getTagId()) {
			value = -1;
		}
		else if (getTagId() > legalTDRel.getTagId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalTDRel)) {
			return false;
		}

		LegalTDRel legalTDRel = (LegalTDRel)obj;

		LegalTDRelPK primaryKey = legalTDRel.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalTDRelModelImpl legalTDRelModelImpl = this;

		legalTDRelModelImpl._originalDocId = legalTDRelModelImpl._docId;

		legalTDRelModelImpl._setOriginalDocId = false;

		legalTDRelModelImpl._originalTagId = legalTDRelModelImpl._tagId;

		legalTDRelModelImpl._setOriginalTagId = false;

		legalTDRelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalTDRel> toCacheModel() {
		LegalTDRelCacheModel legalTDRelCacheModel = new LegalTDRelCacheModel();

		legalTDRelCacheModel.legalTDRelPK = getPrimaryKey();

		legalTDRelCacheModel.docId = getDocId();

		legalTDRelCacheModel.tagId = getTagId();

		return legalTDRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalTDRel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalTDRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTDRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalTDRel)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalTDRel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalTDRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTDRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalTDRel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalTDRel>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _docId;
	private long _originalDocId;
	private boolean _setOriginalDocId;
	private long _tagId;
	private long _originalTagId;
	private boolean _setOriginalTagId;
	private long _columnBitmask;
	private LegalTDRel _escapedModel;

}