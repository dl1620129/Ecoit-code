/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalTags;
import com.ecoit.elegaldocument.model.LegalTagsModel;
import com.ecoit.elegaldocument.model.LegalTagsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalTags service. Represents a row in the &quot;ecoit_doc_LegalTags&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalTagsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalTagsImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalTagsImpl
 * @generated
 */
@JSON(strict = true)
public class LegalTagsModelImpl
	extends BaseModelImpl<LegalTags> implements LegalTagsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal tags model instance should use the <code>LegalTags</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalTags";

	public static final Object[][] TABLE_COLUMNS = {
		{"tagId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"statusTags", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tagId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusTags", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalTags (tagId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,statusTags BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalTags";

	public static final String ORDER_BY_JPQL = " ORDER BY legalTags.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalTags.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long STATUSTAGS_COLUMN_BITMASK = 2L;

	public static final long NAME_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalTags toModel(LegalTagsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalTags model = new LegalTagsImpl();

		model.setTagId(soapModel.getTagId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setStatusTags(soapModel.isStatusTags());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalTags> toModels(LegalTagsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LegalTags> models = new ArrayList<LegalTags>(soapModels.length);

		for (LegalTagsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalTagsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tagId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTagId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tagId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalTags.class;
	}

	@Override
	public String getModelClassName() {
		return LegalTags.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalTags, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalTags, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTags, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LegalTags)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalTags, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalTags, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalTags)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalTags, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalTags, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalTags>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalTags.class.getClassLoader(), LegalTags.class,
			ModelWrapper.class);

		try {
			Constructor<LegalTags> constructor =
				(Constructor<LegalTags>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalTags, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalTags, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalTags, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LegalTags, Object>>();
		Map<String, BiConsumer<LegalTags, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LegalTags, ?>>();

		attributeGetterFunctions.put("tagId", LegalTags::getTagId);
		attributeSetterBiConsumers.put(
			"tagId", (BiConsumer<LegalTags, Long>)LegalTags::setTagId);
		attributeGetterFunctions.put("groupId", LegalTags::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<LegalTags, Long>)LegalTags::setGroupId);
		attributeGetterFunctions.put("companyId", LegalTags::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<LegalTags, Long>)LegalTags::setCompanyId);
		attributeGetterFunctions.put("userId", LegalTags::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<LegalTags, Long>)LegalTags::setUserId);
		attributeGetterFunctions.put("createdDate", LegalTags::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalTags, Date>)LegalTags::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", LegalTags::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalTags, Date>)LegalTags::setModifiedDate);
		attributeGetterFunctions.put("name", LegalTags::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<LegalTags, String>)LegalTags::setName);
		attributeGetterFunctions.put("statusTags", LegalTags::getStatusTags);
		attributeSetterBiConsumers.put(
			"statusTags",
			(BiConsumer<LegalTags, Boolean>)LegalTags::setStatusTags);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTagId() {
		return _tagId;
	}

	@Override
	public void setTagId(long tagId) {
		_tagId = tagId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public boolean getStatusTags() {
		return _statusTags;
	}

	@JSON
	@Override
	public boolean isStatusTags() {
		return _statusTags;
	}

	@Override
	public void setStatusTags(boolean statusTags) {
		_columnBitmask |= STATUSTAGS_COLUMN_BITMASK;

		if (!_setOriginalStatusTags) {
			_setOriginalStatusTags = true;

			_originalStatusTags = _statusTags;
		}

		_statusTags = statusTags;
	}

	public boolean getOriginalStatusTags() {
		return _originalStatusTags;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalTags.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalTags toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalTags>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalTagsImpl legalTagsImpl = new LegalTagsImpl();

		legalTagsImpl.setTagId(getTagId());
		legalTagsImpl.setGroupId(getGroupId());
		legalTagsImpl.setCompanyId(getCompanyId());
		legalTagsImpl.setUserId(getUserId());
		legalTagsImpl.setCreatedDate(getCreatedDate());
		legalTagsImpl.setModifiedDate(getModifiedDate());
		legalTagsImpl.setName(getName());
		legalTagsImpl.setStatusTags(isStatusTags());

		legalTagsImpl.resetOriginalValues();

		return legalTagsImpl;
	}

	@Override
	public int compareTo(LegalTags legalTags) {
		int value = 0;

		value = getName().compareTo(legalTags.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalTags)) {
			return false;
		}

		LegalTags legalTags = (LegalTags)obj;

		long primaryKey = legalTags.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalTagsModelImpl legalTagsModelImpl = this;

		legalTagsModelImpl._originalGroupId = legalTagsModelImpl._groupId;

		legalTagsModelImpl._setOriginalGroupId = false;

		legalTagsModelImpl._originalStatusTags = legalTagsModelImpl._statusTags;

		legalTagsModelImpl._setOriginalStatusTags = false;

		legalTagsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalTags> toCacheModel() {
		LegalTagsCacheModel legalTagsCacheModel = new LegalTagsCacheModel();

		legalTagsCacheModel.tagId = getTagId();

		legalTagsCacheModel.groupId = getGroupId();

		legalTagsCacheModel.companyId = getCompanyId();

		legalTagsCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalTagsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalTagsCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalTagsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legalTagsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalTagsCacheModel.name = getName();

		String name = legalTagsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			legalTagsCacheModel.name = null;
		}

		legalTagsCacheModel.statusTags = isStatusTags();

		return legalTagsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalTags, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalTags, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTags, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalTags)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalTags, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalTags, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalTags, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalTags)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalTags>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _tagId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private Date _createdDate;
	private Date _modifiedDate;
	private String _name;
	private boolean _statusTags;
	private boolean _originalStatusTags;
	private boolean _setOriginalStatusTags;
	private long _columnBitmask;
	private LegalTags _escapedModel;

}