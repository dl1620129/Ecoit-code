/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalLevelValidity;
import com.ecoit.elegaldocument.model.LegalLevelValidityModel;
import com.ecoit.elegaldocument.model.LegalLevelValiditySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalLevelValidity service. Represents a row in the &quot;ecoit_doc_LegalLevelValidity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalLevelValidityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalLevelValidityImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalLevelValidityImpl
 * @generated
 */
@JSON(strict = true)
public class LegalLevelValidityModelImpl
	extends BaseModelImpl<LegalLevelValidity>
	implements LegalLevelValidityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal level validity model instance should use the <code>LegalLevelValidity</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalLevelValidity";

	public static final Object[][] TABLE_COLUMNS = {
		{"levelValidityId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdByUser", Types.BIGINT}, {"modifiedByUser", Types.BIGINT},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"language", Types.VARCHAR}, {"statusLevelValidity", Types.BOOLEAN},
		{"position", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("levelValidityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusLevelValidity", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalLevelValidity (levelValidityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,createdByUser LONG,modifiedByUser LONG,name VARCHAR(75) null,description VARCHAR(75) null,language VARCHAR(75) null,statusLevelValidity BOOLEAN,position INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalLevelValidity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalLevelValidity.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalLevelValidity.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long LANGUAGE_COLUMN_BITMASK = 4L;

	public static final long LEVELVALIDITYID_COLUMN_BITMASK = 8L;

	public static final long STATUSLEVELVALIDITY_COLUMN_BITMASK = 16L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalLevelValidity toModel(LegalLevelValiditySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalLevelValidity model = new LegalLevelValidityImpl();

		model.setLevelValidityId(soapModel.getLevelValidityId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setLanguage(soapModel.getLanguage());
		model.setStatusLevelValidity(soapModel.isStatusLevelValidity());
		model.setPosition(soapModel.getPosition());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalLevelValidity> toModels(
		LegalLevelValiditySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LegalLevelValidity> models = new ArrayList<LegalLevelValidity>(
			soapModels.length);

		for (LegalLevelValiditySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalLevelValidityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _levelValidityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLevelValidityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _levelValidityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalLevelValidity.class;
	}

	@Override
	public String getModelClassName() {
		return LegalLevelValidity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalLevelValidity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalLevelValidity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLevelValidity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LegalLevelValidity)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalLevelValidity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalLevelValidity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalLevelValidity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalLevelValidity, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalLevelValidity, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalLevelValidity>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalLevelValidity.class.getClassLoader(), LegalLevelValidity.class,
			ModelWrapper.class);

		try {
			Constructor<LegalLevelValidity> constructor =
				(Constructor<LegalLevelValidity>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalLevelValidity, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalLevelValidity, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalLevelValidity, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<LegalLevelValidity, Object>>();
		Map<String, BiConsumer<LegalLevelValidity, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LegalLevelValidity, ?>>();

		attributeGetterFunctions.put(
			"levelValidityId", LegalLevelValidity::getLevelValidityId);
		attributeSetterBiConsumers.put(
			"levelValidityId",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setLevelValidityId);
		attributeGetterFunctions.put("groupId", LegalLevelValidity::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LegalLevelValidity::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setCompanyId);
		attributeGetterFunctions.put("userId", LegalLevelValidity::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setUserId);
		attributeGetterFunctions.put(
			"createdDate", LegalLevelValidity::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalLevelValidity, Date>)
				LegalLevelValidity::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", LegalLevelValidity::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalLevelValidity, Date>)
				LegalLevelValidity::setModifiedDate);
		attributeGetterFunctions.put(
			"createdByUser", LegalLevelValidity::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setCreatedByUser);
		attributeGetterFunctions.put(
			"modifiedByUser", LegalLevelValidity::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LegalLevelValidity, Long>)
				LegalLevelValidity::setModifiedByUser);
		attributeGetterFunctions.put("name", LegalLevelValidity::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<LegalLevelValidity, String>)
				LegalLevelValidity::setName);
		attributeGetterFunctions.put(
			"description", LegalLevelValidity::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<LegalLevelValidity, String>)
				LegalLevelValidity::setDescription);
		attributeGetterFunctions.put(
			"language", LegalLevelValidity::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalLevelValidity, String>)
				LegalLevelValidity::setLanguage);
		attributeGetterFunctions.put(
			"statusLevelValidity", LegalLevelValidity::getStatusLevelValidity);
		attributeSetterBiConsumers.put(
			"statusLevelValidity",
			(BiConsumer<LegalLevelValidity, Boolean>)
				LegalLevelValidity::setStatusLevelValidity);
		attributeGetterFunctions.put(
			"position", LegalLevelValidity::getPosition);
		attributeSetterBiConsumers.put(
			"position",
			(BiConsumer<LegalLevelValidity, Integer>)
				LegalLevelValidity::setPosition);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLevelValidityId() {
		return _levelValidityId;
	}

	@Override
	public void setLevelValidityId(long levelValidityId) {
		_columnBitmask |= LEVELVALIDITYID_COLUMN_BITMASK;

		if (!_setOriginalLevelValidityId) {
			_setOriginalLevelValidityId = true;

			_originalLevelValidityId = _levelValidityId;
		}

		_levelValidityId = levelValidityId;
	}

	public long getOriginalLevelValidityId() {
		return _originalLevelValidityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public boolean getStatusLevelValidity() {
		return _statusLevelValidity;
	}

	@JSON
	@Override
	public boolean isStatusLevelValidity() {
		return _statusLevelValidity;
	}

	@Override
	public void setStatusLevelValidity(boolean statusLevelValidity) {
		_columnBitmask |= STATUSLEVELVALIDITY_COLUMN_BITMASK;

		if (!_setOriginalStatusLevelValidity) {
			_setOriginalStatusLevelValidity = true;

			_originalStatusLevelValidity = _statusLevelValidity;
		}

		_statusLevelValidity = statusLevelValidity;
	}

	public boolean getOriginalStatusLevelValidity() {
		return _originalStatusLevelValidity;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_position = position;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalLevelValidity.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalLevelValidity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalLevelValidity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalLevelValidityImpl legalLevelValidityImpl =
			new LegalLevelValidityImpl();

		legalLevelValidityImpl.setLevelValidityId(getLevelValidityId());
		legalLevelValidityImpl.setGroupId(getGroupId());
		legalLevelValidityImpl.setCompanyId(getCompanyId());
		legalLevelValidityImpl.setUserId(getUserId());
		legalLevelValidityImpl.setCreatedDate(getCreatedDate());
		legalLevelValidityImpl.setModifiedDate(getModifiedDate());
		legalLevelValidityImpl.setCreatedByUser(getCreatedByUser());
		legalLevelValidityImpl.setModifiedByUser(getModifiedByUser());
		legalLevelValidityImpl.setName(getName());
		legalLevelValidityImpl.setDescription(getDescription());
		legalLevelValidityImpl.setLanguage(getLanguage());
		legalLevelValidityImpl.setStatusLevelValidity(isStatusLevelValidity());
		legalLevelValidityImpl.setPosition(getPosition());

		legalLevelValidityImpl.resetOriginalValues();

		return legalLevelValidityImpl;
	}

	@Override
	public int compareTo(LegalLevelValidity legalLevelValidity) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreatedDate(), legalLevelValidity.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalLevelValidity)) {
			return false;
		}

		LegalLevelValidity legalLevelValidity = (LegalLevelValidity)obj;

		long primaryKey = legalLevelValidity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalLevelValidityModelImpl legalLevelValidityModelImpl = this;

		legalLevelValidityModelImpl._originalLevelValidityId =
			legalLevelValidityModelImpl._levelValidityId;

		legalLevelValidityModelImpl._setOriginalLevelValidityId = false;

		legalLevelValidityModelImpl._originalGroupId =
			legalLevelValidityModelImpl._groupId;

		legalLevelValidityModelImpl._setOriginalGroupId = false;

		legalLevelValidityModelImpl._originalCompanyId =
			legalLevelValidityModelImpl._companyId;

		legalLevelValidityModelImpl._setOriginalCompanyId = false;

		legalLevelValidityModelImpl._originalLanguage =
			legalLevelValidityModelImpl._language;

		legalLevelValidityModelImpl._originalStatusLevelValidity =
			legalLevelValidityModelImpl._statusLevelValidity;

		legalLevelValidityModelImpl._setOriginalStatusLevelValidity = false;

		legalLevelValidityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalLevelValidity> toCacheModel() {
		LegalLevelValidityCacheModel legalLevelValidityCacheModel =
			new LegalLevelValidityCacheModel();

		legalLevelValidityCacheModel.levelValidityId = getLevelValidityId();

		legalLevelValidityCacheModel.groupId = getGroupId();

		legalLevelValidityCacheModel.companyId = getCompanyId();

		legalLevelValidityCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalLevelValidityCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalLevelValidityCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalLevelValidityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legalLevelValidityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalLevelValidityCacheModel.createdByUser = getCreatedByUser();

		legalLevelValidityCacheModel.modifiedByUser = getModifiedByUser();

		legalLevelValidityCacheModel.name = getName();

		String name = legalLevelValidityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			legalLevelValidityCacheModel.name = null;
		}

		legalLevelValidityCacheModel.description = getDescription();

		String description = legalLevelValidityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			legalLevelValidityCacheModel.description = null;
		}

		legalLevelValidityCacheModel.language = getLanguage();

		String language = legalLevelValidityCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalLevelValidityCacheModel.language = null;
		}

		legalLevelValidityCacheModel.statusLevelValidity =
			isStatusLevelValidity();

		legalLevelValidityCacheModel.position = getPosition();

		return legalLevelValidityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalLevelValidity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalLevelValidity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLevelValidity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalLevelValidity)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalLevelValidity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalLevelValidity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalLevelValidity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalLevelValidity)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalLevelValidity>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _levelValidityId;
	private long _originalLevelValidityId;
	private boolean _setOriginalLevelValidityId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _createdByUser;
	private long _modifiedByUser;
	private String _name;
	private String _description;
	private String _language;
	private String _originalLanguage;
	private boolean _statusLevelValidity;
	private boolean _originalStatusLevelValidity;
	private boolean _setOriginalStatusLevelValidity;
	private int _position;
	private long _columnBitmask;
	private LegalLevelValidity _escapedModel;

}