/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.lichcongtac.services.model.impl;

import com.ecoit.lichcongtac.services.model.UserPermissionGroup;
import com.ecoit.lichcongtac.services.model.UserPermissionGroupModel;
import com.ecoit.lichcongtac.services.model.UserPermissionGroupSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserPermissionGroup service. Represents a row in the &quot;ecoit_lich_UserPermissionGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserPermissionGroupModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserPermissionGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserPermissionGroupImpl
 * @generated
 */
@JSON(strict = true)
public class UserPermissionGroupModelImpl
	extends BaseModelImpl<UserPermissionGroup>
	implements UserPermissionGroupModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user permission group model instance should use the <code>UserPermissionGroup</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_lich_UserPermissionGroup";

	public static final Object[][] TABLE_COLUMNS = {
		{"userPermissionGroupId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"groupName", Types.VARCHAR},
		{"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userPermissionGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_lich_UserPermissionGroup (userPermissionGroupId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,groupName VARCHAR(75) null,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_lich_UserPermissionGroup";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userPermissionGroup.userPermissionGroupId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_lich_UserPermissionGroup.userPermissionGroupId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserPermissionGroup toModel(
		UserPermissionGroupSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		UserPermissionGroup model = new UserPermissionGroupImpl();

		model.setUserPermissionGroupId(soapModel.getUserPermissionGroupId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGroupName(soapModel.getGroupName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserPermissionGroup> toModels(
		UserPermissionGroupSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<UserPermissionGroup> models = new ArrayList<UserPermissionGroup>(
			soapModels.length);

		for (UserPermissionGroupSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UserPermissionGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userPermissionGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserPermissionGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userPermissionGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserPermissionGroup.class;
	}

	@Override
	public String getModelClassName() {
		return UserPermissionGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserPermissionGroup, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserPermissionGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPermissionGroup, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserPermissionGroup)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserPermissionGroup, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserPermissionGroup, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserPermissionGroup)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserPermissionGroup, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserPermissionGroup, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserPermissionGroup>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserPermissionGroup.class.getClassLoader(),
			UserPermissionGroup.class, ModelWrapper.class);

		try {
			Constructor<UserPermissionGroup> constructor =
				(Constructor<UserPermissionGroup>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserPermissionGroup, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserPermissionGroup, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserPermissionGroup, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<UserPermissionGroup, Object>>();
		Map<String, BiConsumer<UserPermissionGroup, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<UserPermissionGroup, ?>>();

		attributeGetterFunctions.put(
			"userPermissionGroupId",
			UserPermissionGroup::getUserPermissionGroupId);
		attributeSetterBiConsumers.put(
			"userPermissionGroupId",
			(BiConsumer<UserPermissionGroup, Long>)
				UserPermissionGroup::setUserPermissionGroupId);
		attributeGetterFunctions.put(
			"groupId", UserPermissionGroup::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<UserPermissionGroup, Long>)
				UserPermissionGroup::setGroupId);
		attributeGetterFunctions.put(
			"companyId", UserPermissionGroup::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<UserPermissionGroup, Long>)
				UserPermissionGroup::setCompanyId);
		attributeGetterFunctions.put("userId", UserPermissionGroup::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserPermissionGroup, Long>)
				UserPermissionGroup::setUserId);
		attributeGetterFunctions.put(
			"userName", UserPermissionGroup::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<UserPermissionGroup, String>)
				UserPermissionGroup::setUserName);
		attributeGetterFunctions.put(
			"createDate", UserPermissionGroup::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserPermissionGroup, Date>)
				UserPermissionGroup::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", UserPermissionGroup::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<UserPermissionGroup, Date>)
				UserPermissionGroup::setModifiedDate);
		attributeGetterFunctions.put(
			"groupName", UserPermissionGroup::getGroupName);
		attributeSetterBiConsumers.put(
			"groupName",
			(BiConsumer<UserPermissionGroup, String>)
				UserPermissionGroup::setGroupName);
		attributeGetterFunctions.put(
			"description", UserPermissionGroup::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<UserPermissionGroup, String>)
				UserPermissionGroup::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserPermissionGroupId() {
		return _userPermissionGroupId;
	}

	@Override
	public void setUserPermissionGroupId(long userPermissionGroupId) {
		_userPermissionGroupId = userPermissionGroupId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return "";
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_groupName = groupName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), UserPermissionGroup.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserPermissionGroup toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserPermissionGroup>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserPermissionGroupImpl userPermissionGroupImpl =
			new UserPermissionGroupImpl();

		userPermissionGroupImpl.setUserPermissionGroupId(
			getUserPermissionGroupId());
		userPermissionGroupImpl.setGroupId(getGroupId());
		userPermissionGroupImpl.setCompanyId(getCompanyId());
		userPermissionGroupImpl.setUserId(getUserId());
		userPermissionGroupImpl.setUserName(getUserName());
		userPermissionGroupImpl.setCreateDate(getCreateDate());
		userPermissionGroupImpl.setModifiedDate(getModifiedDate());
		userPermissionGroupImpl.setGroupName(getGroupName());
		userPermissionGroupImpl.setDescription(getDescription());

		userPermissionGroupImpl.resetOriginalValues();

		return userPermissionGroupImpl;
	}

	@Override
	public int compareTo(UserPermissionGroup userPermissionGroup) {
		long primaryKey = userPermissionGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserPermissionGroup)) {
			return false;
		}

		UserPermissionGroup userPermissionGroup = (UserPermissionGroup)obj;

		long primaryKey = userPermissionGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		UserPermissionGroupModelImpl userPermissionGroupModelImpl = this;

		userPermissionGroupModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<UserPermissionGroup> toCacheModel() {
		UserPermissionGroupCacheModel userPermissionGroupCacheModel =
			new UserPermissionGroupCacheModel();

		userPermissionGroupCacheModel.userPermissionGroupId =
			getUserPermissionGroupId();

		userPermissionGroupCacheModel.groupId = getGroupId();

		userPermissionGroupCacheModel.companyId = getCompanyId();

		userPermissionGroupCacheModel.userId = getUserId();

		userPermissionGroupCacheModel.userName = getUserName();

		String userName = userPermissionGroupCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userPermissionGroupCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userPermissionGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			userPermissionGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userPermissionGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userPermissionGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userPermissionGroupCacheModel.groupName = getGroupName();

		String groupName = userPermissionGroupCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			userPermissionGroupCacheModel.groupName = null;
		}

		userPermissionGroupCacheModel.description = getDescription();

		String description = userPermissionGroupCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			userPermissionGroupCacheModel.description = null;
		}

		return userPermissionGroupCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserPermissionGroup, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserPermissionGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPermissionGroup, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserPermissionGroup)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserPermissionGroup, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserPermissionGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPermissionGroup, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserPermissionGroup)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserPermissionGroup>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _userPermissionGroupId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _groupName;
	private String _description;
	private UserPermissionGroup _escapedModel;

}