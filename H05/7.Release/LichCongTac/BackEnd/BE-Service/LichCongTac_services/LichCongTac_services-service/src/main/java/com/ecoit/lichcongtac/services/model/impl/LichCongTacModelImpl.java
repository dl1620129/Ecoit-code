/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.lichcongtac.services.model.impl;

import com.ecoit.lichcongtac.services.model.LichCongTac;
import com.ecoit.lichcongtac.services.model.LichCongTacModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LichCongTac service. Represents a row in the &quot;ecoit_lich_LichCongTac&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LichCongTacModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LichCongTacImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LichCongTacImpl
 * @generated
 */
public class LichCongTacModelImpl
	extends BaseModelImpl<LichCongTac> implements LichCongTacModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lich cong tac model instance should use the <code>LichCongTac</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_lich_LichCongTac";

	public static final Object[][] TABLE_COLUMNS = {
		{"lichCongTacId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"language", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"createdByUser", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedByUser", Types.BIGINT},
		{"tenLich", Types.VARCHAR}, {"ngayBatDau", Types.TIMESTAMP},
		{"ngayKetThuc", Types.TIMESTAMP}, {"lichChuyenBanNganh", Types.VARCHAR},
		{"lichChuyenNguoiDung", Types.VARCHAR},
		{"trangthaiLichCongTac", Types.INTEGER},
		{"organizationId", Types.BIGINT}, {"lydoTraVe", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lichCongTacId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tenLich", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngayBatDau", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngayKetThuc", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lichChuyenBanNganh", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lichChuyenNguoiDung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangthaiLichCongTac", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lydoTraVe", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_lich_LichCongTac (lichCongTacId LONG not null primary key,groupId LONG,language VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,createdByUser LONG,modifiedDate DATE null,modifiedByUser LONG,tenLich VARCHAR(250) null,ngayBatDau DATE null,ngayKetThuc DATE null,lichChuyenBanNganh STRING null,lichChuyenNguoiDung STRING null,trangthaiLichCongTac INTEGER,organizationId LONG,lydoTraVe STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_lich_LichCongTac";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lichCongTac.lichCongTacId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_lich_LichCongTac.lichCongTacId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long LICHCONGTACID_COLUMN_BITMASK = 1L;

	public static final long ORGANIZATIONID_COLUMN_BITMASK = 2L;

	public static final long TRANGTHAILICHCONGTAC_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public LichCongTacModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lichCongTacId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLichCongTacId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lichCongTacId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LichCongTac.class;
	}

	@Override
	public String getModelClassName() {
		return LichCongTac.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LichCongTac, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LichCongTac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichCongTac, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LichCongTac)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LichCongTac, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LichCongTac, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LichCongTac)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LichCongTac, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LichCongTac, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LichCongTac>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LichCongTac.class.getClassLoader(), LichCongTac.class,
			ModelWrapper.class);

		try {
			Constructor<LichCongTac> constructor =
				(Constructor<LichCongTac>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LichCongTac, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LichCongTac, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LichCongTac, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LichCongTac, Object>>();
		Map<String, BiConsumer<LichCongTac, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LichCongTac, ?>>();

		attributeGetterFunctions.put(
			"lichCongTacId", LichCongTac::getLichCongTacId);
		attributeSetterBiConsumers.put(
			"lichCongTacId",
			(BiConsumer<LichCongTac, Long>)LichCongTac::setLichCongTacId);
		attributeGetterFunctions.put("groupId", LichCongTac::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<LichCongTac, Long>)LichCongTac::setGroupId);
		attributeGetterFunctions.put("language", LichCongTac::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LichCongTac, String>)LichCongTac::setLanguage);
		attributeGetterFunctions.put("companyId", LichCongTac::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LichCongTac, Long>)LichCongTac::setCompanyId);
		attributeGetterFunctions.put("userId", LichCongTac::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<LichCongTac, Long>)LichCongTac::setUserId);
		attributeGetterFunctions.put("userName", LichCongTac::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<LichCongTac, String>)LichCongTac::setUserName);
		attributeGetterFunctions.put("createDate", LichCongTac::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LichCongTac, Date>)LichCongTac::setCreateDate);
		attributeGetterFunctions.put(
			"createdByUser", LichCongTac::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LichCongTac, Long>)LichCongTac::setCreatedByUser);
		attributeGetterFunctions.put(
			"modifiedDate", LichCongTac::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LichCongTac, Date>)LichCongTac::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedByUser", LichCongTac::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LichCongTac, Long>)LichCongTac::setModifiedByUser);
		attributeGetterFunctions.put("tenLich", LichCongTac::getTenLich);
		attributeSetterBiConsumers.put(
			"tenLich",
			(BiConsumer<LichCongTac, String>)LichCongTac::setTenLich);
		attributeGetterFunctions.put("ngayBatDau", LichCongTac::getNgayBatDau);
		attributeSetterBiConsumers.put(
			"ngayBatDau",
			(BiConsumer<LichCongTac, Date>)LichCongTac::setNgayBatDau);
		attributeGetterFunctions.put(
			"ngayKetThuc", LichCongTac::getNgayKetThuc);
		attributeSetterBiConsumers.put(
			"ngayKetThuc",
			(BiConsumer<LichCongTac, Date>)LichCongTac::setNgayKetThuc);
		attributeGetterFunctions.put(
			"lichChuyenBanNganh", LichCongTac::getLichChuyenBanNganh);
		attributeSetterBiConsumers.put(
			"lichChuyenBanNganh",
			(BiConsumer<LichCongTac, String>)
				LichCongTac::setLichChuyenBanNganh);
		attributeGetterFunctions.put(
			"lichChuyenNguoiDung", LichCongTac::getLichChuyenNguoiDung);
		attributeSetterBiConsumers.put(
			"lichChuyenNguoiDung",
			(BiConsumer<LichCongTac, String>)
				LichCongTac::setLichChuyenNguoiDung);
		attributeGetterFunctions.put(
			"trangthaiLichCongTac", LichCongTac::getTrangthaiLichCongTac);
		attributeSetterBiConsumers.put(
			"trangthaiLichCongTac",
			(BiConsumer<LichCongTac, Integer>)
				LichCongTac::setTrangthaiLichCongTac);
		attributeGetterFunctions.put(
			"organizationId", LichCongTac::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<LichCongTac, Long>)LichCongTac::setOrganizationId);
		attributeGetterFunctions.put("lydoTraVe", LichCongTac::getLydoTraVe);
		attributeSetterBiConsumers.put(
			"lydoTraVe",
			(BiConsumer<LichCongTac, String>)LichCongTac::setLydoTraVe);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLichCongTacId() {
		return _lichCongTacId;
	}

	@Override
	public void setLichCongTacId(long lichCongTacId) {
		_columnBitmask |= LICHCONGTACID_COLUMN_BITMASK;

		if (!_setOriginalLichCongTacId) {
			_setOriginalLichCongTacId = true;

			_originalLichCongTacId = _lichCongTacId;
		}

		_lichCongTacId = lichCongTacId;
	}

	public long getOriginalLichCongTacId() {
		return _originalLichCongTacId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public String getTenLich() {
		if (_tenLich == null) {
			return "";
		}
		else {
			return _tenLich;
		}
	}

	@Override
	public void setTenLich(String tenLich) {
		_tenLich = tenLich;
	}

	@Override
	public Date getNgayBatDau() {
		return _ngayBatDau;
	}

	@Override
	public void setNgayBatDau(Date ngayBatDau) {
		_ngayBatDau = ngayBatDau;
	}

	@Override
	public Date getNgayKetThuc() {
		return _ngayKetThuc;
	}

	@Override
	public void setNgayKetThuc(Date ngayKetThuc) {
		_ngayKetThuc = ngayKetThuc;
	}

	@Override
	public String getLichChuyenBanNganh() {
		if (_lichChuyenBanNganh == null) {
			return "";
		}
		else {
			return _lichChuyenBanNganh;
		}
	}

	@Override
	public void setLichChuyenBanNganh(String lichChuyenBanNganh) {
		_lichChuyenBanNganh = lichChuyenBanNganh;
	}

	@Override
	public String getLichChuyenNguoiDung() {
		if (_lichChuyenNguoiDung == null) {
			return "";
		}
		else {
			return _lichChuyenNguoiDung;
		}
	}

	@Override
	public void setLichChuyenNguoiDung(String lichChuyenNguoiDung) {
		_lichChuyenNguoiDung = lichChuyenNguoiDung;
	}

	@Override
	public int getTrangthaiLichCongTac() {
		return _trangthaiLichCongTac;
	}

	@Override
	public void setTrangthaiLichCongTac(int trangthaiLichCongTac) {
		_columnBitmask |= TRANGTHAILICHCONGTAC_COLUMN_BITMASK;

		if (!_setOriginalTrangthaiLichCongTac) {
			_setOriginalTrangthaiLichCongTac = true;

			_originalTrangthaiLichCongTac = _trangthaiLichCongTac;
		}

		_trangthaiLichCongTac = trangthaiLichCongTac;
	}

	public int getOriginalTrangthaiLichCongTac() {
		return _originalTrangthaiLichCongTac;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public String getLydoTraVe() {
		if (_lydoTraVe == null) {
			return "";
		}
		else {
			return _lydoTraVe;
		}
	}

	@Override
	public void setLydoTraVe(String lydoTraVe) {
		_lydoTraVe = lydoTraVe;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LichCongTac.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LichCongTac toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LichCongTac>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LichCongTacImpl lichCongTacImpl = new LichCongTacImpl();

		lichCongTacImpl.setLichCongTacId(getLichCongTacId());
		lichCongTacImpl.setGroupId(getGroupId());
		lichCongTacImpl.setLanguage(getLanguage());
		lichCongTacImpl.setCompanyId(getCompanyId());
		lichCongTacImpl.setUserId(getUserId());
		lichCongTacImpl.setUserName(getUserName());
		lichCongTacImpl.setCreateDate(getCreateDate());
		lichCongTacImpl.setCreatedByUser(getCreatedByUser());
		lichCongTacImpl.setModifiedDate(getModifiedDate());
		lichCongTacImpl.setModifiedByUser(getModifiedByUser());
		lichCongTacImpl.setTenLich(getTenLich());
		lichCongTacImpl.setNgayBatDau(getNgayBatDau());
		lichCongTacImpl.setNgayKetThuc(getNgayKetThuc());
		lichCongTacImpl.setLichChuyenBanNganh(getLichChuyenBanNganh());
		lichCongTacImpl.setLichChuyenNguoiDung(getLichChuyenNguoiDung());
		lichCongTacImpl.setTrangthaiLichCongTac(getTrangthaiLichCongTac());
		lichCongTacImpl.setOrganizationId(getOrganizationId());
		lichCongTacImpl.setLydoTraVe(getLydoTraVe());

		lichCongTacImpl.resetOriginalValues();

		return lichCongTacImpl;
	}

	@Override
	public int compareTo(LichCongTac lichCongTac) {
		long primaryKey = lichCongTac.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LichCongTac)) {
			return false;
		}

		LichCongTac lichCongTac = (LichCongTac)obj;

		long primaryKey = lichCongTac.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LichCongTacModelImpl lichCongTacModelImpl = this;

		lichCongTacModelImpl._originalLichCongTacId =
			lichCongTacModelImpl._lichCongTacId;

		lichCongTacModelImpl._setOriginalLichCongTacId = false;

		lichCongTacModelImpl._setModifiedDate = false;

		lichCongTacModelImpl._originalTrangthaiLichCongTac =
			lichCongTacModelImpl._trangthaiLichCongTac;

		lichCongTacModelImpl._setOriginalTrangthaiLichCongTac = false;

		lichCongTacModelImpl._originalOrganizationId =
			lichCongTacModelImpl._organizationId;

		lichCongTacModelImpl._setOriginalOrganizationId = false;

		lichCongTacModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LichCongTac> toCacheModel() {
		LichCongTacCacheModel lichCongTacCacheModel =
			new LichCongTacCacheModel();

		lichCongTacCacheModel.lichCongTacId = getLichCongTacId();

		lichCongTacCacheModel.groupId = getGroupId();

		lichCongTacCacheModel.language = getLanguage();

		String language = lichCongTacCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			lichCongTacCacheModel.language = null;
		}

		lichCongTacCacheModel.companyId = getCompanyId();

		lichCongTacCacheModel.userId = getUserId();

		lichCongTacCacheModel.userName = getUserName();

		String userName = lichCongTacCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lichCongTacCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lichCongTacCacheModel.createDate = createDate.getTime();
		}
		else {
			lichCongTacCacheModel.createDate = Long.MIN_VALUE;
		}

		lichCongTacCacheModel.createdByUser = getCreatedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lichCongTacCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lichCongTacCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lichCongTacCacheModel.modifiedByUser = getModifiedByUser();

		lichCongTacCacheModel.tenLich = getTenLich();

		String tenLich = lichCongTacCacheModel.tenLich;

		if ((tenLich != null) && (tenLich.length() == 0)) {
			lichCongTacCacheModel.tenLich = null;
		}

		Date ngayBatDau = getNgayBatDau();

		if (ngayBatDau != null) {
			lichCongTacCacheModel.ngayBatDau = ngayBatDau.getTime();
		}
		else {
			lichCongTacCacheModel.ngayBatDau = Long.MIN_VALUE;
		}

		Date ngayKetThuc = getNgayKetThuc();

		if (ngayKetThuc != null) {
			lichCongTacCacheModel.ngayKetThuc = ngayKetThuc.getTime();
		}
		else {
			lichCongTacCacheModel.ngayKetThuc = Long.MIN_VALUE;
		}

		lichCongTacCacheModel.lichChuyenBanNganh = getLichChuyenBanNganh();

		String lichChuyenBanNganh = lichCongTacCacheModel.lichChuyenBanNganh;

		if ((lichChuyenBanNganh != null) &&
			(lichChuyenBanNganh.length() == 0)) {

			lichCongTacCacheModel.lichChuyenBanNganh = null;
		}

		lichCongTacCacheModel.lichChuyenNguoiDung = getLichChuyenNguoiDung();

		String lichChuyenNguoiDung = lichCongTacCacheModel.lichChuyenNguoiDung;

		if ((lichChuyenNguoiDung != null) &&
			(lichChuyenNguoiDung.length() == 0)) {

			lichCongTacCacheModel.lichChuyenNguoiDung = null;
		}

		lichCongTacCacheModel.trangthaiLichCongTac = getTrangthaiLichCongTac();

		lichCongTacCacheModel.organizationId = getOrganizationId();

		lichCongTacCacheModel.lydoTraVe = getLydoTraVe();

		String lydoTraVe = lichCongTacCacheModel.lydoTraVe;

		if ((lydoTraVe != null) && (lydoTraVe.length() == 0)) {
			lichCongTacCacheModel.lydoTraVe = null;
		}

		return lichCongTacCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LichCongTac, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LichCongTac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichCongTac, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LichCongTac)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LichCongTac, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LichCongTac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichCongTac, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LichCongTac)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LichCongTac>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _lichCongTacId;
	private long _originalLichCongTacId;
	private boolean _setOriginalLichCongTacId;
	private long _groupId;
	private String _language;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private long _createdByUser;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedByUser;
	private String _tenLich;
	private Date _ngayBatDau;
	private Date _ngayKetThuc;
	private String _lichChuyenBanNganh;
	private String _lichChuyenNguoiDung;
	private int _trangthaiLichCongTac;
	private int _originalTrangthaiLichCongTac;
	private boolean _setOriginalTrangthaiLichCongTac;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private String _lydoTraVe;
	private long _columnBitmask;
	private LichCongTac _escapedModel;

}