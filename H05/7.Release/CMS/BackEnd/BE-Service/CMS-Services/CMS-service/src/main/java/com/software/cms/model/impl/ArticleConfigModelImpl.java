/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.ArticleConfig;
import com.software.cms.model.ArticleConfigModel;
import com.software.cms.model.ArticleConfigSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ArticleConfig service. Represents a row in the &quot;soft_cms_ArticleConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArticleConfigModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleConfigImpl}.
 * </p>
 *
 * @author DungNV
 * @see ArticleConfigImpl
 * @generated
 */
@JSON(strict = true)
public class ArticleConfigModelImpl
	extends BaseModelImpl<ArticleConfig> implements ArticleConfigModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article config model instance should use the <code>ArticleConfig</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_ArticleConfig";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"articleConfigId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleConfigId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_ArticleConfig (uuid_ VARCHAR(75) null,articleConfigId LONG not null primary key)";

	public static final String TABLE_SQL_DROP =
		"drop table soft_cms_ArticleConfig";

	public static final String ORDER_BY_JPQL =
		" ORDER BY articleConfig.articleConfigId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_ArticleConfig.articleConfigId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ARTICLECONFIGID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ArticleConfig toModel(ArticleConfigSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ArticleConfig model = new ArticleConfigImpl();

		model.setUuid(soapModel.getUuid());
		model.setArticleConfigId(soapModel.getArticleConfigId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ArticleConfig> toModels(ArticleConfigSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ArticleConfig> models = new ArrayList<ArticleConfig>(
			soapModels.length);

		for (ArticleConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ArticleConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleConfigId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleConfigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ArticleConfig.class;
	}

	@Override
	public String getModelClassName() {
		return ArticleConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ArticleConfig, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ArticleConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleConfig, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ArticleConfig)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ArticleConfig, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ArticleConfig, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ArticleConfig)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ArticleConfig, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ArticleConfig, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ArticleConfig>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ArticleConfig.class.getClassLoader(), ArticleConfig.class,
			ModelWrapper.class);

		try {
			Constructor<ArticleConfig> constructor =
				(Constructor<ArticleConfig>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ArticleConfig, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ArticleConfig, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ArticleConfig, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ArticleConfig, Object>>();
		Map<String, BiConsumer<ArticleConfig, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ArticleConfig, ?>>();

		attributeGetterFunctions.put("uuid", ArticleConfig::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ArticleConfig, String>)ArticleConfig::setUuid);
		attributeGetterFunctions.put(
			"articleConfigId", ArticleConfig::getArticleConfigId);
		attributeSetterBiConsumers.put(
			"articleConfigId",
			(BiConsumer<ArticleConfig, Long>)ArticleConfig::setArticleConfigId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArticleConfigId() {
		return _articleConfigId;
	}

	@Override
	public void setArticleConfigId(long articleConfigId) {
		_articleConfigId = articleConfigId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ArticleConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ArticleConfig toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ArticleConfig>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleConfigImpl articleConfigImpl = new ArticleConfigImpl();

		articleConfigImpl.setUuid(getUuid());
		articleConfigImpl.setArticleConfigId(getArticleConfigId());

		articleConfigImpl.resetOriginalValues();

		return articleConfigImpl;
	}

	@Override
	public int compareTo(ArticleConfig articleConfig) {
		long primaryKey = articleConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ArticleConfig)) {
			return false;
		}

		ArticleConfig articleConfig = (ArticleConfig)obj;

		long primaryKey = articleConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ArticleConfigModelImpl articleConfigModelImpl = this;

		articleConfigModelImpl._originalUuid = articleConfigModelImpl._uuid;

		articleConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ArticleConfig> toCacheModel() {
		ArticleConfigCacheModel articleConfigCacheModel =
			new ArticleConfigCacheModel();

		articleConfigCacheModel.uuid = getUuid();

		String uuid = articleConfigCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			articleConfigCacheModel.uuid = null;
		}

		articleConfigCacheModel.articleConfigId = getArticleConfigId();

		return articleConfigCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ArticleConfig, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ArticleConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleConfig, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ArticleConfig)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ArticleConfig, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ArticleConfig, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleConfig, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ArticleConfig)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ArticleConfig>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _articleConfigId;
	private long _columnBitmask;
	private ArticleConfig _escapedModel;

}