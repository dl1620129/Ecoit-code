/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package LinkManager.Service.model.impl;

import LinkManager.Service.model.Links;
import LinkManager.Service.model.LinksModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Links service. Represents a row in the &quot;portal_Links&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LinksModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LinksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LinksImpl
 * @generated
 */
@ProviderType
public class LinksModelImpl extends BaseModelImpl<Links> implements LinksModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a links model instance should use the <code>Links</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_Links";

	public static final Object[][] TABLE_COLUMNS = {
		{"linksid", Types.BIGINT}, {"groupid", Types.BIGINT},
		{"createddate", Types.TIMESTAMP}, {"modifieddate", Types.TIMESTAMP},
		{"linksgroupid", Types.BIGINT}, {"name", Types.VARCHAR},
		{"decription", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"imageid", Types.BIGINT}, {"hasimage", Types.BOOLEAN},
		{"position", Types.INTEGER}, {"show_", Types.BOOLEAN},
		{"icon", Types.BOOLEAN}, {"parentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("linksid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifieddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("linksgroupid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("decription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hasimage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("show_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("icon", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_Links (linksid LONG not null primary key,groupid LONG,createddate DATE null,modifieddate DATE null,linksgroupid LONG,name VARCHAR(1000) null,decription VARCHAR(1000) null,url VARCHAR(1000) null,imageid LONG,hasimage BOOLEAN,position INTEGER,show_ BOOLEAN,icon BOOLEAN,parentId LONG)";

	public static final String TABLE_SQL_DROP = "drop table portal_Links";

	public static final String ORDER_BY_JPQL = " ORDER BY links.name ASC";

	public static final String ORDER_BY_SQL = " ORDER BY portal_Links.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long LINKSGROUPID_COLUMN_BITMASK = 2L;

	public static final long LINKSID_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static final long PARENTID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public LinksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _linksid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLinksid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _linksid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Links.class;
	}

	@Override
	public String getModelClassName() {
		return Links.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Links, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Links, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Links, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Links)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Links, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Links, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Links)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Links, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Links, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Links>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Links.class.getClassLoader(), Links.class, ModelWrapper.class);

		try {
			Constructor<Links> constructor =
				(Constructor<Links>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Links, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Links, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Links, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Links, Object>>();
		Map<String, BiConsumer<Links, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Links, ?>>();

		attributeGetterFunctions.put("linksid", Links::getLinksid);
		attributeSetterBiConsumers.put(
			"linksid", (BiConsumer<Links, Long>)Links::setLinksid);
		attributeGetterFunctions.put("groupid", Links::getGroupid);
		attributeSetterBiConsumers.put(
			"groupid", (BiConsumer<Links, Long>)Links::setGroupid);
		attributeGetterFunctions.put("createddate", Links::getCreateddate);
		attributeSetterBiConsumers.put(
			"createddate", (BiConsumer<Links, Date>)Links::setCreateddate);
		attributeGetterFunctions.put("modifieddate", Links::getModifieddate);
		attributeSetterBiConsumers.put(
			"modifieddate", (BiConsumer<Links, Date>)Links::setModifieddate);
		attributeGetterFunctions.put("linksgroupid", Links::getLinksgroupid);
		attributeSetterBiConsumers.put(
			"linksgroupid", (BiConsumer<Links, Long>)Links::setLinksgroupid);
		attributeGetterFunctions.put("name", Links::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Links, String>)Links::setName);
		attributeGetterFunctions.put("decription", Links::getDecription);
		attributeSetterBiConsumers.put(
			"decription", (BiConsumer<Links, String>)Links::setDecription);
		attributeGetterFunctions.put("url", Links::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<Links, String>)Links::setUrl);
		attributeGetterFunctions.put("imageid", Links::getImageid);
		attributeSetterBiConsumers.put(
			"imageid", (BiConsumer<Links, Long>)Links::setImageid);
		attributeGetterFunctions.put("hasimage", Links::getHasimage);
		attributeSetterBiConsumers.put(
			"hasimage", (BiConsumer<Links, Boolean>)Links::setHasimage);
		attributeGetterFunctions.put("position", Links::getPosition);
		attributeSetterBiConsumers.put(
			"position", (BiConsumer<Links, Integer>)Links::setPosition);
		attributeGetterFunctions.put("show", Links::getShow);
		attributeSetterBiConsumers.put(
			"show", (BiConsumer<Links, Boolean>)Links::setShow);
		attributeGetterFunctions.put("icon", Links::getIcon);
		attributeSetterBiConsumers.put(
			"icon", (BiConsumer<Links, Boolean>)Links::setIcon);
		attributeGetterFunctions.put("parentId", Links::getParentId);
		attributeSetterBiConsumers.put(
			"parentId", (BiConsumer<Links, Long>)Links::setParentId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLinksid() {
		return _linksid;
	}

	@Override
	public void setLinksid(long linksid) {
		_columnBitmask |= LINKSID_COLUMN_BITMASK;

		if (!_setOriginalLinksid) {
			_setOriginalLinksid = true;

			_originalLinksid = _linksid;
		}

		_linksid = linksid;
	}

	public long getOriginalLinksid() {
		return _originalLinksid;
	}

	@Override
	public long getGroupid() {
		return _groupid;
	}

	@Override
	public void setGroupid(long groupid) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupid) {
			_setOriginalGroupid = true;

			_originalGroupid = _groupid;
		}

		_groupid = groupid;
	}

	public long getOriginalGroupid() {
		return _originalGroupid;
	}

	@Override
	public Date getCreateddate() {
		return _createddate;
	}

	@Override
	public void setCreateddate(Date createddate) {
		_createddate = createddate;
	}

	@Override
	public Date getModifieddate() {
		return _modifieddate;
	}

	@Override
	public void setModifieddate(Date modifieddate) {
		_modifieddate = modifieddate;
	}

	@Override
	public long getLinksgroupid() {
		return _linksgroupid;
	}

	@Override
	public void setLinksgroupid(long linksgroupid) {
		_columnBitmask |= LINKSGROUPID_COLUMN_BITMASK;

		if (!_setOriginalLinksgroupid) {
			_setOriginalLinksgroupid = true;

			_originalLinksgroupid = _linksgroupid;
		}

		_linksgroupid = linksgroupid;
	}

	public long getOriginalLinksgroupid() {
		return _originalLinksgroupid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getDecription() {
		if (_decription == null) {
			return "";
		}
		else {
			return _decription;
		}
	}

	@Override
	public void setDecription(String decription) {
		_decription = decription;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public long getImageid() {
		return _imageid;
	}

	@Override
	public void setImageid(long imageid) {
		_imageid = imageid;
	}

	@Override
	public boolean getHasimage() {
		return _hasimage;
	}

	@Override
	public boolean isHasimage() {
		return _hasimage;
	}

	@Override
	public void setHasimage(boolean hasimage) {
		_hasimage = hasimage;
	}

	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_position = position;
	}

	@Override
	public boolean getShow() {
		return _show;
	}

	@Override
	public boolean isShow() {
		return _show;
	}

	@Override
	public void setShow(boolean show) {
		_show = show;
	}

	@Override
	public boolean getIcon() {
		return _icon;
	}

	@Override
	public boolean isIcon() {
		return _icon;
	}

	@Override
	public void setIcon(boolean icon) {
		_icon = icon;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Links.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Links toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Links>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LinksImpl linksImpl = new LinksImpl();

		linksImpl.setLinksid(getLinksid());
		linksImpl.setGroupid(getGroupid());
		linksImpl.setCreateddate(getCreateddate());
		linksImpl.setModifieddate(getModifieddate());
		linksImpl.setLinksgroupid(getLinksgroupid());
		linksImpl.setName(getName());
		linksImpl.setDecription(getDecription());
		linksImpl.setUrl(getUrl());
		linksImpl.setImageid(getImageid());
		linksImpl.setHasimage(isHasimage());
		linksImpl.setPosition(getPosition());
		linksImpl.setShow(isShow());
		linksImpl.setIcon(isIcon());
		linksImpl.setParentId(getParentId());

		linksImpl.resetOriginalValues();

		return linksImpl;
	}

	@Override
	public int compareTo(Links links) {
		int value = 0;

		value = getName().compareTo(links.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Links)) {
			return false;
		}

		Links links = (Links)obj;

		long primaryKey = links.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LinksModelImpl linksModelImpl = this;

		linksModelImpl._originalLinksid = linksModelImpl._linksid;

		linksModelImpl._setOriginalLinksid = false;

		linksModelImpl._originalGroupid = linksModelImpl._groupid;

		linksModelImpl._setOriginalGroupid = false;

		linksModelImpl._originalLinksgroupid = linksModelImpl._linksgroupid;

		linksModelImpl._setOriginalLinksgroupid = false;

		linksModelImpl._originalName = linksModelImpl._name;

		linksModelImpl._originalParentId = linksModelImpl._parentId;

		linksModelImpl._setOriginalParentId = false;

		linksModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Links> toCacheModel() {
		LinksCacheModel linksCacheModel = new LinksCacheModel();

		linksCacheModel.linksid = getLinksid();

		linksCacheModel.groupid = getGroupid();

		Date createddate = getCreateddate();

		if (createddate != null) {
			linksCacheModel.createddate = createddate.getTime();
		}
		else {
			linksCacheModel.createddate = Long.MIN_VALUE;
		}

		Date modifieddate = getModifieddate();

		if (modifieddate != null) {
			linksCacheModel.modifieddate = modifieddate.getTime();
		}
		else {
			linksCacheModel.modifieddate = Long.MIN_VALUE;
		}

		linksCacheModel.linksgroupid = getLinksgroupid();

		linksCacheModel.name = getName();

		String name = linksCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			linksCacheModel.name = null;
		}

		linksCacheModel.decription = getDecription();

		String decription = linksCacheModel.decription;

		if ((decription != null) && (decription.length() == 0)) {
			linksCacheModel.decription = null;
		}

		linksCacheModel.url = getUrl();

		String url = linksCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			linksCacheModel.url = null;
		}

		linksCacheModel.imageid = getImageid();

		linksCacheModel.hasimage = isHasimage();

		linksCacheModel.position = getPosition();

		linksCacheModel.show = isShow();

		linksCacheModel.icon = isIcon();

		linksCacheModel.parentId = getParentId();

		return linksCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Links, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Links, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Links, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Links)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Links, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Links, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Links, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Links)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Links>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _linksid;
	private long _originalLinksid;
	private boolean _setOriginalLinksid;
	private long _groupid;
	private long _originalGroupid;
	private boolean _setOriginalGroupid;
	private Date _createddate;
	private Date _modifieddate;
	private long _linksgroupid;
	private long _originalLinksgroupid;
	private boolean _setOriginalLinksgroupid;
	private String _name;
	private String _originalName;
	private String _decription;
	private String _url;
	private long _imageid;
	private boolean _hasimage;
	private int _position;
	private boolean _show;
	private boolean _icon;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private long _columnBitmask;
	private Links _escapedModel;

}