/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package User.Rank.Poisition.Service.service.base;

import User.Rank.Poisition.Service.model.UserChucDanh;
import User.Rank.Poisition.Service.service.UserChucDanhLocalService;
import User.Rank.Poisition.Service.service.persistence.UserChucDanhPersistence;
import User.Rank.Poisition.Service.service.persistence.UserPoisitionPersistence;
import User.Rank.Poisition.Service.service.persistence.UserPoisition_DangPersistence;
import User.Rank.Poisition.Service.service.persistence.UserRankPersistence;
import User.Rank.Poisition.Service.service.persistence.UserRankPositionPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the user chuc danh local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link User.Rank.Poisition.Service.service.impl.UserChucDanhLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see User.Rank.Poisition.Service.service.impl.UserChucDanhLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class UserChucDanhLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements UserChucDanhLocalService, AopService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>UserChucDanhLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>User.Rank.Poisition.Service.service.UserChucDanhLocalServiceUtil</code>.
	 */

	/**
	 * Adds the user chuc danh to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userChucDanh the user chuc danh
	 * @return the user chuc danh that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserChucDanh addUserChucDanh(UserChucDanh userChucDanh) {
		userChucDanh.setNew(true);

		return userChucDanhPersistence.update(userChucDanh);
	}

	/**
	 * Creates a new user chuc danh with the primary key. Does not add the user chuc danh to the database.
	 *
	 * @param userChucDanhId the primary key for the new user chuc danh
	 * @return the new user chuc danh
	 */
	@Override
	@Transactional(enabled = false)
	public UserChucDanh createUserChucDanh(long userChucDanhId) {
		return userChucDanhPersistence.create(userChucDanhId);
	}

	/**
	 * Deletes the user chuc danh with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userChucDanhId the primary key of the user chuc danh
	 * @return the user chuc danh that was removed
	 * @throws PortalException if a user chuc danh with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserChucDanh deleteUserChucDanh(long userChucDanhId)
		throws PortalException {

		return userChucDanhPersistence.remove(userChucDanhId);
	}

	/**
	 * Deletes the user chuc danh from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userChucDanh the user chuc danh
	 * @return the user chuc danh that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserChucDanh deleteUserChucDanh(UserChucDanh userChucDanh) {
		return userChucDanhPersistence.remove(userChucDanh);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			UserChucDanh.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userChucDanhPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserChucDanhModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return userChucDanhPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserChucDanhModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return userChucDanhPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userChucDanhPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return userChucDanhPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public UserChucDanh fetchUserChucDanh(long userChucDanhId) {
		return userChucDanhPersistence.fetchByPrimaryKey(userChucDanhId);
	}

	/**
	 * Returns the user chuc danh matching the UUID and group.
	 *
	 * @param uuid the user chuc danh's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user chuc danh, or <code>null</code> if a matching user chuc danh could not be found
	 */
	@Override
	public UserChucDanh fetchUserChucDanhByUuidAndGroupId(
		String uuid, long groupId) {

		return userChucDanhPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the user chuc danh with the primary key.
	 *
	 * @param userChucDanhId the primary key of the user chuc danh
	 * @return the user chuc danh
	 * @throws PortalException if a user chuc danh with the primary key could not be found
	 */
	@Override
	public UserChucDanh getUserChucDanh(long userChucDanhId)
		throws PortalException {

		return userChucDanhPersistence.findByPrimaryKey(userChucDanhId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(userChucDanhLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserChucDanh.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userChucDanhId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			userChucDanhLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(UserChucDanh.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"userChucDanhId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(userChucDanhLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserChucDanh.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userChucDanhId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<UserChucDanh>() {

				@Override
				public void performAction(UserChucDanh userChucDanh)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, userChucDanh);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(UserChucDanh.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return userChucDanhLocalService.deleteUserChucDanh(
			(UserChucDanh)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return userChucDanhPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the user chuc danhs matching the UUID and company.
	 *
	 * @param uuid the UUID of the user chuc danhs
	 * @param companyId the primary key of the company
	 * @return the matching user chuc danhs, or an empty list if no matches were found
	 */
	@Override
	public List<UserChucDanh> getUserChucDanhsByUuidAndCompanyId(
		String uuid, long companyId) {

		return userChucDanhPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of user chuc danhs matching the UUID and company.
	 *
	 * @param uuid the UUID of the user chuc danhs
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of user chuc danhs
	 * @param end the upper bound of the range of user chuc danhs (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching user chuc danhs, or an empty list if no matches were found
	 */
	@Override
	public List<UserChucDanh> getUserChucDanhsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<UserChucDanh> orderByComparator) {

		return userChucDanhPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the user chuc danh matching the UUID and group.
	 *
	 * @param uuid the user chuc danh's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user chuc danh
	 * @throws PortalException if a matching user chuc danh could not be found
	 */
	@Override
	public UserChucDanh getUserChucDanhByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return userChucDanhPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the user chuc danhs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserChucDanhModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user chuc danhs
	 * @param end the upper bound of the range of user chuc danhs (not inclusive)
	 * @return the range of user chuc danhs
	 */
	@Override
	public List<UserChucDanh> getUserChucDanhs(int start, int end) {
		return userChucDanhPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user chuc danhs.
	 *
	 * @return the number of user chuc danhs
	 */
	@Override
	public int getUserChucDanhsCount() {
		return userChucDanhPersistence.countAll();
	}

	/**
	 * Updates the user chuc danh in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userChucDanh the user chuc danh
	 * @return the user chuc danh that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserChucDanh updateUserChucDanh(UserChucDanh userChucDanh) {
		return userChucDanhPersistence.update(userChucDanh);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			UserChucDanhLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		userChucDanhLocalService = (UserChucDanhLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserChucDanhLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserChucDanh.class;
	}

	protected String getModelClassName() {
		return UserChucDanh.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userChucDanhPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	protected UserChucDanhLocalService userChucDanhLocalService;

	@Reference
	protected UserChucDanhPersistence userChucDanhPersistence;

	@Reference
	protected UserPoisitionPersistence userPoisitionPersistence;

	@Reference
	protected UserPoisition_DangPersistence userPoisition_DangPersistence;

	@Reference
	protected UserRankPersistence userRankPersistence;

	@Reference
	protected UserRankPositionPersistence userRankPositionPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}