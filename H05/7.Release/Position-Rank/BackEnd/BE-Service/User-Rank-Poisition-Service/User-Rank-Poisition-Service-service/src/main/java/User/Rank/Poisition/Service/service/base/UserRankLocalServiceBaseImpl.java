/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package User.Rank.Poisition.Service.service.base;

import User.Rank.Poisition.Service.model.UserRank;
import User.Rank.Poisition.Service.service.UserRankLocalService;
import User.Rank.Poisition.Service.service.persistence.UserChucDanhPersistence;
import User.Rank.Poisition.Service.service.persistence.UserPoisitionPersistence;
import User.Rank.Poisition.Service.service.persistence.UserPoisition_DangPersistence;
import User.Rank.Poisition.Service.service.persistence.UserRankPersistence;
import User.Rank.Poisition.Service.service.persistence.UserRankPositionPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the user rank local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link User.Rank.Poisition.Service.service.impl.UserRankLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see User.Rank.Poisition.Service.service.impl.UserRankLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class UserRankLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements UserRankLocalService, AopService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>UserRankLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>User.Rank.Poisition.Service.service.UserRankLocalServiceUtil</code>.
	 */

	/**
	 * Adds the user rank to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userRank the user rank
	 * @return the user rank that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserRank addUserRank(UserRank userRank) {
		userRank.setNew(true);

		return userRankPersistence.update(userRank);
	}

	/**
	 * Creates a new user rank with the primary key. Does not add the user rank to the database.
	 *
	 * @param userRankId the primary key for the new user rank
	 * @return the new user rank
	 */
	@Override
	@Transactional(enabled = false)
	public UserRank createUserRank(long userRankId) {
		return userRankPersistence.create(userRankId);
	}

	/**
	 * Deletes the user rank with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userRankId the primary key of the user rank
	 * @return the user rank that was removed
	 * @throws PortalException if a user rank with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserRank deleteUserRank(long userRankId) throws PortalException {
		return userRankPersistence.remove(userRankId);
	}

	/**
	 * Deletes the user rank from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userRank the user rank
	 * @return the user rank that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserRank deleteUserRank(UserRank userRank) {
		return userRankPersistence.remove(userRank);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			UserRank.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userRankPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserRankModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return userRankPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserRankModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return userRankPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userRankPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return userRankPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public UserRank fetchUserRank(long userRankId) {
		return userRankPersistence.fetchByPrimaryKey(userRankId);
	}

	/**
	 * Returns the user rank matching the UUID and group.
	 *
	 * @param uuid the user rank's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user rank, or <code>null</code> if a matching user rank could not be found
	 */
	@Override
	public UserRank fetchUserRankByUuidAndGroupId(String uuid, long groupId) {
		return userRankPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the user rank with the primary key.
	 *
	 * @param userRankId the primary key of the user rank
	 * @return the user rank
	 * @throws PortalException if a user rank with the primary key could not be found
	 */
	@Override
	public UserRank getUserRank(long userRankId) throws PortalException {
		return userRankPersistence.findByPrimaryKey(userRankId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(userRankLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserRank.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userRankId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			userRankLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(UserRank.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("userRankId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(userRankLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserRank.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userRankId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<UserRank>() {

				@Override
				public void performAction(UserRank userRank)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, userRank);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(UserRank.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return userRankLocalService.deleteUserRank((UserRank)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return userRankPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the user ranks matching the UUID and company.
	 *
	 * @param uuid the UUID of the user ranks
	 * @param companyId the primary key of the company
	 * @return the matching user ranks, or an empty list if no matches were found
	 */
	@Override
	public List<UserRank> getUserRanksByUuidAndCompanyId(
		String uuid, long companyId) {

		return userRankPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of user ranks matching the UUID and company.
	 *
	 * @param uuid the UUID of the user ranks
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of user ranks
	 * @param end the upper bound of the range of user ranks (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching user ranks, or an empty list if no matches were found
	 */
	@Override
	public List<UserRank> getUserRanksByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<UserRank> orderByComparator) {

		return userRankPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the user rank matching the UUID and group.
	 *
	 * @param uuid the user rank's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user rank
	 * @throws PortalException if a matching user rank could not be found
	 */
	@Override
	public UserRank getUserRankByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {

		return userRankPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the user ranks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>User.Rank.Poisition.Service.model.impl.UserRankModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user ranks
	 * @param end the upper bound of the range of user ranks (not inclusive)
	 * @return the range of user ranks
	 */
	@Override
	public List<UserRank> getUserRanks(int start, int end) {
		return userRankPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user ranks.
	 *
	 * @return the number of user ranks
	 */
	@Override
	public int getUserRanksCount() {
		return userRankPersistence.countAll();
	}

	/**
	 * Updates the user rank in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userRank the user rank
	 * @return the user rank that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserRank updateUserRank(UserRank userRank) {
		return userRankPersistence.update(userRank);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			UserRankLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		userRankLocalService = (UserRankLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserRankLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserRank.class;
	}

	protected String getModelClassName() {
		return UserRank.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userRankPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@Reference
	protected UserChucDanhPersistence userChucDanhPersistence;

	@Reference
	protected UserPoisitionPersistence userPoisitionPersistence;

	@Reference
	protected UserPoisition_DangPersistence userPoisition_DangPersistence;

	protected UserRankLocalService userRankLocalService;

	@Reference
	protected UserRankPersistence userRankPersistence;

	@Reference
	protected UserRankPositionPersistence userRankPositionPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}