/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.Logger;
import com.software.cms.model.LoggerModel;
import com.software.cms.model.LoggerSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Logger service. Represents a row in the &quot;soft_cms_Logger&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LoggerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoggerImpl}.
 * </p>
 *
 * @author DungNV
 * @see LoggerImpl
 * @generated
 */
@JSON(strict = true)
public class LoggerModelImpl
	extends BaseModelImpl<Logger> implements LoggerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a logger model instance should use the <code>Logger</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_Logger";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"loggerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"language", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"description", Types.VARCHAR}, {"type_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loggerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_Logger (uuid_ VARCHAR(75) null,loggerId LONG not null primary key,groupId LONG,language VARCHAR(75) null,userId LONG,createdDate DATE null,description STRING null,type_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table soft_cms_Logger";

	public static final String ORDER_BY_JPQL =
		" ORDER BY logger.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_Logger.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long LANGUAGE_COLUMN_BITMASK = 2L;

	public static final long TYPE_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Logger toModel(LoggerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Logger model = new LoggerImpl();

		model.setUuid(soapModel.getUuid());
		model.setLoggerId(soapModel.getLoggerId());
		model.setGroupId(soapModel.getGroupId());
		model.setLanguage(soapModel.getLanguage());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setDescription(soapModel.getDescription());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Logger> toModels(LoggerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Logger> models = new ArrayList<Logger>(soapModels.length);

		for (LoggerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LoggerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoggerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Logger.class;
	}

	@Override
	public String getModelClassName() {
		return Logger.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Logger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Logger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Logger, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Logger)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Logger, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Logger, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Logger)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Logger, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Logger, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Logger>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Logger.class.getClassLoader(), Logger.class, ModelWrapper.class);

		try {
			Constructor<Logger> constructor =
				(Constructor<Logger>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Logger, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Logger, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Logger, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Logger, Object>>();
		Map<String, BiConsumer<Logger, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Logger, ?>>();

		attributeGetterFunctions.put("uuid", Logger::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Logger, String>)Logger::setUuid);
		attributeGetterFunctions.put("loggerId", Logger::getLoggerId);
		attributeSetterBiConsumers.put(
			"loggerId", (BiConsumer<Logger, Long>)Logger::setLoggerId);
		attributeGetterFunctions.put("groupId", Logger::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Logger, Long>)Logger::setGroupId);
		attributeGetterFunctions.put("language", Logger::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<Logger, String>)Logger::setLanguage);
		attributeGetterFunctions.put("userId", Logger::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Logger, Long>)Logger::setUserId);
		attributeGetterFunctions.put("createdDate", Logger::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<Logger, Date>)Logger::setCreatedDate);
		attributeGetterFunctions.put("description", Logger::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Logger, String>)Logger::setDescription);
		attributeGetterFunctions.put("type", Logger::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Logger, String>)Logger::setType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getLoggerId() {
		return _loggerId;
	}

	@Override
	public void setLoggerId(long loggerId) {
		_loggerId = loggerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Logger.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Logger toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Logger>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoggerImpl loggerImpl = new LoggerImpl();

		loggerImpl.setUuid(getUuid());
		loggerImpl.setLoggerId(getLoggerId());
		loggerImpl.setGroupId(getGroupId());
		loggerImpl.setLanguage(getLanguage());
		loggerImpl.setUserId(getUserId());
		loggerImpl.setCreatedDate(getCreatedDate());
		loggerImpl.setDescription(getDescription());
		loggerImpl.setType(getType());

		loggerImpl.resetOriginalValues();

		return loggerImpl;
	}

	@Override
	public int compareTo(Logger logger) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(), logger.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Logger)) {
			return false;
		}

		Logger logger = (Logger)obj;

		long primaryKey = logger.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LoggerModelImpl loggerModelImpl = this;

		loggerModelImpl._originalUuid = loggerModelImpl._uuid;

		loggerModelImpl._originalGroupId = loggerModelImpl._groupId;

		loggerModelImpl._setOriginalGroupId = false;

		loggerModelImpl._originalLanguage = loggerModelImpl._language;

		loggerModelImpl._originalUserId = loggerModelImpl._userId;

		loggerModelImpl._setOriginalUserId = false;

		loggerModelImpl._originalType = loggerModelImpl._type;

		loggerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Logger> toCacheModel() {
		LoggerCacheModel loggerCacheModel = new LoggerCacheModel();

		loggerCacheModel.uuid = getUuid();

		String uuid = loggerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			loggerCacheModel.uuid = null;
		}

		loggerCacheModel.loggerId = getLoggerId();

		loggerCacheModel.groupId = getGroupId();

		loggerCacheModel.language = getLanguage();

		String language = loggerCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			loggerCacheModel.language = null;
		}

		loggerCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			loggerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			loggerCacheModel.createdDate = Long.MIN_VALUE;
		}

		loggerCacheModel.description = getDescription();

		String description = loggerCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			loggerCacheModel.description = null;
		}

		loggerCacheModel.type = getType();

		String type = loggerCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			loggerCacheModel.type = null;
		}

		return loggerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Logger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Logger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Logger, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Logger)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Logger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Logger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Logger, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Logger)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Logger>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _loggerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _language;
	private String _originalLanguage;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createdDate;
	private String _description;
	private String _type;
	private String _originalType;
	private long _columnBitmask;
	private Logger _escapedModel;

}