/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.GroupUser;
import com.software.cms.model.GroupUserModel;
import com.software.cms.model.GroupUserSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GroupUser service. Represents a row in the &quot;soft_cms_GroupUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GroupUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupUserImpl}.
 * </p>
 *
 * @author DungNV
 * @see GroupUserImpl
 * @generated
 */
@JSON(strict = true)
public class GroupUserModelImpl
	extends BaseModelImpl<GroupUser> implements GroupUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a group user model instance should use the <code>GroupUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_GroupUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"groupUserId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"language", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("groupUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_GroupUser (groupUserId LONG not null primary key,groupId LONG,language VARCHAR(75) null,name VARCHAR(75) null,description STRING null)";

	public static final String TABLE_SQL_DROP = "drop table soft_cms_GroupUser";

	public static final String ORDER_BY_JPQL = " ORDER BY groupUser.name DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_GroupUser.name DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long LANGUAGE_COLUMN_BITMASK = 2L;

	public static final long NAME_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GroupUser toModel(GroupUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GroupUser model = new GroupUserImpl();

		model.setGroupUserId(soapModel.getGroupUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setLanguage(soapModel.getLanguage());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GroupUser> toModels(GroupUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GroupUser> models = new ArrayList<GroupUser>(soapModels.length);

		for (GroupUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public GroupUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _groupUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGroupUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _groupUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GroupUser.class;
	}

	@Override
	public String getModelClassName() {
		return GroupUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GroupUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GroupUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((GroupUser)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GroupUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GroupUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GroupUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GroupUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GroupUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, GroupUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			GroupUser.class.getClassLoader(), GroupUser.class,
			ModelWrapper.class);

		try {
			Constructor<GroupUser> constructor =
				(Constructor<GroupUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<GroupUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GroupUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GroupUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GroupUser, Object>>();
		Map<String, BiConsumer<GroupUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GroupUser, ?>>();

		attributeGetterFunctions.put("groupUserId", GroupUser::getGroupUserId);
		attributeSetterBiConsumers.put(
			"groupUserId",
			(BiConsumer<GroupUser, Long>)GroupUser::setGroupUserId);
		attributeGetterFunctions.put("groupId", GroupUser::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<GroupUser, Long>)GroupUser::setGroupId);
		attributeGetterFunctions.put("language", GroupUser::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<GroupUser, String>)GroupUser::setLanguage);
		attributeGetterFunctions.put("name", GroupUser::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<GroupUser, String>)GroupUser::setName);
		attributeGetterFunctions.put("description", GroupUser::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<GroupUser, String>)GroupUser::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getGroupUserId() {
		return _groupUserId;
	}

	@Override
	public void setGroupUserId(long groupUserId) {
		_groupUserId = groupUserId;
	}

	@Override
	public String getGroupUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getGroupUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setGroupUserUuid(String groupUserUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GroupUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GroupUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GroupUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroupUserImpl groupUserImpl = new GroupUserImpl();

		groupUserImpl.setGroupUserId(getGroupUserId());
		groupUserImpl.setGroupId(getGroupId());
		groupUserImpl.setLanguage(getLanguage());
		groupUserImpl.setName(getName());
		groupUserImpl.setDescription(getDescription());

		groupUserImpl.resetOriginalValues();

		return groupUserImpl;
	}

	@Override
	public int compareTo(GroupUser groupUser) {
		int value = 0;

		value = getName().compareTo(groupUser.getName());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GroupUser)) {
			return false;
		}

		GroupUser groupUser = (GroupUser)obj;

		long primaryKey = groupUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		GroupUserModelImpl groupUserModelImpl = this;

		groupUserModelImpl._originalGroupId = groupUserModelImpl._groupId;

		groupUserModelImpl._setOriginalGroupId = false;

		groupUserModelImpl._originalLanguage = groupUserModelImpl._language;

		groupUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GroupUser> toCacheModel() {
		GroupUserCacheModel groupUserCacheModel = new GroupUserCacheModel();

		groupUserCacheModel.groupUserId = getGroupUserId();

		groupUserCacheModel.groupId = getGroupId();

		groupUserCacheModel.language = getLanguage();

		String language = groupUserCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			groupUserCacheModel.language = null;
		}

		groupUserCacheModel.name = getName();

		String name = groupUserCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			groupUserCacheModel.name = null;
		}

		groupUserCacheModel.description = getDescription();

		String description = groupUserCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			groupUserCacheModel.description = null;
		}

		return groupUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GroupUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GroupUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((GroupUser)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GroupUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GroupUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GroupUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GroupUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _groupUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _language;
	private String _originalLanguage;
	private String _name;
	private String _description;
	private long _columnBitmask;
	private GroupUser _escapedModel;

}