/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Album.service.model.impl;

import Album.service.model.Fields;
import Album.service.model.FieldsModel;
import Album.service.model.FieldsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Fields service. Represents a row in the &quot;portal_album_Fields&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>FieldsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FieldsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FieldsImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FieldsModelImpl
	extends BaseModelImpl<Fields> implements FieldsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fields model instance should use the <code>Fields</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_album_Fields";

	public static final Object[][] TABLE_COLUMNS = {
		{"fieldId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"createByUser", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedByUser", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"thuThu", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thuThu", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_album_Fields (fieldId LONG not null primary key,groupId LONG,createByUser LONG,createDate DATE null,modifiedByUser LONG,modifiedDate DATE null,name VARCHAR(1000) null,description VARCHAR(1000) null,thuThu INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table portal_album_Fields";

	public static final String ORDER_BY_JPQL = " ORDER BY fields.fieldId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY portal_album_Fields.fieldId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long FIELDID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Fields toModel(FieldsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Fields model = new FieldsImpl();

		model.setFieldId(soapModel.getFieldId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateByUser(soapModel.getCreateByUser());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setThuThu(soapModel.getThuThu());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Fields> toModels(FieldsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Fields> models = new ArrayList<Fields>(soapModels.length);

		for (FieldsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FieldsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fields.class;
	}

	@Override
	public String getModelClassName() {
		return Fields.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Fields, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Fields, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fields, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Fields)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Fields, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Fields, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Fields)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Fields, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Fields, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Fields>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Fields.class.getClassLoader(), Fields.class, ModelWrapper.class);

		try {
			Constructor<Fields> constructor =
				(Constructor<Fields>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Fields, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Fields, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Fields, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Fields, Object>>();
		Map<String, BiConsumer<Fields, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Fields, ?>>();

		attributeGetterFunctions.put("fieldId", Fields::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId", (BiConsumer<Fields, Long>)Fields::setFieldId);
		attributeGetterFunctions.put("groupId", Fields::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Fields, Long>)Fields::setGroupId);
		attributeGetterFunctions.put("createByUser", Fields::getCreateByUser);
		attributeSetterBiConsumers.put(
			"createByUser", (BiConsumer<Fields, Long>)Fields::setCreateByUser);
		attributeGetterFunctions.put("createDate", Fields::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Fields, Date>)Fields::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedByUser", Fields::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<Fields, Long>)Fields::setModifiedByUser);
		attributeGetterFunctions.put("modifiedDate", Fields::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Fields, Date>)Fields::setModifiedDate);
		attributeGetterFunctions.put("name", Fields::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Fields, String>)Fields::setName);
		attributeGetterFunctions.put("description", Fields::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Fields, String>)Fields::setDescription);
		attributeGetterFunctions.put("thuThu", Fields::getThuThu);
		attributeSetterBiConsumers.put(
			"thuThu", (BiConsumer<Fields, Integer>)Fields::setThuThu);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (!_setOriginalFieldId) {
			_setOriginalFieldId = true;

			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public long getOriginalFieldId() {
		return _originalFieldId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCreateByUser() {
		return _createByUser;
	}

	@Override
	public void setCreateByUser(long createByUser) {
		_createByUser = createByUser;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getThuThu() {
		return _thuThu;
	}

	@Override
	public void setThuThu(int thuThu) {
		_thuThu = thuThu;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Fields.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fields toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Fields>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FieldsImpl fieldsImpl = new FieldsImpl();

		fieldsImpl.setFieldId(getFieldId());
		fieldsImpl.setGroupId(getGroupId());
		fieldsImpl.setCreateByUser(getCreateByUser());
		fieldsImpl.setCreateDate(getCreateDate());
		fieldsImpl.setModifiedByUser(getModifiedByUser());
		fieldsImpl.setModifiedDate(getModifiedDate());
		fieldsImpl.setName(getName());
		fieldsImpl.setDescription(getDescription());
		fieldsImpl.setThuThu(getThuThu());

		fieldsImpl.resetOriginalValues();

		return fieldsImpl;
	}

	@Override
	public int compareTo(Fields fields) {
		long primaryKey = fields.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Fields)) {
			return false;
		}

		Fields fields = (Fields)obj;

		long primaryKey = fields.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		FieldsModelImpl fieldsModelImpl = this;

		fieldsModelImpl._originalFieldId = fieldsModelImpl._fieldId;

		fieldsModelImpl._setOriginalFieldId = false;

		fieldsModelImpl._originalGroupId = fieldsModelImpl._groupId;

		fieldsModelImpl._setOriginalGroupId = false;

		fieldsModelImpl._setModifiedDate = false;

		fieldsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Fields> toCacheModel() {
		FieldsCacheModel fieldsCacheModel = new FieldsCacheModel();

		fieldsCacheModel.fieldId = getFieldId();

		fieldsCacheModel.groupId = getGroupId();

		fieldsCacheModel.createByUser = getCreateByUser();

		Date createDate = getCreateDate();

		if (createDate != null) {
			fieldsCacheModel.createDate = createDate.getTime();
		}
		else {
			fieldsCacheModel.createDate = Long.MIN_VALUE;
		}

		fieldsCacheModel.modifiedByUser = getModifiedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fieldsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fieldsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fieldsCacheModel.name = getName();

		String name = fieldsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			fieldsCacheModel.name = null;
		}

		fieldsCacheModel.description = getDescription();

		String description = fieldsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			fieldsCacheModel.description = null;
		}

		fieldsCacheModel.thuThu = getThuThu();

		return fieldsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Fields, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Fields, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fields, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Fields)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Fields, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Fields, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fields, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Fields)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Fields>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _fieldId;
	private long _originalFieldId;
	private boolean _setOriginalFieldId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _createByUser;
	private Date _createDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private int _thuThu;
	private long _columnBitmask;
	private Fields _escapedModel;

}