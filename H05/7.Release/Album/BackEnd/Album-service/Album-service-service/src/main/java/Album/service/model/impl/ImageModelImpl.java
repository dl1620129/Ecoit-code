/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Album.service.model.impl;

import Album.service.model.Image;
import Album.service.model.ImageModel;
import Album.service.model.ImageSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Image service. Represents a row in the &quot;portal_album_Image&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ImageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImageImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ImageModelImpl extends BaseModelImpl<Image> implements ImageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a image model instance should use the <code>Image</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_album_Image";

	public static final Object[][] TABLE_COLUMNS = {
		{"imageId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"addByUser", Types.VARCHAR},
		{"addDate", Types.TIMESTAMP}, {"modifiedByUser", Types.VARCHAR},
		{"modifiedDate", Types.TIMESTAMP}, {"categoryId", Types.BIGINT},
		{"fieldId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"fileAttachId", Types.BIGINT},
		{"display", Types.BOOLEAN}, {"view", Types.BIGINT},
		{"isDaiDien", Types.BOOLEAN}, {"tacGia", Types.VARCHAR},
		{"thuTu", Types.INTEGER}, {"imageFileId", Types.BIGINT},
		{"folderId", Types.BIGINT}, {"imageUrl", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileAttachId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("display", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("view", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isDaiDien", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tacGia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thuTu", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("imageFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_album_Image (imageId LONG not null primary key,groupId LONG,companyId LONG,addByUser VARCHAR(75) null,addDate DATE null,modifiedByUser VARCHAR(75) null,modifiedDate DATE null,categoryId LONG,fieldId LONG,title VARCHAR(1000) null,description VARCHAR(1000) null,fileAttachId LONG,display BOOLEAN,view LONG,isDaiDien BOOLEAN,tacGia VARCHAR(75) null,thuTu INTEGER,imageFileId LONG,folderId LONG,imageUrl VARCHAR(1000) null)";

	public static final String TABLE_SQL_DROP = "drop table portal_album_Image";

	public static final String ORDER_BY_JPQL = " ORDER BY image.thuTu ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY portal_album_Image.thuTu ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long ISDAIDIEN_COLUMN_BITMASK = 8L;

	public static final long THUTU_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Image toModel(ImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Image model = new ImageImpl();

		model.setImageId(soapModel.getImageId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAddByUser(soapModel.getAddByUser());
		model.setAddDate(soapModel.getAddDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCategoryId(soapModel.getCategoryId());
		model.setFieldId(soapModel.getFieldId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setFileAttachId(soapModel.getFileAttachId());
		model.setDisplay(soapModel.isDisplay());
		model.setView(soapModel.getView());
		model.setIsDaiDien(soapModel.isIsDaiDien());
		model.setTacGia(soapModel.getTacGia());
		model.setThuTu(soapModel.getThuTu());
		model.setImageFileId(soapModel.getImageFileId());
		model.setFolderId(soapModel.getFolderId());
		model.setImageUrl(soapModel.getImageUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Image> toModels(ImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Image> models = new ArrayList<Image>(soapModels.length);

		for (ImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _imageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _imageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Image.class;
	}

	@Override
	public String getModelClassName() {
		return Image.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Image, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Image, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Image, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Image)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Image, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Image, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Image)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Image, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Image, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Image>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Image.class.getClassLoader(), Image.class, ModelWrapper.class);

		try {
			Constructor<Image> constructor =
				(Constructor<Image>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Image, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Image, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Image, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Image, Object>>();
		Map<String, BiConsumer<Image, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Image, ?>>();

		attributeGetterFunctions.put("imageId", Image::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<Image, Long>)Image::setImageId);
		attributeGetterFunctions.put("groupId", Image::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Image, Long>)Image::setGroupId);
		attributeGetterFunctions.put("companyId", Image::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Image, Long>)Image::setCompanyId);
		attributeGetterFunctions.put("addByUser", Image::getAddByUser);
		attributeSetterBiConsumers.put(
			"addByUser", (BiConsumer<Image, String>)Image::setAddByUser);
		attributeGetterFunctions.put("addDate", Image::getAddDate);
		attributeSetterBiConsumers.put(
			"addDate", (BiConsumer<Image, Date>)Image::setAddDate);
		attributeGetterFunctions.put(
			"modifiedByUser", Image::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<Image, String>)Image::setModifiedByUser);
		attributeGetterFunctions.put("modifiedDate", Image::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Image, Date>)Image::setModifiedDate);
		attributeGetterFunctions.put("categoryId", Image::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<Image, Long>)Image::setCategoryId);
		attributeGetterFunctions.put("fieldId", Image::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId", (BiConsumer<Image, Long>)Image::setFieldId);
		attributeGetterFunctions.put("title", Image::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Image, String>)Image::setTitle);
		attributeGetterFunctions.put("description", Image::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Image, String>)Image::setDescription);
		attributeGetterFunctions.put("fileAttachId", Image::getFileAttachId);
		attributeSetterBiConsumers.put(
			"fileAttachId", (BiConsumer<Image, Long>)Image::setFileAttachId);
		attributeGetterFunctions.put("display", Image::getDisplay);
		attributeSetterBiConsumers.put(
			"display", (BiConsumer<Image, Boolean>)Image::setDisplay);
		attributeGetterFunctions.put("view", Image::getView);
		attributeSetterBiConsumers.put(
			"view", (BiConsumer<Image, Long>)Image::setView);
		attributeGetterFunctions.put("isDaiDien", Image::getIsDaiDien);
		attributeSetterBiConsumers.put(
			"isDaiDien", (BiConsumer<Image, Boolean>)Image::setIsDaiDien);
		attributeGetterFunctions.put("tacGia", Image::getTacGia);
		attributeSetterBiConsumers.put(
			"tacGia", (BiConsumer<Image, String>)Image::setTacGia);
		attributeGetterFunctions.put("thuTu", Image::getThuTu);
		attributeSetterBiConsumers.put(
			"thuTu", (BiConsumer<Image, Integer>)Image::setThuTu);
		attributeGetterFunctions.put("imageFileId", Image::getImageFileId);
		attributeSetterBiConsumers.put(
			"imageFileId", (BiConsumer<Image, Long>)Image::setImageFileId);
		attributeGetterFunctions.put("folderId", Image::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Image, Long>)Image::setFolderId);
		attributeGetterFunctions.put("imageUrl", Image::getImageUrl);
		attributeSetterBiConsumers.put(
			"imageUrl", (BiConsumer<Image, String>)Image::setImageUrl);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getAddByUser() {
		if (_addByUser == null) {
			return "";
		}
		else {
			return _addByUser;
		}
	}

	@Override
	public void setAddByUser(String addByUser) {
		_addByUser = addByUser;
	}

	@JSON
	@Override
	public Date getAddDate() {
		return _addDate;
	}

	@Override
	public void setAddDate(Date addDate) {
		_addDate = addDate;
	}

	@JSON
	@Override
	public String getModifiedByUser() {
		if (_modifiedByUser == null) {
			return "";
		}
		else {
			return _modifiedByUser;
		}
	}

	@Override
	public void setModifiedByUser(String modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_fieldId = fieldId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getFileAttachId() {
		return _fileAttachId;
	}

	@Override
	public void setFileAttachId(long fileAttachId) {
		_fileAttachId = fileAttachId;
	}

	@JSON
	@Override
	public boolean getDisplay() {
		return _display;
	}

	@JSON
	@Override
	public boolean isDisplay() {
		return _display;
	}

	@Override
	public void setDisplay(boolean display) {
		_display = display;
	}

	@JSON
	@Override
	public long getView() {
		return _view;
	}

	@Override
	public void setView(long view) {
		_view = view;
	}

	@JSON
	@Override
	public boolean getIsDaiDien() {
		return _isDaiDien;
	}

	@JSON
	@Override
	public boolean isIsDaiDien() {
		return _isDaiDien;
	}

	@Override
	public void setIsDaiDien(boolean isDaiDien) {
		_columnBitmask |= ISDAIDIEN_COLUMN_BITMASK;

		if (!_setOriginalIsDaiDien) {
			_setOriginalIsDaiDien = true;

			_originalIsDaiDien = _isDaiDien;
		}

		_isDaiDien = isDaiDien;
	}

	public boolean getOriginalIsDaiDien() {
		return _originalIsDaiDien;
	}

	@JSON
	@Override
	public String getTacGia() {
		if (_tacGia == null) {
			return "";
		}
		else {
			return _tacGia;
		}
	}

	@Override
	public void setTacGia(String tacGia) {
		_tacGia = tacGia;
	}

	@JSON
	@Override
	public int getThuTu() {
		return _thuTu;
	}

	@Override
	public void setThuTu(int thuTu) {
		_columnBitmask = -1L;

		_thuTu = thuTu;
	}

	@JSON
	@Override
	public long getImageFileId() {
		return _imageFileId;
	}

	@Override
	public void setImageFileId(long imageFileId) {
		_imageFileId = imageFileId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return "";
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Image.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Image toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Image>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImageImpl imageImpl = new ImageImpl();

		imageImpl.setImageId(getImageId());
		imageImpl.setGroupId(getGroupId());
		imageImpl.setCompanyId(getCompanyId());
		imageImpl.setAddByUser(getAddByUser());
		imageImpl.setAddDate(getAddDate());
		imageImpl.setModifiedByUser(getModifiedByUser());
		imageImpl.setModifiedDate(getModifiedDate());
		imageImpl.setCategoryId(getCategoryId());
		imageImpl.setFieldId(getFieldId());
		imageImpl.setTitle(getTitle());
		imageImpl.setDescription(getDescription());
		imageImpl.setFileAttachId(getFileAttachId());
		imageImpl.setDisplay(isDisplay());
		imageImpl.setView(getView());
		imageImpl.setIsDaiDien(isIsDaiDien());
		imageImpl.setTacGia(getTacGia());
		imageImpl.setThuTu(getThuTu());
		imageImpl.setImageFileId(getImageFileId());
		imageImpl.setFolderId(getFolderId());
		imageImpl.setImageUrl(getImageUrl());

		imageImpl.resetOriginalValues();

		return imageImpl;
	}

	@Override
	public int compareTo(Image image) {
		int value = 0;

		if (getThuTu() < image.getThuTu()) {
			value = -1;
		}
		else if (getThuTu() > image.getThuTu()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Image)) {
			return false;
		}

		Image image = (Image)obj;

		long primaryKey = image.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ImageModelImpl imageModelImpl = this;

		imageModelImpl._originalGroupId = imageModelImpl._groupId;

		imageModelImpl._setOriginalGroupId = false;

		imageModelImpl._originalCompanyId = imageModelImpl._companyId;

		imageModelImpl._setOriginalCompanyId = false;

		imageModelImpl._originalCategoryId = imageModelImpl._categoryId;

		imageModelImpl._setOriginalCategoryId = false;

		imageModelImpl._originalIsDaiDien = imageModelImpl._isDaiDien;

		imageModelImpl._setOriginalIsDaiDien = false;

		imageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Image> toCacheModel() {
		ImageCacheModel imageCacheModel = new ImageCacheModel();

		imageCacheModel.imageId = getImageId();

		imageCacheModel.groupId = getGroupId();

		imageCacheModel.companyId = getCompanyId();

		imageCacheModel.addByUser = getAddByUser();

		String addByUser = imageCacheModel.addByUser;

		if ((addByUser != null) && (addByUser.length() == 0)) {
			imageCacheModel.addByUser = null;
		}

		Date addDate = getAddDate();

		if (addDate != null) {
			imageCacheModel.addDate = addDate.getTime();
		}
		else {
			imageCacheModel.addDate = Long.MIN_VALUE;
		}

		imageCacheModel.modifiedByUser = getModifiedByUser();

		String modifiedByUser = imageCacheModel.modifiedByUser;

		if ((modifiedByUser != null) && (modifiedByUser.length() == 0)) {
			imageCacheModel.modifiedByUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			imageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			imageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		imageCacheModel.categoryId = getCategoryId();

		imageCacheModel.fieldId = getFieldId();

		imageCacheModel.title = getTitle();

		String title = imageCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			imageCacheModel.title = null;
		}

		imageCacheModel.description = getDescription();

		String description = imageCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			imageCacheModel.description = null;
		}

		imageCacheModel.fileAttachId = getFileAttachId();

		imageCacheModel.display = isDisplay();

		imageCacheModel.view = getView();

		imageCacheModel.isDaiDien = isIsDaiDien();

		imageCacheModel.tacGia = getTacGia();

		String tacGia = imageCacheModel.tacGia;

		if ((tacGia != null) && (tacGia.length() == 0)) {
			imageCacheModel.tacGia = null;
		}

		imageCacheModel.thuTu = getThuTu();

		imageCacheModel.imageFileId = getImageFileId();

		imageCacheModel.folderId = getFolderId();

		imageCacheModel.imageUrl = getImageUrl();

		String imageUrl = imageCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			imageCacheModel.imageUrl = null;
		}

		return imageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Image, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Image, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Image, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Image)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Image, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Image, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Image, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Image)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Image>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _imageId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _addByUser;
	private Date _addDate;
	private String _modifiedByUser;
	private Date _modifiedDate;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _fieldId;
	private String _title;
	private String _description;
	private long _fileAttachId;
	private boolean _display;
	private long _view;
	private boolean _isDaiDien;
	private boolean _originalIsDaiDien;
	private boolean _setOriginalIsDaiDien;
	private String _tacGia;
	private int _thuTu;
	private long _imageFileId;
	private long _folderId;
	private String _imageUrl;
	private long _columnBitmask;
	private Image _escapedModel;

}