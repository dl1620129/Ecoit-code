/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Album.service.model.impl;

import Album.service.model.Category;
import Album.service.model.CategoryModel;
import Album.service.model.CategorySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Category service. Represents a row in the &quot;portal_album_Category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CategoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CategoryImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CategoryModelImpl
	extends BaseModelImpl<Category> implements CategoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a category model instance should use the <code>Category</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_album_Category";

	public static final Object[][] TABLE_COLUMNS = {
		{"categoryId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createByUser", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedByUser", Types.VARCHAR},
		{"modifiedDate", Types.TIMESTAMP}, {"view", Types.BIGINT},
		{"parentId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"tacGiaAlbum", Types.VARCHAR},
		{"fieldId", Types.BIGINT}, {"status", Types.BIGINT},
		{"thuTu", Types.INTEGER}, {"isDaiDien", Types.BOOLEAN},
		{"urlImage", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("view", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tacGiaAlbum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("thuTu", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isDaiDien", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("urlImage", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_album_Category (categoryId LONG not null primary key,groupId LONG,companyId LONG,createByUser VARCHAR(75) null,createDate DATE null,modifiedByUser VARCHAR(75) null,modifiedDate DATE null,view LONG,parentId LONG,name VARCHAR(1000) null,description VARCHAR(1000) null,tacGiaAlbum VARCHAR(75) null,fieldId LONG,status LONG,thuTu INTEGER,isDaiDien BOOLEAN,urlImage VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table portal_album_Category";

	public static final String ORDER_BY_JPQL = " ORDER BY category.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY portal_album_Category.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Category toModel(CategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Category model = new CategoryImpl();

		model.setCategoryId(soapModel.getCategoryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateByUser(soapModel.getCreateByUser());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setView(soapModel.getView());
		model.setParentId(soapModel.getParentId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setTacGiaAlbum(soapModel.getTacGiaAlbum());
		model.setFieldId(soapModel.getFieldId());
		model.setStatus(soapModel.getStatus());
		model.setThuTu(soapModel.getThuTu());
		model.setIsDaiDien(soapModel.isIsDaiDien());
		model.setUrlImage(soapModel.getUrlImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Category> toModels(CategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Category> models = new ArrayList<Category>(soapModels.length);

		for (CategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Category.class;
	}

	@Override
	public String getModelClassName() {
		return Category.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Category, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Category, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Category, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Category)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Category, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Category, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Category)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Category, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Category, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Category>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Category.class.getClassLoader(), Category.class,
			ModelWrapper.class);

		try {
			Constructor<Category> constructor =
				(Constructor<Category>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Category, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Category, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Category, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Category, Object>>();
		Map<String, BiConsumer<Category, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Category, ?>>();

		attributeGetterFunctions.put("categoryId", Category::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<Category, Long>)Category::setCategoryId);
		attributeGetterFunctions.put("groupId", Category::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Category, Long>)Category::setGroupId);
		attributeGetterFunctions.put("companyId", Category::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Category, Long>)Category::setCompanyId);
		attributeGetterFunctions.put("createByUser", Category::getCreateByUser);
		attributeSetterBiConsumers.put(
			"createByUser",
			(BiConsumer<Category, String>)Category::setCreateByUser);
		attributeGetterFunctions.put("createDate", Category::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Category, Date>)Category::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedByUser", Category::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<Category, String>)Category::setModifiedByUser);
		attributeGetterFunctions.put("modifiedDate", Category::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Category, Date>)Category::setModifiedDate);
		attributeGetterFunctions.put("view", Category::getView);
		attributeSetterBiConsumers.put(
			"view", (BiConsumer<Category, Long>)Category::setView);
		attributeGetterFunctions.put("parentId", Category::getParentId);
		attributeSetterBiConsumers.put(
			"parentId", (BiConsumer<Category, Long>)Category::setParentId);
		attributeGetterFunctions.put("name", Category::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Category, String>)Category::setName);
		attributeGetterFunctions.put("description", Category::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Category, String>)Category::setDescription);
		attributeGetterFunctions.put("tacGiaAlbum", Category::getTacGiaAlbum);
		attributeSetterBiConsumers.put(
			"tacGiaAlbum",
			(BiConsumer<Category, String>)Category::setTacGiaAlbum);
		attributeGetterFunctions.put("fieldId", Category::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId", (BiConsumer<Category, Long>)Category::setFieldId);
		attributeGetterFunctions.put("status", Category::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Category, Long>)Category::setStatus);
		attributeGetterFunctions.put("thuTu", Category::getThuTu);
		attributeSetterBiConsumers.put(
			"thuTu", (BiConsumer<Category, Integer>)Category::setThuTu);
		attributeGetterFunctions.put("isDaiDien", Category::getIsDaiDien);
		attributeSetterBiConsumers.put(
			"isDaiDien", (BiConsumer<Category, Boolean>)Category::setIsDaiDien);
		attributeGetterFunctions.put("urlImage", Category::getUrlImage);
		attributeSetterBiConsumers.put(
			"urlImage", (BiConsumer<Category, String>)Category::setUrlImage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getCreateByUser() {
		if (_createByUser == null) {
			return "";
		}
		else {
			return _createByUser;
		}
	}

	@Override
	public void setCreateByUser(String createByUser) {
		_createByUser = createByUser;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getModifiedByUser() {
		if (_modifiedByUser == null) {
			return "";
		}
		else {
			return _modifiedByUser;
		}
	}

	@Override
	public void setModifiedByUser(String modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getView() {
		return _view;
	}

	@Override
	public void setView(long view) {
		_view = view;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getTacGiaAlbum() {
		if (_tacGiaAlbum == null) {
			return "";
		}
		else {
			return _tacGiaAlbum;
		}
	}

	@Override
	public void setTacGiaAlbum(String tacGiaAlbum) {
		_tacGiaAlbum = tacGiaAlbum;
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_fieldId = fieldId;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public int getThuTu() {
		return _thuTu;
	}

	@Override
	public void setThuTu(int thuTu) {
		_thuTu = thuTu;
	}

	@JSON
	@Override
	public boolean getIsDaiDien() {
		return _isDaiDien;
	}

	@JSON
	@Override
	public boolean isIsDaiDien() {
		return _isDaiDien;
	}

	@Override
	public void setIsDaiDien(boolean isDaiDien) {
		_isDaiDien = isDaiDien;
	}

	@JSON
	@Override
	public String getUrlImage() {
		if (_urlImage == null) {
			return "";
		}
		else {
			return _urlImage;
		}
	}

	@Override
	public void setUrlImage(String urlImage) {
		_urlImage = urlImage;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Category.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Category toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Category>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CategoryImpl categoryImpl = new CategoryImpl();

		categoryImpl.setCategoryId(getCategoryId());
		categoryImpl.setGroupId(getGroupId());
		categoryImpl.setCompanyId(getCompanyId());
		categoryImpl.setCreateByUser(getCreateByUser());
		categoryImpl.setCreateDate(getCreateDate());
		categoryImpl.setModifiedByUser(getModifiedByUser());
		categoryImpl.setModifiedDate(getModifiedDate());
		categoryImpl.setView(getView());
		categoryImpl.setParentId(getParentId());
		categoryImpl.setName(getName());
		categoryImpl.setDescription(getDescription());
		categoryImpl.setTacGiaAlbum(getTacGiaAlbum());
		categoryImpl.setFieldId(getFieldId());
		categoryImpl.setStatus(getStatus());
		categoryImpl.setThuTu(getThuTu());
		categoryImpl.setIsDaiDien(isIsDaiDien());
		categoryImpl.setUrlImage(getUrlImage());

		categoryImpl.resetOriginalValues();

		return categoryImpl;
	}

	@Override
	public int compareTo(Category category) {
		int value = 0;

		value = getName().compareTo(category.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Category)) {
			return false;
		}

		Category category = (Category)obj;

		long primaryKey = category.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CategoryModelImpl categoryModelImpl = this;

		categoryModelImpl._originalGroupId = categoryModelImpl._groupId;

		categoryModelImpl._setOriginalGroupId = false;

		categoryModelImpl._originalCompanyId = categoryModelImpl._companyId;

		categoryModelImpl._setOriginalCompanyId = false;

		categoryModelImpl._setModifiedDate = false;

		categoryModelImpl._originalStatus = categoryModelImpl._status;

		categoryModelImpl._setOriginalStatus = false;

		categoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Category> toCacheModel() {
		CategoryCacheModel categoryCacheModel = new CategoryCacheModel();

		categoryCacheModel.categoryId = getCategoryId();

		categoryCacheModel.groupId = getGroupId();

		categoryCacheModel.companyId = getCompanyId();

		categoryCacheModel.createByUser = getCreateByUser();

		String createByUser = categoryCacheModel.createByUser;

		if ((createByUser != null) && (createByUser.length() == 0)) {
			categoryCacheModel.createByUser = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			categoryCacheModel.createDate = createDate.getTime();
		}
		else {
			categoryCacheModel.createDate = Long.MIN_VALUE;
		}

		categoryCacheModel.modifiedByUser = getModifiedByUser();

		String modifiedByUser = categoryCacheModel.modifiedByUser;

		if ((modifiedByUser != null) && (modifiedByUser.length() == 0)) {
			categoryCacheModel.modifiedByUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			categoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			categoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		categoryCacheModel.view = getView();

		categoryCacheModel.parentId = getParentId();

		categoryCacheModel.name = getName();

		String name = categoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			categoryCacheModel.name = null;
		}

		categoryCacheModel.description = getDescription();

		String description = categoryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			categoryCacheModel.description = null;
		}

		categoryCacheModel.tacGiaAlbum = getTacGiaAlbum();

		String tacGiaAlbum = categoryCacheModel.tacGiaAlbum;

		if ((tacGiaAlbum != null) && (tacGiaAlbum.length() == 0)) {
			categoryCacheModel.tacGiaAlbum = null;
		}

		categoryCacheModel.fieldId = getFieldId();

		categoryCacheModel.status = getStatus();

		categoryCacheModel.thuTu = getThuTu();

		categoryCacheModel.isDaiDien = isIsDaiDien();

		categoryCacheModel.urlImage = getUrlImage();

		String urlImage = categoryCacheModel.urlImage;

		if ((urlImage != null) && (urlImage.length() == 0)) {
			categoryCacheModel.urlImage = null;
		}

		return categoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Category, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Category, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Category, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Category)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Category, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Category, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Category, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Category)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Category>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _categoryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _createByUser;
	private Date _createDate;
	private String _modifiedByUser;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _view;
	private long _parentId;
	private String _name;
	private String _description;
	private String _tacGiaAlbum;
	private long _fieldId;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private int _thuTu;
	private boolean _isDaiDien;
	private String _urlImage;
	private long _columnBitmask;
	private Category _escapedModel;

}