/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalDraftDocument;
import com.ecoit.elegaldocument.model.LegalDraftDocumentModel;
import com.ecoit.elegaldocument.model.LegalDraftDocumentSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalDraftDocument service. Represents a row in the &quot;ecoit_doc_LegalDraftDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalDraftDocumentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalDraftDocumentImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalDraftDocumentImpl
 * @generated
 */
@JSON(strict = true)
public class LegalDraftDocumentModelImpl
	extends BaseModelImpl<LegalDraftDocument>
	implements LegalDraftDocumentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal draft document model instance should use the <code>LegalDraftDocument</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalDraftDocument";

	public static final Object[][] TABLE_COLUMNS = {
		{"draftId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdByUser", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"modifiedByUser", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP},
		{"approvedByUser", Types.BIGINT}, {"approvedDate", Types.TIMESTAMP},
		{"publishedByUser", Types.BIGINT}, {"publishedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"expiredDate", Types.TIMESTAMP},
		{"language", Types.VARCHAR}, {"content", Types.VARCHAR},
		{"typeId", Types.BIGINT}, {"fieldId", Types.BIGINT},
		{"draftLevel", Types.INTEGER}, {"docCode", Types.VARCHAR},
		{"statusDraft", Types.INTEGER}, {"email", Types.VARCHAR},
		{"destination", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("draftId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("draftLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("docCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDraft", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("destination", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalDraftDocument (draftId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,publishedByUser LONG,publishedDate DATE null,title VARCHAR(75) null,expiredDate DATE null,language VARCHAR(75) null,content VARCHAR(75) null,typeId LONG,fieldId LONG,draftLevel INTEGER,docCode VARCHAR(75) null,statusDraft INTEGER,email VARCHAR(75) null,destination VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalDraftDocument";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalDraftDocument.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalDraftDocument.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CREATEDBYUSER_COLUMN_BITMASK = 2L;

	public static final long DOCCODE_COLUMN_BITMASK = 4L;

	public static final long DRAFTID_COLUMN_BITMASK = 8L;

	public static final long FIELDID_COLUMN_BITMASK = 16L;

	public static final long GROUPID_COLUMN_BITMASK = 32L;

	public static final long LANGUAGE_COLUMN_BITMASK = 64L;

	public static final long STATUSDRAFT_COLUMN_BITMASK = 128L;

	public static final long TYPEID_COLUMN_BITMASK = 256L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 512L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalDraftDocument toModel(LegalDraftDocumentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalDraftDocument model = new LegalDraftDocumentImpl();

		model.setDraftId(soapModel.getDraftId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setPublishedByUser(soapModel.getPublishedByUser());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setTitle(soapModel.getTitle());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setLanguage(soapModel.getLanguage());
		model.setContent(soapModel.getContent());
		model.setTypeId(soapModel.getTypeId());
		model.setFieldId(soapModel.getFieldId());
		model.setDraftLevel(soapModel.getDraftLevel());
		model.setDocCode(soapModel.getDocCode());
		model.setStatusDraft(soapModel.getStatusDraft());
		model.setEmail(soapModel.getEmail());
		model.setDestination(soapModel.getDestination());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalDraftDocument> toModels(
		LegalDraftDocumentSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LegalDraftDocument> models = new ArrayList<LegalDraftDocument>(
			soapModels.length);

		for (LegalDraftDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalDraftDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _draftId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDraftId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _draftId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalDraftDocument.class;
	}

	@Override
	public String getModelClassName() {
		return LegalDraftDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalDraftDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalDraftDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDraftDocument, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LegalDraftDocument)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalDraftDocument, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalDraftDocument, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalDraftDocument)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalDraftDocument, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalDraftDocument, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalDraftDocument>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalDraftDocument.class.getClassLoader(), LegalDraftDocument.class,
			ModelWrapper.class);

		try {
			Constructor<LegalDraftDocument> constructor =
				(Constructor<LegalDraftDocument>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalDraftDocument, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalDraftDocument, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalDraftDocument, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<LegalDraftDocument, Object>>();
		Map<String, BiConsumer<LegalDraftDocument, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LegalDraftDocument, ?>>();

		attributeGetterFunctions.put("draftId", LegalDraftDocument::getDraftId);
		attributeSetterBiConsumers.put(
			"draftId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setDraftId);
		attributeGetterFunctions.put("groupId", LegalDraftDocument::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LegalDraftDocument::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setCompanyId);
		attributeGetterFunctions.put("userId", LegalDraftDocument::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setUserId);
		attributeGetterFunctions.put(
			"createdByUser", LegalDraftDocument::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setCreatedByUser);
		attributeGetterFunctions.put(
			"createdDate", LegalDraftDocument::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalDraftDocument, Date>)
				LegalDraftDocument::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedByUser", LegalDraftDocument::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setModifiedByUser);
		attributeGetterFunctions.put(
			"modifiedDate", LegalDraftDocument::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalDraftDocument, Date>)
				LegalDraftDocument::setModifiedDate);
		attributeGetterFunctions.put(
			"approvedByUser", LegalDraftDocument::getApprovedByUser);
		attributeSetterBiConsumers.put(
			"approvedByUser",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setApprovedByUser);
		attributeGetterFunctions.put(
			"approvedDate", LegalDraftDocument::getApprovedDate);
		attributeSetterBiConsumers.put(
			"approvedDate",
			(BiConsumer<LegalDraftDocument, Date>)
				LegalDraftDocument::setApprovedDate);
		attributeGetterFunctions.put(
			"publishedByUser", LegalDraftDocument::getPublishedByUser);
		attributeSetterBiConsumers.put(
			"publishedByUser",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setPublishedByUser);
		attributeGetterFunctions.put(
			"publishedDate", LegalDraftDocument::getPublishedDate);
		attributeSetterBiConsumers.put(
			"publishedDate",
			(BiConsumer<LegalDraftDocument, Date>)
				LegalDraftDocument::setPublishedDate);
		attributeGetterFunctions.put("title", LegalDraftDocument::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setTitle);
		attributeGetterFunctions.put(
			"expiredDate", LegalDraftDocument::getExpiredDate);
		attributeSetterBiConsumers.put(
			"expiredDate",
			(BiConsumer<LegalDraftDocument, Date>)
				LegalDraftDocument::setExpiredDate);
		attributeGetterFunctions.put(
			"language", LegalDraftDocument::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setLanguage);
		attributeGetterFunctions.put("content", LegalDraftDocument::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setContent);
		attributeGetterFunctions.put("typeId", LegalDraftDocument::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setTypeId);
		attributeGetterFunctions.put("fieldId", LegalDraftDocument::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId",
			(BiConsumer<LegalDraftDocument, Long>)
				LegalDraftDocument::setFieldId);
		attributeGetterFunctions.put(
			"draftLevel", LegalDraftDocument::getDraftLevel);
		attributeSetterBiConsumers.put(
			"draftLevel",
			(BiConsumer<LegalDraftDocument, Integer>)
				LegalDraftDocument::setDraftLevel);
		attributeGetterFunctions.put("docCode", LegalDraftDocument::getDocCode);
		attributeSetterBiConsumers.put(
			"docCode",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setDocCode);
		attributeGetterFunctions.put(
			"statusDraft", LegalDraftDocument::getStatusDraft);
		attributeSetterBiConsumers.put(
			"statusDraft",
			(BiConsumer<LegalDraftDocument, Integer>)
				LegalDraftDocument::setStatusDraft);
		attributeGetterFunctions.put("email", LegalDraftDocument::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setEmail);
		attributeGetterFunctions.put(
			"destination", LegalDraftDocument::getDestination);
		attributeSetterBiConsumers.put(
			"destination",
			(BiConsumer<LegalDraftDocument, String>)
				LegalDraftDocument::setDestination);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDraftId() {
		return _draftId;
	}

	@Override
	public void setDraftId(long draftId) {
		_columnBitmask |= DRAFTID_COLUMN_BITMASK;

		if (!_setOriginalDraftId) {
			_setOriginalDraftId = true;

			_originalDraftId = _draftId;
		}

		_draftId = draftId;
	}

	public long getOriginalDraftId() {
		return _originalDraftId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (!_setOriginalCreatedByUser) {
			_setOriginalCreatedByUser = true;

			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public long getOriginalCreatedByUser() {
		return _originalCreatedByUser;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public long getPublishedByUser() {
		return _publishedByUser;
	}

	@Override
	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@JSON
	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (!_setOriginalFieldId) {
			_setOriginalFieldId = true;

			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public long getOriginalFieldId() {
		return _originalFieldId;
	}

	@JSON
	@Override
	public int getDraftLevel() {
		return _draftLevel;
	}

	@Override
	public void setDraftLevel(int draftLevel) {
		_draftLevel = draftLevel;
	}

	@JSON
	@Override
	public String getDocCode() {
		if (_docCode == null) {
			return "";
		}
		else {
			return _docCode;
		}
	}

	@Override
	public void setDocCode(String docCode) {
		_columnBitmask |= DOCCODE_COLUMN_BITMASK;

		if (_originalDocCode == null) {
			_originalDocCode = _docCode;
		}

		_docCode = docCode;
	}

	public String getOriginalDocCode() {
		return GetterUtil.getString(_originalDocCode);
	}

	@JSON
	@Override
	public int getStatusDraft() {
		return _statusDraft;
	}

	@Override
	public void setStatusDraft(int statusDraft) {
		_columnBitmask |= STATUSDRAFT_COLUMN_BITMASK;

		if (!_setOriginalStatusDraft) {
			_setOriginalStatusDraft = true;

			_originalStatusDraft = _statusDraft;
		}

		_statusDraft = statusDraft;
	}

	public int getOriginalStatusDraft() {
		return _originalStatusDraft;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getDestination() {
		if (_destination == null) {
			return "";
		}
		else {
			return _destination;
		}
	}

	@Override
	public void setDestination(String destination) {
		_destination = destination;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalDraftDocument.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalDraftDocument toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalDraftDocument>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalDraftDocumentImpl legalDraftDocumentImpl =
			new LegalDraftDocumentImpl();

		legalDraftDocumentImpl.setDraftId(getDraftId());
		legalDraftDocumentImpl.setGroupId(getGroupId());
		legalDraftDocumentImpl.setCompanyId(getCompanyId());
		legalDraftDocumentImpl.setUserId(getUserId());
		legalDraftDocumentImpl.setCreatedByUser(getCreatedByUser());
		legalDraftDocumentImpl.setCreatedDate(getCreatedDate());
		legalDraftDocumentImpl.setModifiedByUser(getModifiedByUser());
		legalDraftDocumentImpl.setModifiedDate(getModifiedDate());
		legalDraftDocumentImpl.setApprovedByUser(getApprovedByUser());
		legalDraftDocumentImpl.setApprovedDate(getApprovedDate());
		legalDraftDocumentImpl.setPublishedByUser(getPublishedByUser());
		legalDraftDocumentImpl.setPublishedDate(getPublishedDate());
		legalDraftDocumentImpl.setTitle(getTitle());
		legalDraftDocumentImpl.setExpiredDate(getExpiredDate());
		legalDraftDocumentImpl.setLanguage(getLanguage());
		legalDraftDocumentImpl.setContent(getContent());
		legalDraftDocumentImpl.setTypeId(getTypeId());
		legalDraftDocumentImpl.setFieldId(getFieldId());
		legalDraftDocumentImpl.setDraftLevel(getDraftLevel());
		legalDraftDocumentImpl.setDocCode(getDocCode());
		legalDraftDocumentImpl.setStatusDraft(getStatusDraft());
		legalDraftDocumentImpl.setEmail(getEmail());
		legalDraftDocumentImpl.setDestination(getDestination());

		legalDraftDocumentImpl.resetOriginalValues();

		return legalDraftDocumentImpl;
	}

	@Override
	public int compareTo(LegalDraftDocument legalDraftDocument) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreatedDate(), legalDraftDocument.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalDraftDocument)) {
			return false;
		}

		LegalDraftDocument legalDraftDocument = (LegalDraftDocument)obj;

		long primaryKey = legalDraftDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalDraftDocumentModelImpl legalDraftDocumentModelImpl = this;

		legalDraftDocumentModelImpl._originalDraftId =
			legalDraftDocumentModelImpl._draftId;

		legalDraftDocumentModelImpl._setOriginalDraftId = false;

		legalDraftDocumentModelImpl._originalGroupId =
			legalDraftDocumentModelImpl._groupId;

		legalDraftDocumentModelImpl._setOriginalGroupId = false;

		legalDraftDocumentModelImpl._originalCompanyId =
			legalDraftDocumentModelImpl._companyId;

		legalDraftDocumentModelImpl._setOriginalCompanyId = false;

		legalDraftDocumentModelImpl._originalCreatedByUser =
			legalDraftDocumentModelImpl._createdByUser;

		legalDraftDocumentModelImpl._setOriginalCreatedByUser = false;

		legalDraftDocumentModelImpl._originalLanguage =
			legalDraftDocumentModelImpl._language;

		legalDraftDocumentModelImpl._originalTypeId =
			legalDraftDocumentModelImpl._typeId;

		legalDraftDocumentModelImpl._setOriginalTypeId = false;

		legalDraftDocumentModelImpl._originalFieldId =
			legalDraftDocumentModelImpl._fieldId;

		legalDraftDocumentModelImpl._setOriginalFieldId = false;

		legalDraftDocumentModelImpl._originalDocCode =
			legalDraftDocumentModelImpl._docCode;

		legalDraftDocumentModelImpl._originalStatusDraft =
			legalDraftDocumentModelImpl._statusDraft;

		legalDraftDocumentModelImpl._setOriginalStatusDraft = false;

		legalDraftDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalDraftDocument> toCacheModel() {
		LegalDraftDocumentCacheModel legalDraftDocumentCacheModel =
			new LegalDraftDocumentCacheModel();

		legalDraftDocumentCacheModel.draftId = getDraftId();

		legalDraftDocumentCacheModel.groupId = getGroupId();

		legalDraftDocumentCacheModel.companyId = getCompanyId();

		legalDraftDocumentCacheModel.userId = getUserId();

		legalDraftDocumentCacheModel.createdByUser = getCreatedByUser();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalDraftDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalDraftDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		legalDraftDocumentCacheModel.modifiedByUser = getModifiedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalDraftDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legalDraftDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalDraftDocumentCacheModel.approvedByUser = getApprovedByUser();

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			legalDraftDocumentCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			legalDraftDocumentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		legalDraftDocumentCacheModel.publishedByUser = getPublishedByUser();

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			legalDraftDocumentCacheModel.publishedDate =
				publishedDate.getTime();
		}
		else {
			legalDraftDocumentCacheModel.publishedDate = Long.MIN_VALUE;
		}

		legalDraftDocumentCacheModel.title = getTitle();

		String title = legalDraftDocumentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			legalDraftDocumentCacheModel.title = null;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			legalDraftDocumentCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			legalDraftDocumentCacheModel.expiredDate = Long.MIN_VALUE;
		}

		legalDraftDocumentCacheModel.language = getLanguage();

		String language = legalDraftDocumentCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalDraftDocumentCacheModel.language = null;
		}

		legalDraftDocumentCacheModel.content = getContent();

		String content = legalDraftDocumentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			legalDraftDocumentCacheModel.content = null;
		}

		legalDraftDocumentCacheModel.typeId = getTypeId();

		legalDraftDocumentCacheModel.fieldId = getFieldId();

		legalDraftDocumentCacheModel.draftLevel = getDraftLevel();

		legalDraftDocumentCacheModel.docCode = getDocCode();

		String docCode = legalDraftDocumentCacheModel.docCode;

		if ((docCode != null) && (docCode.length() == 0)) {
			legalDraftDocumentCacheModel.docCode = null;
		}

		legalDraftDocumentCacheModel.statusDraft = getStatusDraft();

		legalDraftDocumentCacheModel.email = getEmail();

		String email = legalDraftDocumentCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			legalDraftDocumentCacheModel.email = null;
		}

		legalDraftDocumentCacheModel.destination = getDestination();

		String destination = legalDraftDocumentCacheModel.destination;

		if ((destination != null) && (destination.length() == 0)) {
			legalDraftDocumentCacheModel.destination = null;
		}

		return legalDraftDocumentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalDraftDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalDraftDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDraftDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalDraftDocument)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalDraftDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalDraftDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalDraftDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalDraftDocument)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalDraftDocument>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _draftId;
	private long _originalDraftId;
	private boolean _setOriginalDraftId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _createdByUser;
	private long _originalCreatedByUser;
	private boolean _setOriginalCreatedByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private String _title;
	private Date _expiredDate;
	private String _language;
	private String _originalLanguage;
	private String _content;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _fieldId;
	private long _originalFieldId;
	private boolean _setOriginalFieldId;
	private int _draftLevel;
	private String _docCode;
	private String _originalDocCode;
	private int _statusDraft;
	private int _originalStatusDraft;
	private boolean _setOriginalStatusDraft;
	private String _email;
	private String _destination;
	private long _columnBitmask;
	private LegalDraftDocument _escapedModel;

}