/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalSuggestDocument;
import com.ecoit.elegaldocument.model.LegalSuggestDocumentModel;
import com.ecoit.elegaldocument.model.LegalSuggestDocumentSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalSuggestDocument service. Represents a row in the &quot;ecoit_doc_LegalSuggestDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalSuggestDocumentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalSuggestDocumentImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalSuggestDocumentImpl
 * @generated
 */
@JSON(strict = true)
public class LegalSuggestDocumentModelImpl
	extends BaseModelImpl<LegalSuggestDocument>
	implements LegalSuggestDocumentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal suggest document model instance should use the <code>LegalSuggestDocument</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalSuggestDocument";

	public static final Object[][] TABLE_COLUMNS = {
		{"sugId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"modifiedByUser", Types.BIGINT}, {"approved", Types.BOOLEAN},
		{"approvedByUser", Types.BIGINT}, {"approvedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"content", Types.VARCHAR},
		{"language", Types.VARCHAR}, {"visitorName", Types.VARCHAR},
		{"visitorEmail", Types.VARCHAR}, {"visitorTel", Types.VARCHAR},
		{"visitorAddress", Types.VARCHAR}, {"docId", Types.BIGINT},
		{"hasAttachment", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sugId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visitorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visitorEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visitorTel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visitorAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hasAttachment", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalSuggestDocument (sugId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,modifiedByUser LONG,approved BOOLEAN,approvedByUser LONG,approvedDate DATE null,title VARCHAR(250) null,content VARCHAR(550) null,language VARCHAR(75) null,visitorName VARCHAR(250) null,visitorEmail VARCHAR(100) null,visitorTel VARCHAR(75) null,visitorAddress VARCHAR(75) null,docId LONG,hasAttachment BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalSuggestDocument";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalSuggestDocument.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalSuggestDocument.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long APPROVED_COLUMN_BITMASK = 1L;

	public static final long DOCID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long LANGUAGE_COLUMN_BITMASK = 8L;

	public static final long SUGID_COLUMN_BITMASK = 16L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalSuggestDocument toModel(
		LegalSuggestDocumentSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		LegalSuggestDocument model = new LegalSuggestDocumentImpl();

		model.setSugId(soapModel.getSugId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setApproved(soapModel.isApproved());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setLanguage(soapModel.getLanguage());
		model.setVisitorName(soapModel.getVisitorName());
		model.setVisitorEmail(soapModel.getVisitorEmail());
		model.setVisitorTel(soapModel.getVisitorTel());
		model.setVisitorAddress(soapModel.getVisitorAddress());
		model.setDocId(soapModel.getDocId());
		model.setHasAttachment(soapModel.isHasAttachment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalSuggestDocument> toModels(
		LegalSuggestDocumentSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LegalSuggestDocument> models = new ArrayList<LegalSuggestDocument>(
			soapModels.length);

		for (LegalSuggestDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalSuggestDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sugId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSugId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sugId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalSuggestDocument.class;
	}

	@Override
	public String getModelClassName() {
		return LegalSuggestDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalSuggestDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalSuggestDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalSuggestDocument, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LegalSuggestDocument)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalSuggestDocument, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalSuggestDocument, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalSuggestDocument)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalSuggestDocument, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalSuggestDocument, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalSuggestDocument>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalSuggestDocument.class.getClassLoader(),
			LegalSuggestDocument.class, ModelWrapper.class);

		try {
			Constructor<LegalSuggestDocument> constructor =
				(Constructor<LegalSuggestDocument>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalSuggestDocument, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalSuggestDocument, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalSuggestDocument, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<LegalSuggestDocument, Object>>();
		Map<String, BiConsumer<LegalSuggestDocument, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<LegalSuggestDocument, ?>>();

		attributeGetterFunctions.put("sugId", LegalSuggestDocument::getSugId);
		attributeSetterBiConsumers.put(
			"sugId",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setSugId);
		attributeGetterFunctions.put(
			"groupId", LegalSuggestDocument::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LegalSuggestDocument::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setCompanyId);
		attributeGetterFunctions.put("userId", LegalSuggestDocument::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setUserId);
		attributeGetterFunctions.put(
			"createdDate", LegalSuggestDocument::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalSuggestDocument, Date>)
				LegalSuggestDocument::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", LegalSuggestDocument::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalSuggestDocument, Date>)
				LegalSuggestDocument::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedByUser", LegalSuggestDocument::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setModifiedByUser);
		attributeGetterFunctions.put(
			"approved", LegalSuggestDocument::getApproved);
		attributeSetterBiConsumers.put(
			"approved",
			(BiConsumer<LegalSuggestDocument, Boolean>)
				LegalSuggestDocument::setApproved);
		attributeGetterFunctions.put(
			"approvedByUser", LegalSuggestDocument::getApprovedByUser);
		attributeSetterBiConsumers.put(
			"approvedByUser",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setApprovedByUser);
		attributeGetterFunctions.put(
			"approvedDate", LegalSuggestDocument::getApprovedDate);
		attributeSetterBiConsumers.put(
			"approvedDate",
			(BiConsumer<LegalSuggestDocument, Date>)
				LegalSuggestDocument::setApprovedDate);
		attributeGetterFunctions.put("title", LegalSuggestDocument::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setTitle);
		attributeGetterFunctions.put(
			"content", LegalSuggestDocument::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setContent);
		attributeGetterFunctions.put(
			"language", LegalSuggestDocument::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setLanguage);
		attributeGetterFunctions.put(
			"visitorName", LegalSuggestDocument::getVisitorName);
		attributeSetterBiConsumers.put(
			"visitorName",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setVisitorName);
		attributeGetterFunctions.put(
			"visitorEmail", LegalSuggestDocument::getVisitorEmail);
		attributeSetterBiConsumers.put(
			"visitorEmail",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setVisitorEmail);
		attributeGetterFunctions.put(
			"visitorTel", LegalSuggestDocument::getVisitorTel);
		attributeSetterBiConsumers.put(
			"visitorTel",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setVisitorTel);
		attributeGetterFunctions.put(
			"visitorAddress", LegalSuggestDocument::getVisitorAddress);
		attributeSetterBiConsumers.put(
			"visitorAddress",
			(BiConsumer<LegalSuggestDocument, String>)
				LegalSuggestDocument::setVisitorAddress);
		attributeGetterFunctions.put("docId", LegalSuggestDocument::getDocId);
		attributeSetterBiConsumers.put(
			"docId",
			(BiConsumer<LegalSuggestDocument, Long>)
				LegalSuggestDocument::setDocId);
		attributeGetterFunctions.put(
			"hasAttachment", LegalSuggestDocument::getHasAttachment);
		attributeSetterBiConsumers.put(
			"hasAttachment",
			(BiConsumer<LegalSuggestDocument, Boolean>)
				LegalSuggestDocument::setHasAttachment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSugId() {
		return _sugId;
	}

	@Override
	public void setSugId(long sugId) {
		_columnBitmask |= SUGID_COLUMN_BITMASK;

		if (!_setOriginalSugId) {
			_setOriginalSugId = true;

			_originalSugId = _sugId;
		}

		_sugId = sugId;
	}

	public long getOriginalSugId() {
		return _originalSugId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public boolean getApproved() {
		return _approved;
	}

	@JSON
	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		_columnBitmask |= APPROVED_COLUMN_BITMASK;

		if (!_setOriginalApproved) {
			_setOriginalApproved = true;

			_originalApproved = _approved;
		}

		_approved = approved;
	}

	public boolean getOriginalApproved() {
		return _originalApproved;
	}

	@JSON
	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public String getVisitorName() {
		if (_visitorName == null) {
			return "";
		}
		else {
			return _visitorName;
		}
	}

	@Override
	public void setVisitorName(String visitorName) {
		_visitorName = visitorName;
	}

	@JSON
	@Override
	public String getVisitorEmail() {
		if (_visitorEmail == null) {
			return "";
		}
		else {
			return _visitorEmail;
		}
	}

	@Override
	public void setVisitorEmail(String visitorEmail) {
		_visitorEmail = visitorEmail;
	}

	@JSON
	@Override
	public String getVisitorTel() {
		if (_visitorTel == null) {
			return "";
		}
		else {
			return _visitorTel;
		}
	}

	@Override
	public void setVisitorTel(String visitorTel) {
		_visitorTel = visitorTel;
	}

	@JSON
	@Override
	public String getVisitorAddress() {
		if (_visitorAddress == null) {
			return "";
		}
		else {
			return _visitorAddress;
		}
	}

	@Override
	public void setVisitorAddress(String visitorAddress) {
		_visitorAddress = visitorAddress;
	}

	@JSON
	@Override
	public long getDocId() {
		return _docId;
	}

	@Override
	public void setDocId(long docId) {
		_columnBitmask |= DOCID_COLUMN_BITMASK;

		if (!_setOriginalDocId) {
			_setOriginalDocId = true;

			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public long getOriginalDocId() {
		return _originalDocId;
	}

	@JSON
	@Override
	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	@JSON
	@Override
	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalSuggestDocument.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalSuggestDocument toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalSuggestDocument>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalSuggestDocumentImpl legalSuggestDocumentImpl =
			new LegalSuggestDocumentImpl();

		legalSuggestDocumentImpl.setSugId(getSugId());
		legalSuggestDocumentImpl.setGroupId(getGroupId());
		legalSuggestDocumentImpl.setCompanyId(getCompanyId());
		legalSuggestDocumentImpl.setUserId(getUserId());
		legalSuggestDocumentImpl.setCreatedDate(getCreatedDate());
		legalSuggestDocumentImpl.setModifiedDate(getModifiedDate());
		legalSuggestDocumentImpl.setModifiedByUser(getModifiedByUser());
		legalSuggestDocumentImpl.setApproved(isApproved());
		legalSuggestDocumentImpl.setApprovedByUser(getApprovedByUser());
		legalSuggestDocumentImpl.setApprovedDate(getApprovedDate());
		legalSuggestDocumentImpl.setTitle(getTitle());
		legalSuggestDocumentImpl.setContent(getContent());
		legalSuggestDocumentImpl.setLanguage(getLanguage());
		legalSuggestDocumentImpl.setVisitorName(getVisitorName());
		legalSuggestDocumentImpl.setVisitorEmail(getVisitorEmail());
		legalSuggestDocumentImpl.setVisitorTel(getVisitorTel());
		legalSuggestDocumentImpl.setVisitorAddress(getVisitorAddress());
		legalSuggestDocumentImpl.setDocId(getDocId());
		legalSuggestDocumentImpl.setHasAttachment(isHasAttachment());

		legalSuggestDocumentImpl.resetOriginalValues();

		return legalSuggestDocumentImpl;
	}

	@Override
	public int compareTo(LegalSuggestDocument legalSuggestDocument) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreatedDate(), legalSuggestDocument.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalSuggestDocument)) {
			return false;
		}

		LegalSuggestDocument legalSuggestDocument = (LegalSuggestDocument)obj;

		long primaryKey = legalSuggestDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalSuggestDocumentModelImpl legalSuggestDocumentModelImpl = this;

		legalSuggestDocumentModelImpl._originalSugId =
			legalSuggestDocumentModelImpl._sugId;

		legalSuggestDocumentModelImpl._setOriginalSugId = false;

		legalSuggestDocumentModelImpl._originalGroupId =
			legalSuggestDocumentModelImpl._groupId;

		legalSuggestDocumentModelImpl._setOriginalGroupId = false;

		legalSuggestDocumentModelImpl._originalApproved =
			legalSuggestDocumentModelImpl._approved;

		legalSuggestDocumentModelImpl._setOriginalApproved = false;

		legalSuggestDocumentModelImpl._originalLanguage =
			legalSuggestDocumentModelImpl._language;

		legalSuggestDocumentModelImpl._originalDocId =
			legalSuggestDocumentModelImpl._docId;

		legalSuggestDocumentModelImpl._setOriginalDocId = false;

		legalSuggestDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalSuggestDocument> toCacheModel() {
		LegalSuggestDocumentCacheModel legalSuggestDocumentCacheModel =
			new LegalSuggestDocumentCacheModel();

		legalSuggestDocumentCacheModel.sugId = getSugId();

		legalSuggestDocumentCacheModel.groupId = getGroupId();

		legalSuggestDocumentCacheModel.companyId = getCompanyId();

		legalSuggestDocumentCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalSuggestDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalSuggestDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalSuggestDocumentCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			legalSuggestDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalSuggestDocumentCacheModel.modifiedByUser = getModifiedByUser();

		legalSuggestDocumentCacheModel.approved = isApproved();

		legalSuggestDocumentCacheModel.approvedByUser = getApprovedByUser();

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			legalSuggestDocumentCacheModel.approvedDate =
				approvedDate.getTime();
		}
		else {
			legalSuggestDocumentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		legalSuggestDocumentCacheModel.title = getTitle();

		String title = legalSuggestDocumentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			legalSuggestDocumentCacheModel.title = null;
		}

		legalSuggestDocumentCacheModel.content = getContent();

		String content = legalSuggestDocumentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			legalSuggestDocumentCacheModel.content = null;
		}

		legalSuggestDocumentCacheModel.language = getLanguage();

		String language = legalSuggestDocumentCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalSuggestDocumentCacheModel.language = null;
		}

		legalSuggestDocumentCacheModel.visitorName = getVisitorName();

		String visitorName = legalSuggestDocumentCacheModel.visitorName;

		if ((visitorName != null) && (visitorName.length() == 0)) {
			legalSuggestDocumentCacheModel.visitorName = null;
		}

		legalSuggestDocumentCacheModel.visitorEmail = getVisitorEmail();

		String visitorEmail = legalSuggestDocumentCacheModel.visitorEmail;

		if ((visitorEmail != null) && (visitorEmail.length() == 0)) {
			legalSuggestDocumentCacheModel.visitorEmail = null;
		}

		legalSuggestDocumentCacheModel.visitorTel = getVisitorTel();

		String visitorTel = legalSuggestDocumentCacheModel.visitorTel;

		if ((visitorTel != null) && (visitorTel.length() == 0)) {
			legalSuggestDocumentCacheModel.visitorTel = null;
		}

		legalSuggestDocumentCacheModel.visitorAddress = getVisitorAddress();

		String visitorAddress = legalSuggestDocumentCacheModel.visitorAddress;

		if ((visitorAddress != null) && (visitorAddress.length() == 0)) {
			legalSuggestDocumentCacheModel.visitorAddress = null;
		}

		legalSuggestDocumentCacheModel.docId = getDocId();

		legalSuggestDocumentCacheModel.hasAttachment = isHasAttachment();

		return legalSuggestDocumentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalSuggestDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalSuggestDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalSuggestDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((LegalSuggestDocument)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalSuggestDocument, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalSuggestDocument, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalSuggestDocument, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((LegalSuggestDocument)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalSuggestDocument>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _sugId;
	private long _originalSugId;
	private boolean _setOriginalSugId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _modifiedByUser;
	private boolean _approved;
	private boolean _originalApproved;
	private boolean _setOriginalApproved;
	private long _approvedByUser;
	private Date _approvedDate;
	private String _title;
	private String _content;
	private String _language;
	private String _originalLanguage;
	private String _visitorName;
	private String _visitorEmail;
	private String _visitorTel;
	private String _visitorAddress;
	private long _docId;
	private long _originalDocId;
	private boolean _setOriginalDocId;
	private boolean _hasAttachment;
	private long _columnBitmask;
	private LegalSuggestDocument _escapedModel;

}