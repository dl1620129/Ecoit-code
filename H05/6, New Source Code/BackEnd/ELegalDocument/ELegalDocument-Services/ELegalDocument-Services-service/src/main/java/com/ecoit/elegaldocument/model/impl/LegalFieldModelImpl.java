/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.elegaldocument.model.impl;

import com.ecoit.elegaldocument.model.LegalField;
import com.ecoit.elegaldocument.model.LegalFieldModel;
import com.ecoit.elegaldocument.model.LegalFieldSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LegalField service. Represents a row in the &quot;ecoit_doc_LegalField&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LegalFieldModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalFieldImpl}.
 * </p>
 *
 * @author Liverpool
 * @see LegalFieldImpl
 * @generated
 */
@JSON(strict = true)
public class LegalFieldModelImpl
	extends BaseModelImpl<LegalField> implements LegalFieldModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal field model instance should use the <code>LegalField</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_doc_LegalField";

	public static final Object[][] TABLE_COLUMNS = {
		{"fieldId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdByUser", Types.BIGINT}, {"modifiedByUser", Types.BIGINT},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"language", Types.VARCHAR}, {"statusField", Types.BOOLEAN},
		{"rssable", Types.BOOLEAN}, {"position", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusField", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("rssable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_doc_LegalField (fieldId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,createdByUser LONG,modifiedByUser LONG,name VARCHAR(250) null,description VARCHAR(550) null,language VARCHAR(75) null,statusField BOOLEAN,rssable BOOLEAN,position INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_doc_LegalField";

	public static final String ORDER_BY_JPQL =
		" ORDER BY legalField.position ASC, legalField.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_doc_LegalField.position ASC, ecoit_doc_LegalField.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long FIELDID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long LANGUAGE_COLUMN_BITMASK = 8L;

	public static final long RSSABLE_COLUMN_BITMASK = 16L;

	public static final long STATUSFIELD_COLUMN_BITMASK = 32L;

	public static final long POSITION_COLUMN_BITMASK = 64L;

	public static final long NAME_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LegalField toModel(LegalFieldSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LegalField model = new LegalFieldImpl();

		model.setFieldId(soapModel.getFieldId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setLanguage(soapModel.getLanguage());
		model.setStatusField(soapModel.isStatusField());
		model.setRssable(soapModel.isRssable());
		model.setPosition(soapModel.getPosition());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LegalField> toModels(LegalFieldSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LegalField> models = new ArrayList<LegalField>(soapModels.length);

		for (LegalFieldSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LegalFieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegalField.class;
	}

	@Override
	public String getModelClassName() {
		return LegalField.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LegalField, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LegalField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalField, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LegalField)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LegalField, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LegalField, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LegalField)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LegalField, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LegalField, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LegalField>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LegalField.class.getClassLoader(), LegalField.class,
			ModelWrapper.class);

		try {
			Constructor<LegalField> constructor =
				(Constructor<LegalField>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LegalField, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LegalField, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LegalField, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LegalField, Object>>();
		Map<String, BiConsumer<LegalField, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LegalField, ?>>();

		attributeGetterFunctions.put("fieldId", LegalField::getFieldId);
		attributeSetterBiConsumers.put(
			"fieldId", (BiConsumer<LegalField, Long>)LegalField::setFieldId);
		attributeGetterFunctions.put("groupId", LegalField::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<LegalField, Long>)LegalField::setGroupId);
		attributeGetterFunctions.put("companyId", LegalField::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LegalField, Long>)LegalField::setCompanyId);
		attributeGetterFunctions.put("userId", LegalField::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<LegalField, Long>)LegalField::setUserId);
		attributeGetterFunctions.put("createdDate", LegalField::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<LegalField, Date>)LegalField::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", LegalField::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LegalField, Date>)LegalField::setModifiedDate);
		attributeGetterFunctions.put(
			"createdByUser", LegalField::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<LegalField, Long>)LegalField::setCreatedByUser);
		attributeGetterFunctions.put(
			"modifiedByUser", LegalField::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<LegalField, Long>)LegalField::setModifiedByUser);
		attributeGetterFunctions.put("name", LegalField::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<LegalField, String>)LegalField::setName);
		attributeGetterFunctions.put("description", LegalField::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<LegalField, String>)LegalField::setDescription);
		attributeGetterFunctions.put("language", LegalField::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<LegalField, String>)LegalField::setLanguage);
		attributeGetterFunctions.put("statusField", LegalField::getStatusField);
		attributeSetterBiConsumers.put(
			"statusField",
			(BiConsumer<LegalField, Boolean>)LegalField::setStatusField);
		attributeGetterFunctions.put("rssable", LegalField::getRssable);
		attributeSetterBiConsumers.put(
			"rssable", (BiConsumer<LegalField, Boolean>)LegalField::setRssable);
		attributeGetterFunctions.put("position", LegalField::getPosition);
		attributeSetterBiConsumers.put(
			"position",
			(BiConsumer<LegalField, Integer>)LegalField::setPosition);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (!_setOriginalFieldId) {
			_setOriginalFieldId = true;

			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public long getOriginalFieldId() {
		return _originalFieldId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public boolean getStatusField() {
		return _statusField;
	}

	@JSON
	@Override
	public boolean isStatusField() {
		return _statusField;
	}

	@Override
	public void setStatusField(boolean statusField) {
		_columnBitmask |= STATUSFIELD_COLUMN_BITMASK;

		if (!_setOriginalStatusField) {
			_setOriginalStatusField = true;

			_originalStatusField = _statusField;
		}

		_statusField = statusField;
	}

	public boolean getOriginalStatusField() {
		return _originalStatusField;
	}

	@JSON
	@Override
	public boolean getRssable() {
		return _rssable;
	}

	@JSON
	@Override
	public boolean isRssable() {
		return _rssable;
	}

	@Override
	public void setRssable(boolean rssable) {
		_columnBitmask |= RSSABLE_COLUMN_BITMASK;

		if (!_setOriginalRssable) {
			_setOriginalRssable = true;

			_originalRssable = _rssable;
		}

		_rssable = rssable;
	}

	public boolean getOriginalRssable() {
		return _originalRssable;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_columnBitmask = -1L;

		_position = position;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LegalField.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegalField toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LegalField>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegalFieldImpl legalFieldImpl = new LegalFieldImpl();

		legalFieldImpl.setFieldId(getFieldId());
		legalFieldImpl.setGroupId(getGroupId());
		legalFieldImpl.setCompanyId(getCompanyId());
		legalFieldImpl.setUserId(getUserId());
		legalFieldImpl.setCreatedDate(getCreatedDate());
		legalFieldImpl.setModifiedDate(getModifiedDate());
		legalFieldImpl.setCreatedByUser(getCreatedByUser());
		legalFieldImpl.setModifiedByUser(getModifiedByUser());
		legalFieldImpl.setName(getName());
		legalFieldImpl.setDescription(getDescription());
		legalFieldImpl.setLanguage(getLanguage());
		legalFieldImpl.setStatusField(isStatusField());
		legalFieldImpl.setRssable(isRssable());
		legalFieldImpl.setPosition(getPosition());

		legalFieldImpl.resetOriginalValues();

		return legalFieldImpl;
	}

	@Override
	public int compareTo(LegalField legalField) {
		int value = 0;

		if (getPosition() < legalField.getPosition()) {
			value = -1;
		}
		else if (getPosition() > legalField.getPosition()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getName().compareToIgnoreCase(legalField.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegalField)) {
			return false;
		}

		LegalField legalField = (LegalField)obj;

		long primaryKey = legalField.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LegalFieldModelImpl legalFieldModelImpl = this;

		legalFieldModelImpl._originalFieldId = legalFieldModelImpl._fieldId;

		legalFieldModelImpl._setOriginalFieldId = false;

		legalFieldModelImpl._originalGroupId = legalFieldModelImpl._groupId;

		legalFieldModelImpl._setOriginalGroupId = false;

		legalFieldModelImpl._originalCompanyId = legalFieldModelImpl._companyId;

		legalFieldModelImpl._setOriginalCompanyId = false;

		legalFieldModelImpl._originalLanguage = legalFieldModelImpl._language;

		legalFieldModelImpl._originalStatusField =
			legalFieldModelImpl._statusField;

		legalFieldModelImpl._setOriginalStatusField = false;

		legalFieldModelImpl._originalRssable = legalFieldModelImpl._rssable;

		legalFieldModelImpl._setOriginalRssable = false;

		legalFieldModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegalField> toCacheModel() {
		LegalFieldCacheModel legalFieldCacheModel = new LegalFieldCacheModel();

		legalFieldCacheModel.fieldId = getFieldId();

		legalFieldCacheModel.groupId = getGroupId();

		legalFieldCacheModel.companyId = getCompanyId();

		legalFieldCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			legalFieldCacheModel.createdDate = createdDate.getTime();
		}
		else {
			legalFieldCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legalFieldCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legalFieldCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legalFieldCacheModel.createdByUser = getCreatedByUser();

		legalFieldCacheModel.modifiedByUser = getModifiedByUser();

		legalFieldCacheModel.name = getName();

		String name = legalFieldCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			legalFieldCacheModel.name = null;
		}

		legalFieldCacheModel.description = getDescription();

		String description = legalFieldCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			legalFieldCacheModel.description = null;
		}

		legalFieldCacheModel.language = getLanguage();

		String language = legalFieldCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legalFieldCacheModel.language = null;
		}

		legalFieldCacheModel.statusField = isStatusField();

		legalFieldCacheModel.rssable = isRssable();

		legalFieldCacheModel.position = getPosition();

		return legalFieldCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LegalField, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LegalField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalField, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LegalField)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LegalField, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LegalField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LegalField, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LegalField)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LegalField>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _fieldId;
	private long _originalFieldId;
	private boolean _setOriginalFieldId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _createdByUser;
	private long _modifiedByUser;
	private String _name;
	private String _description;
	private String _language;
	private String _originalLanguage;
	private boolean _statusField;
	private boolean _originalStatusField;
	private boolean _setOriginalStatusField;
	private boolean _rssable;
	private boolean _originalRssable;
	private boolean _setOriginalRssable;
	private int _position;
	private long _columnBitmask;
	private LegalField _escapedModel;

}