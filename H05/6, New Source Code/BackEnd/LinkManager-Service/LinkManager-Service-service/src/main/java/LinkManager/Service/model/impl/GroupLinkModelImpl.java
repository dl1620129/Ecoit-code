/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package LinkManager.Service.model.impl;

import LinkManager.Service.model.GroupLink;
import LinkManager.Service.model.GroupLinkModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the GroupLink service. Represents a row in the &quot;portal_GroupLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>GroupLinkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GroupLinkImpl
 * @generated
 */
@ProviderType
public class GroupLinkModelImpl
	extends BaseModelImpl<GroupLink> implements GroupLinkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a group link model instance should use the <code>GroupLink</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_GroupLink";

	public static final Object[][] TABLE_COLUMNS = {
		{"linksgroupid", Types.BIGINT}, {"groupid", Types.BIGINT},
		{"createUserId", Types.BIGINT}, {"createddate", Types.TIMESTAMP},
		{"modifieddate", Types.TIMESTAMP}, {"groupName", Types.VARCHAR},
		{"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("linksgroupid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifieddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_GroupLink (linksgroupid LONG not null primary key,groupid LONG,createUserId LONG,createddate DATE null,modifieddate DATE null,groupName VARCHAR(1000) null,description VARCHAR(1000) null)";

	public static final String TABLE_SQL_DROP = "drop table portal_GroupLink";

	public static final String ORDER_BY_JPQL =
		" ORDER BY groupLink.linksgroupid ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY portal_GroupLink.linksgroupid ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public GroupLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _linksgroupid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLinksgroupid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _linksgroupid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GroupLink.class;
	}

	@Override
	public String getModelClassName() {
		return GroupLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GroupLink, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GroupLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupLink, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((GroupLink)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GroupLink, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GroupLink, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GroupLink)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GroupLink, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GroupLink, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, GroupLink>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			GroupLink.class.getClassLoader(), GroupLink.class,
			ModelWrapper.class);

		try {
			Constructor<GroupLink> constructor =
				(Constructor<GroupLink>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<GroupLink, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GroupLink, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GroupLink, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GroupLink, Object>>();
		Map<String, BiConsumer<GroupLink, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GroupLink, ?>>();

		attributeGetterFunctions.put(
			"linksgroupid", GroupLink::getLinksgroupid);
		attributeSetterBiConsumers.put(
			"linksgroupid",
			(BiConsumer<GroupLink, Long>)GroupLink::setLinksgroupid);
		attributeGetterFunctions.put("groupid", GroupLink::getGroupid);
		attributeSetterBiConsumers.put(
			"groupid", (BiConsumer<GroupLink, Long>)GroupLink::setGroupid);
		attributeGetterFunctions.put(
			"createUserId", GroupLink::getCreateUserId);
		attributeSetterBiConsumers.put(
			"createUserId",
			(BiConsumer<GroupLink, Long>)GroupLink::setCreateUserId);
		attributeGetterFunctions.put("createddate", GroupLink::getCreateddate);
		attributeSetterBiConsumers.put(
			"createddate",
			(BiConsumer<GroupLink, Date>)GroupLink::setCreateddate);
		attributeGetterFunctions.put(
			"modifieddate", GroupLink::getModifieddate);
		attributeSetterBiConsumers.put(
			"modifieddate",
			(BiConsumer<GroupLink, Date>)GroupLink::setModifieddate);
		attributeGetterFunctions.put("groupName", GroupLink::getGroupName);
		attributeSetterBiConsumers.put(
			"groupName",
			(BiConsumer<GroupLink, String>)GroupLink::setGroupName);
		attributeGetterFunctions.put("description", GroupLink::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<GroupLink, String>)GroupLink::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLinksgroupid() {
		return _linksgroupid;
	}

	@Override
	public void setLinksgroupid(long linksgroupid) {
		_linksgroupid = linksgroupid;
	}

	@Override
	public long getGroupid() {
		return _groupid;
	}

	@Override
	public void setGroupid(long groupid) {
		_groupid = groupid;
	}

	@Override
	public long getCreateUserId() {
		return _createUserId;
	}

	@Override
	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getCreateUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getCreateUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setCreateUserUuid(String createUserUuid) {
	}

	@Override
	public Date getCreateddate() {
		return _createddate;
	}

	@Override
	public void setCreateddate(Date createddate) {
		_createddate = createddate;
	}

	@Override
	public Date getModifieddate() {
		return _modifieddate;
	}

	@Override
	public void setModifieddate(Date modifieddate) {
		_modifieddate = modifieddate;
	}

	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return "";
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_groupName = groupName;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GroupLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GroupLink toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GroupLink>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroupLinkImpl groupLinkImpl = new GroupLinkImpl();

		groupLinkImpl.setLinksgroupid(getLinksgroupid());
		groupLinkImpl.setGroupid(getGroupid());
		groupLinkImpl.setCreateUserId(getCreateUserId());
		groupLinkImpl.setCreateddate(getCreateddate());
		groupLinkImpl.setModifieddate(getModifieddate());
		groupLinkImpl.setGroupName(getGroupName());
		groupLinkImpl.setDescription(getDescription());

		groupLinkImpl.resetOriginalValues();

		return groupLinkImpl;
	}

	@Override
	public int compareTo(GroupLink groupLink) {
		long primaryKey = groupLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GroupLink)) {
			return false;
		}

		GroupLink groupLink = (GroupLink)obj;

		long primaryKey = groupLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GroupLink> toCacheModel() {
		GroupLinkCacheModel groupLinkCacheModel = new GroupLinkCacheModel();

		groupLinkCacheModel.linksgroupid = getLinksgroupid();

		groupLinkCacheModel.groupid = getGroupid();

		groupLinkCacheModel.createUserId = getCreateUserId();

		Date createddate = getCreateddate();

		if (createddate != null) {
			groupLinkCacheModel.createddate = createddate.getTime();
		}
		else {
			groupLinkCacheModel.createddate = Long.MIN_VALUE;
		}

		Date modifieddate = getModifieddate();

		if (modifieddate != null) {
			groupLinkCacheModel.modifieddate = modifieddate.getTime();
		}
		else {
			groupLinkCacheModel.modifieddate = Long.MIN_VALUE;
		}

		groupLinkCacheModel.groupName = getGroupName();

		String groupName = groupLinkCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			groupLinkCacheModel.groupName = null;
		}

		groupLinkCacheModel.description = getDescription();

		String description = groupLinkCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			groupLinkCacheModel.description = null;
		}

		return groupLinkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GroupLink, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GroupLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((GroupLink)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GroupLink, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GroupLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GroupLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GroupLink)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GroupLink>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _linksgroupid;
	private long _groupid;
	private long _createUserId;
	private Date _createddate;
	private Date _modifieddate;
	private String _groupName;
	private String _description;
	private GroupLink _escapedModel;

}