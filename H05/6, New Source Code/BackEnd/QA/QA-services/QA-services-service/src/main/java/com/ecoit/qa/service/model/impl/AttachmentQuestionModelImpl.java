/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.qa.service.model.impl;

import com.ecoit.qa.service.model.AttachmentQuestion;
import com.ecoit.qa.service.model.AttachmentQuestionModel;
import com.ecoit.qa.service.model.AttachmentQuestionSoap;
import com.ecoit.qa.service.service.persistence.AttachmentQuestionPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttachmentQuestion service. Represents a row in the &quot;ecoit_qa_AttachmentQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttachmentQuestionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentQuestionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttachmentQuestionImpl
 * @generated
 */
@JSON(strict = true)
public class AttachmentQuestionModelImpl
	extends BaseModelImpl<AttachmentQuestion>
	implements AttachmentQuestionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attachment question model instance should use the <code>AttachmentQuestion</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_qa_AttachmentQuestion";

	public static final Object[][] TABLE_COLUMNS = {
		{"attachmentId", Types.BIGINT}, {"questionId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_qa_AttachmentQuestion (attachmentId LONG not null,questionId LONG not null,primary key (attachmentId, questionId))";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_qa_AttachmentQuestion";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attachmentQuestion.id.attachmentId ASC, attachmentQuestion.id.questionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_qa_AttachmentQuestion.attachmentId ASC, ecoit_qa_AttachmentQuestion.questionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ATTACHMENTID_COLUMN_BITMASK = 1L;

	public static final long QUESTIONID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AttachmentQuestion toModel(AttachmentQuestionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AttachmentQuestion model = new AttachmentQuestionImpl();

		model.setAttachmentId(soapModel.getAttachmentId());
		model.setQuestionId(soapModel.getQuestionId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AttachmentQuestion> toModels(
		AttachmentQuestionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AttachmentQuestion> models = new ArrayList<AttachmentQuestion>(
			soapModels.length);

		for (AttachmentQuestionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AttachmentQuestionModelImpl() {
	}

	@Override
	public AttachmentQuestionPK getPrimaryKey() {
		return new AttachmentQuestionPK(_attachmentId, _questionId);
	}

	@Override
	public void setPrimaryKey(AttachmentQuestionPK primaryKey) {
		setAttachmentId(primaryKey.attachmentId);
		setQuestionId(primaryKey.questionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AttachmentQuestionPK(_attachmentId, _questionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AttachmentQuestionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AttachmentQuestion.class;
	}

	@Override
	public String getModelClassName() {
		return AttachmentQuestion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttachmentQuestion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttachmentQuestion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentQuestion, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttachmentQuestion)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttachmentQuestion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttachmentQuestion, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttachmentQuestion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttachmentQuestion, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttachmentQuestion, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AttachmentQuestion>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AttachmentQuestion.class.getClassLoader(), AttachmentQuestion.class,
			ModelWrapper.class);

		try {
			Constructor<AttachmentQuestion> constructor =
				(Constructor<AttachmentQuestion>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AttachmentQuestion, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AttachmentQuestion, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AttachmentQuestion, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AttachmentQuestion, Object>>();
		Map<String, BiConsumer<AttachmentQuestion, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AttachmentQuestion, ?>>();

		attributeGetterFunctions.put(
			"attachmentId", AttachmentQuestion::getAttachmentId);
		attributeSetterBiConsumers.put(
			"attachmentId",
			(BiConsumer<AttachmentQuestion, Long>)
				AttachmentQuestion::setAttachmentId);
		attributeGetterFunctions.put(
			"questionId", AttachmentQuestion::getQuestionId);
		attributeSetterBiConsumers.put(
			"questionId",
			(BiConsumer<AttachmentQuestion, Long>)
				AttachmentQuestion::setQuestionId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAttachmentId() {
		return _attachmentId;
	}

	@Override
	public void setAttachmentId(long attachmentId) {
		_columnBitmask |= ATTACHMENTID_COLUMN_BITMASK;

		if (!_setOriginalAttachmentId) {
			_setOriginalAttachmentId = true;

			_originalAttachmentId = _attachmentId;
		}

		_attachmentId = attachmentId;
	}

	public long getOriginalAttachmentId() {
		return _originalAttachmentId;
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AttachmentQuestion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttachmentQuestion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachmentQuestionImpl attachmentQuestionImpl =
			new AttachmentQuestionImpl();

		attachmentQuestionImpl.setAttachmentId(getAttachmentId());
		attachmentQuestionImpl.setQuestionId(getQuestionId());

		attachmentQuestionImpl.resetOriginalValues();

		return attachmentQuestionImpl;
	}

	@Override
	public int compareTo(AttachmentQuestion attachmentQuestion) {
		AttachmentQuestionPK primaryKey = attachmentQuestion.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AttachmentQuestion)) {
			return false;
		}

		AttachmentQuestion attachmentQuestion = (AttachmentQuestion)obj;

		AttachmentQuestionPK primaryKey = attachmentQuestion.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AttachmentQuestionModelImpl attachmentQuestionModelImpl = this;

		attachmentQuestionModelImpl._originalAttachmentId =
			attachmentQuestionModelImpl._attachmentId;

		attachmentQuestionModelImpl._setOriginalAttachmentId = false;

		attachmentQuestionModelImpl._originalQuestionId =
			attachmentQuestionModelImpl._questionId;

		attachmentQuestionModelImpl._setOriginalQuestionId = false;

		attachmentQuestionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AttachmentQuestion> toCacheModel() {
		AttachmentQuestionCacheModel attachmentQuestionCacheModel =
			new AttachmentQuestionCacheModel();

		attachmentQuestionCacheModel.attachmentQuestionPK = getPrimaryKey();

		attachmentQuestionCacheModel.attachmentId = getAttachmentId();

		attachmentQuestionCacheModel.questionId = getQuestionId();

		return attachmentQuestionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttachmentQuestion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttachmentQuestion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentQuestion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AttachmentQuestion)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AttachmentQuestion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AttachmentQuestion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttachmentQuestion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AttachmentQuestion)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttachmentQuestion>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _attachmentId;
	private long _originalAttachmentId;
	private boolean _setOriginalAttachmentId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _columnBitmask;
	private AttachmentQuestion _escapedModel;

}