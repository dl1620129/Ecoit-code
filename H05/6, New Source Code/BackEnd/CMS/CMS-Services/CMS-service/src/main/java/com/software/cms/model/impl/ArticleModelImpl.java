/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.Article;
import com.software.cms.model.ArticleModel;
import com.software.cms.model.ArticleSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Article service. Represents a row in the &quot;soft_cms_Article&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArticleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleImpl}.
 * </p>
 *
 * @author DungNV
 * @see ArticleImpl
 * @generated
 */
@JSON(strict = true)
public class ArticleModelImpl
	extends BaseModelImpl<Article> implements ArticleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article model instance should use the <code>Article</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_Article";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"articleId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"language", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"summary", Types.VARCHAR},
		{"content", Types.VARCHAR}, {"image", Types.VARCHAR},
		{"imageTitle", Types.VARCHAR}, {"author", Types.VARCHAR},
		{"source", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"allowComent", Types.BOOLEAN}, {"viewCount", Types.BIGINT},
		{"status", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"pendingDate", Types.TIMESTAMP},
		{"approvedDate", Types.TIMESTAMP}, {"neverExpire", Types.BOOLEAN},
		{"publishedDateFrom", Types.TIMESTAMP},
		{"publishedDateTo", Types.TIMESTAMP}, {"createdByUser", Types.BIGINT},
		{"pendingByUser", Types.BIGINT}, {"modifiedByUser", Types.BIGINT},
		{"approvedByUser", Types.BIGINT}, {"publishedByUser", Types.BIGINT},
		{"friendlyURL", Types.VARCHAR}, {"isImageArticle", Types.BOOLEAN},
		{"isHomePage", Types.BOOLEAN}, {"thuTu", Types.BIGINT},
		{"InvolveArt", Types.VARCHAR}, {"folderId", Types.BIGINT},
		{"tags", Types.VARCHAR}, {"tagIds", Types.VARCHAR},
		{"eventIds", Types.VARCHAR}, {"events", Types.VARCHAR},
		{"isRss", Types.BOOLEAN}, {"articleMainId", Types.BIGINT},
		{"isSubSite", Types.BOOLEAN}, {"isNoiBat", Types.BOOLEAN},
		{"donVi", Types.VARCHAR}, {"loaiTinBai", Types.VARCHAR},
		{"soKyTuBaiViet", Types.VARCHAR}, {"soAnhBaiViet", Types.VARCHAR},
		{"loaiAnh", Types.VARCHAR}, {"theLoaiTinBai", Types.VARCHAR},
		{"isTimer", Types.BOOLEAN}, {"humanAccess", Types.VARCHAR},
		{"humanAccessIds", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allowComent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("viewCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pendingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("neverExpire", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("publishedDateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedDateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pendingByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("friendlyURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isImageArticle", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isHomePage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("thuTu", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("InvolveArt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tagIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("events", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isRss", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("articleMainId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isSubSite", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isNoiBat", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("donVi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiTinBai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soKyTuBaiViet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soAnhBaiViet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiAnh", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("theLoaiTinBai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isTimer", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("humanAccess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("humanAccessIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_Article (uuid_ VARCHAR(75) null,articleId LONG not null primary key,groupId LONG,language VARCHAR(75) null,title TEXT null,summary TEXT null,content TEXT null,image VARCHAR(75) null,imageTitle TEXT null,author TEXT null,source TEXT null,eventId LONG,allowComent BOOLEAN,viewCount LONG,status LONG,createdDate DATE null,modifiedDate DATE null,pendingDate DATE null,approvedDate DATE null,neverExpire BOOLEAN,publishedDateFrom DATE null,publishedDateTo DATE null,createdByUser LONG,pendingByUser LONG,modifiedByUser LONG,approvedByUser LONG,publishedByUser LONG,friendlyURL TEXT null,isImageArticle BOOLEAN,isHomePage BOOLEAN,thuTu LONG,InvolveArt TEXT null,folderId LONG,tags TEXT null,tagIds TEXT null,eventIds TEXT null,events TEXT null,isRss BOOLEAN,articleMainId LONG,isSubSite BOOLEAN,isNoiBat BOOLEAN,donVi TEXT null,loaiTinBai TEXT null,soKyTuBaiViet TEXT null,soAnhBaiViet TEXT null,loaiAnh TEXT null,theLoaiTinBai TEXT null,isTimer BOOLEAN,humanAccess TEXT null,humanAccessIds TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table soft_cms_Article";

	public static final String ORDER_BY_JPQL =
		" ORDER BY article.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_Article.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CREATEDBYUSER_COLUMN_BITMASK = 1L;

	public static final long EVENTID_COLUMN_BITMASK = 2L;

	public static final long FRIENDLYURL_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long LANGUAGE_COLUMN_BITMASK = 16L;

	public static final long STATUS_COLUMN_BITMASK = 32L;

	public static final long UUID_COLUMN_BITMASK = 64L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Article toModel(ArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Article model = new ArticleImpl();

		model.setUuid(soapModel.getUuid());
		model.setArticleId(soapModel.getArticleId());
		model.setGroupId(soapModel.getGroupId());
		model.setLanguage(soapModel.getLanguage());
		model.setTitle(soapModel.getTitle());
		model.setSummary(soapModel.getSummary());
		model.setContent(soapModel.getContent());
		model.setImage(soapModel.getImage());
		model.setImageTitle(soapModel.getImageTitle());
		model.setAuthor(soapModel.getAuthor());
		model.setSource(soapModel.getSource());
		model.setEventId(soapModel.getEventId());
		model.setAllowComent(soapModel.isAllowComent());
		model.setViewCount(soapModel.getViewCount());
		model.setStatus(soapModel.getStatus());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPendingDate(soapModel.getPendingDate());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setNeverExpire(soapModel.isNeverExpire());
		model.setPublishedDateFrom(soapModel.getPublishedDateFrom());
		model.setPublishedDateTo(soapModel.getPublishedDateTo());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setPendingByUser(soapModel.getPendingByUser());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setPublishedByUser(soapModel.getPublishedByUser());
		model.setFriendlyURL(soapModel.getFriendlyURL());
		model.setIsImageArticle(soapModel.isIsImageArticle());
		model.setIsHomePage(soapModel.isIsHomePage());
		model.setThuTu(soapModel.getThuTu());
		model.setInvolveArt(soapModel.getInvolveArt());
		model.setFolderId(soapModel.getFolderId());
		model.setTags(soapModel.getTags());
		model.setTagIds(soapModel.getTagIds());
		model.setEventIds(soapModel.getEventIds());
		model.setEvents(soapModel.getEvents());
		model.setIsRss(soapModel.isIsRss());
		model.setArticleMainId(soapModel.getArticleMainId());
		model.setIsSubSite(soapModel.isIsSubSite());
		model.setIsNoiBat(soapModel.isIsNoiBat());
		model.setDonVi(soapModel.getDonVi());
		model.setLoaiTinBai(soapModel.getLoaiTinBai());
		model.setSoKyTuBaiViet(soapModel.getSoKyTuBaiViet());
		model.setSoAnhBaiViet(soapModel.getSoAnhBaiViet());
		model.setLoaiAnh(soapModel.getLoaiAnh());
		model.setTheLoaiTinBai(soapModel.getTheLoaiTinBai());
		model.setIsTimer(soapModel.isIsTimer());
		model.setHumanAccess(soapModel.getHumanAccess());
		model.setHumanAccessIds(soapModel.getHumanAccessIds());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Article> toModels(ArticleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Article> models = new ArrayList<Article>(soapModels.length);

		for (ArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Article.class;
	}

	@Override
	public String getModelClassName() {
		return Article.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Article)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Article, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Article, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Article)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Article, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Article, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Article>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Article.class.getClassLoader(), Article.class, ModelWrapper.class);

		try {
			Constructor<Article> constructor =
				(Constructor<Article>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Article, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Article, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Article, Object>>();
		Map<String, BiConsumer<Article, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Article, ?>>();

		attributeGetterFunctions.put("uuid", Article::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Article, String>)Article::setUuid);
		attributeGetterFunctions.put("articleId", Article::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId", (BiConsumer<Article, Long>)Article::setArticleId);
		attributeGetterFunctions.put("groupId", Article::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Article, Long>)Article::setGroupId);
		attributeGetterFunctions.put("language", Article::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<Article, String>)Article::setLanguage);
		attributeGetterFunctions.put("title", Article::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Article, String>)Article::setTitle);
		attributeGetterFunctions.put("summary", Article::getSummary);
		attributeSetterBiConsumers.put(
			"summary", (BiConsumer<Article, String>)Article::setSummary);
		attributeGetterFunctions.put("content", Article::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Article, String>)Article::setContent);
		attributeGetterFunctions.put("image", Article::getImage);
		attributeSetterBiConsumers.put(
			"image", (BiConsumer<Article, String>)Article::setImage);
		attributeGetterFunctions.put("imageTitle", Article::getImageTitle);
		attributeSetterBiConsumers.put(
			"imageTitle", (BiConsumer<Article, String>)Article::setImageTitle);
		attributeGetterFunctions.put("author", Article::getAuthor);
		attributeSetterBiConsumers.put(
			"author", (BiConsumer<Article, String>)Article::setAuthor);
		attributeGetterFunctions.put("source", Article::getSource);
		attributeSetterBiConsumers.put(
			"source", (BiConsumer<Article, String>)Article::setSource);
		attributeGetterFunctions.put("eventId", Article::getEventId);
		attributeSetterBiConsumers.put(
			"eventId", (BiConsumer<Article, Long>)Article::setEventId);
		attributeGetterFunctions.put("allowComent", Article::getAllowComent);
		attributeSetterBiConsumers.put(
			"allowComent",
			(BiConsumer<Article, Boolean>)Article::setAllowComent);
		attributeGetterFunctions.put("viewCount", Article::getViewCount);
		attributeSetterBiConsumers.put(
			"viewCount", (BiConsumer<Article, Long>)Article::setViewCount);
		attributeGetterFunctions.put("status", Article::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Article, Long>)Article::setStatus);
		attributeGetterFunctions.put("createdDate", Article::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<Article, Date>)Article::setCreatedDate);
		attributeGetterFunctions.put("modifiedDate", Article::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Article, Date>)Article::setModifiedDate);
		attributeGetterFunctions.put("pendingDate", Article::getPendingDate);
		attributeSetterBiConsumers.put(
			"pendingDate", (BiConsumer<Article, Date>)Article::setPendingDate);
		attributeGetterFunctions.put("approvedDate", Article::getApprovedDate);
		attributeSetterBiConsumers.put(
			"approvedDate",
			(BiConsumer<Article, Date>)Article::setApprovedDate);
		attributeGetterFunctions.put("neverExpire", Article::getNeverExpire);
		attributeSetterBiConsumers.put(
			"neverExpire",
			(BiConsumer<Article, Boolean>)Article::setNeverExpire);
		attributeGetterFunctions.put(
			"publishedDateFrom", Article::getPublishedDateFrom);
		attributeSetterBiConsumers.put(
			"publishedDateFrom",
			(BiConsumer<Article, Date>)Article::setPublishedDateFrom);
		attributeGetterFunctions.put(
			"publishedDateTo", Article::getPublishedDateTo);
		attributeSetterBiConsumers.put(
			"publishedDateTo",
			(BiConsumer<Article, Date>)Article::setPublishedDateTo);
		attributeGetterFunctions.put(
			"createdByUser", Article::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<Article, Long>)Article::setCreatedByUser);
		attributeGetterFunctions.put(
			"pendingByUser", Article::getPendingByUser);
		attributeSetterBiConsumers.put(
			"pendingByUser",
			(BiConsumer<Article, Long>)Article::setPendingByUser);
		attributeGetterFunctions.put(
			"modifiedByUser", Article::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<Article, Long>)Article::setModifiedByUser);
		attributeGetterFunctions.put(
			"approvedByUser", Article::getApprovedByUser);
		attributeSetterBiConsumers.put(
			"approvedByUser",
			(BiConsumer<Article, Long>)Article::setApprovedByUser);
		attributeGetterFunctions.put(
			"publishedByUser", Article::getPublishedByUser);
		attributeSetterBiConsumers.put(
			"publishedByUser",
			(BiConsumer<Article, Long>)Article::setPublishedByUser);
		attributeGetterFunctions.put("friendlyURL", Article::getFriendlyURL);
		attributeSetterBiConsumers.put(
			"friendlyURL",
			(BiConsumer<Article, String>)Article::setFriendlyURL);
		attributeGetterFunctions.put(
			"isImageArticle", Article::getIsImageArticle);
		attributeSetterBiConsumers.put(
			"isImageArticle",
			(BiConsumer<Article, Boolean>)Article::setIsImageArticle);
		attributeGetterFunctions.put("isHomePage", Article::getIsHomePage);
		attributeSetterBiConsumers.put(
			"isHomePage", (BiConsumer<Article, Boolean>)Article::setIsHomePage);
		attributeGetterFunctions.put("thuTu", Article::getThuTu);
		attributeSetterBiConsumers.put(
			"thuTu", (BiConsumer<Article, Long>)Article::setThuTu);
		attributeGetterFunctions.put("InvolveArt", Article::getInvolveArt);
		attributeSetterBiConsumers.put(
			"InvolveArt", (BiConsumer<Article, String>)Article::setInvolveArt);
		attributeGetterFunctions.put("folderId", Article::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Article, Long>)Article::setFolderId);
		attributeGetterFunctions.put("tags", Article::getTags);
		attributeSetterBiConsumers.put(
			"tags", (BiConsumer<Article, String>)Article::setTags);
		attributeGetterFunctions.put("tagIds", Article::getTagIds);
		attributeSetterBiConsumers.put(
			"tagIds", (BiConsumer<Article, String>)Article::setTagIds);
		attributeGetterFunctions.put("eventIds", Article::getEventIds);
		attributeSetterBiConsumers.put(
			"eventIds", (BiConsumer<Article, String>)Article::setEventIds);
		attributeGetterFunctions.put("events", Article::getEvents);
		attributeSetterBiConsumers.put(
			"events", (BiConsumer<Article, String>)Article::setEvents);
		attributeGetterFunctions.put("isRss", Article::getIsRss);
		attributeSetterBiConsumers.put(
			"isRss", (BiConsumer<Article, Boolean>)Article::setIsRss);
		attributeGetterFunctions.put(
			"articleMainId", Article::getArticleMainId);
		attributeSetterBiConsumers.put(
			"articleMainId",
			(BiConsumer<Article, Long>)Article::setArticleMainId);
		attributeGetterFunctions.put("isSubSite", Article::getIsSubSite);
		attributeSetterBiConsumers.put(
			"isSubSite", (BiConsumer<Article, Boolean>)Article::setIsSubSite);
		attributeGetterFunctions.put("isNoiBat", Article::getIsNoiBat);
		attributeSetterBiConsumers.put(
			"isNoiBat", (BiConsumer<Article, Boolean>)Article::setIsNoiBat);
		attributeGetterFunctions.put("donVi", Article::getDonVi);
		attributeSetterBiConsumers.put(
			"donVi", (BiConsumer<Article, String>)Article::setDonVi);
		attributeGetterFunctions.put("loaiTinBai", Article::getLoaiTinBai);
		attributeSetterBiConsumers.put(
			"loaiTinBai", (BiConsumer<Article, String>)Article::setLoaiTinBai);
		attributeGetterFunctions.put(
			"soKyTuBaiViet", Article::getSoKyTuBaiViet);
		attributeSetterBiConsumers.put(
			"soKyTuBaiViet",
			(BiConsumer<Article, String>)Article::setSoKyTuBaiViet);
		attributeGetterFunctions.put("soAnhBaiViet", Article::getSoAnhBaiViet);
		attributeSetterBiConsumers.put(
			"soAnhBaiViet",
			(BiConsumer<Article, String>)Article::setSoAnhBaiViet);
		attributeGetterFunctions.put("loaiAnh", Article::getLoaiAnh);
		attributeSetterBiConsumers.put(
			"loaiAnh", (BiConsumer<Article, String>)Article::setLoaiAnh);
		attributeGetterFunctions.put(
			"theLoaiTinBai", Article::getTheLoaiTinBai);
		attributeSetterBiConsumers.put(
			"theLoaiTinBai",
			(BiConsumer<Article, String>)Article::setTheLoaiTinBai);
		attributeGetterFunctions.put("isTimer", Article::getIsTimer);
		attributeSetterBiConsumers.put(
			"isTimer", (BiConsumer<Article, Boolean>)Article::setIsTimer);
		attributeGetterFunctions.put("humanAccess", Article::getHumanAccess);
		attributeSetterBiConsumers.put(
			"humanAccess",
			(BiConsumer<Article, String>)Article::setHumanAccess);
		attributeGetterFunctions.put(
			"humanAccessIds", Article::getHumanAccessIds);
		attributeSetterBiConsumers.put(
			"humanAccessIds",
			(BiConsumer<Article, String>)Article::setHumanAccessIds);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		_articleId = articleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return "";
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return "";
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@JSON
	@Override
	public String getImageTitle() {
		if (_imageTitle == null) {
			return "";
		}
		else {
			return _imageTitle;
		}
	}

	@Override
	public void setImageTitle(String imageTitle) {
		_imageTitle = imageTitle;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@JSON
	@Override
	public boolean getAllowComent() {
		return _allowComent;
	}

	@JSON
	@Override
	public boolean isAllowComent() {
		return _allowComent;
	}

	@Override
	public void setAllowComent(boolean allowComent) {
		_allowComent = allowComent;
	}

	@JSON
	@Override
	public long getViewCount() {
		return _viewCount;
	}

	@Override
	public void setViewCount(long viewCount) {
		_viewCount = viewCount;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getPendingDate() {
		return _pendingDate;
	}

	@Override
	public void setPendingDate(Date pendingDate) {
		_pendingDate = pendingDate;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public boolean getNeverExpire() {
		return _neverExpire;
	}

	@JSON
	@Override
	public boolean isNeverExpire() {
		return _neverExpire;
	}

	@Override
	public void setNeverExpire(boolean neverExpire) {
		_neverExpire = neverExpire;
	}

	@JSON
	@Override
	public Date getPublishedDateFrom() {
		return _publishedDateFrom;
	}

	@Override
	public void setPublishedDateFrom(Date publishedDateFrom) {
		_publishedDateFrom = publishedDateFrom;
	}

	@JSON
	@Override
	public Date getPublishedDateTo() {
		return _publishedDateTo;
	}

	@Override
	public void setPublishedDateTo(Date publishedDateTo) {
		_publishedDateTo = publishedDateTo;
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (!_setOriginalCreatedByUser) {
			_setOriginalCreatedByUser = true;

			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public long getOriginalCreatedByUser() {
		return _originalCreatedByUser;
	}

	@JSON
	@Override
	public long getPendingByUser() {
		return _pendingByUser;
	}

	@Override
	public void setPendingByUser(long pendingByUser) {
		_pendingByUser = pendingByUser;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@JSON
	@Override
	public long getPublishedByUser() {
		return _publishedByUser;
	}

	@Override
	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@JSON
	@Override
	public String getFriendlyURL() {
		if (_friendlyURL == null) {
			return "";
		}
		else {
			return _friendlyURL;
		}
	}

	@Override
	public void setFriendlyURL(String friendlyURL) {
		_columnBitmask |= FRIENDLYURL_COLUMN_BITMASK;

		if (_originalFriendlyURL == null) {
			_originalFriendlyURL = _friendlyURL;
		}

		_friendlyURL = friendlyURL;
	}

	public String getOriginalFriendlyURL() {
		return GetterUtil.getString(_originalFriendlyURL);
	}

	@JSON
	@Override
	public boolean getIsImageArticle() {
		return _isImageArticle;
	}

	@JSON
	@Override
	public boolean isIsImageArticle() {
		return _isImageArticle;
	}

	@Override
	public void setIsImageArticle(boolean isImageArticle) {
		_isImageArticle = isImageArticle;
	}

	@JSON
	@Override
	public boolean getIsHomePage() {
		return _isHomePage;
	}

	@JSON
	@Override
	public boolean isIsHomePage() {
		return _isHomePage;
	}

	@Override
	public void setIsHomePage(boolean isHomePage) {
		_isHomePage = isHomePage;
	}

	@JSON
	@Override
	public long getThuTu() {
		return _thuTu;
	}

	@Override
	public void setThuTu(long thuTu) {
		_thuTu = thuTu;
	}

	@JSON
	@Override
	public String getInvolveArt() {
		if (_InvolveArt == null) {
			return "";
		}
		else {
			return _InvolveArt;
		}
	}

	@Override
	public void setInvolveArt(String InvolveArt) {
		_InvolveArt = InvolveArt;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@JSON
	@Override
	public String getTagIds() {
		if (_tagIds == null) {
			return "";
		}
		else {
			return _tagIds;
		}
	}

	@Override
	public void setTagIds(String tagIds) {
		_tagIds = tagIds;
	}

	@JSON
	@Override
	public String getEventIds() {
		if (_eventIds == null) {
			return "";
		}
		else {
			return _eventIds;
		}
	}

	@Override
	public void setEventIds(String eventIds) {
		_eventIds = eventIds;
	}

	@JSON
	@Override
	public String getEvents() {
		if (_events == null) {
			return "";
		}
		else {
			return _events;
		}
	}

	@Override
	public void setEvents(String events) {
		_events = events;
	}

	@JSON
	@Override
	public boolean getIsRss() {
		return _isRss;
	}

	@JSON
	@Override
	public boolean isIsRss() {
		return _isRss;
	}

	@Override
	public void setIsRss(boolean isRss) {
		_isRss = isRss;
	}

	@JSON
	@Override
	public long getArticleMainId() {
		return _articleMainId;
	}

	@Override
	public void setArticleMainId(long articleMainId) {
		_articleMainId = articleMainId;
	}

	@JSON
	@Override
	public boolean getIsSubSite() {
		return _isSubSite;
	}

	@JSON
	@Override
	public boolean isIsSubSite() {
		return _isSubSite;
	}

	@Override
	public void setIsSubSite(boolean isSubSite) {
		_isSubSite = isSubSite;
	}

	@JSON
	@Override
	public boolean getIsNoiBat() {
		return _isNoiBat;
	}

	@JSON
	@Override
	public boolean isIsNoiBat() {
		return _isNoiBat;
	}

	@Override
	public void setIsNoiBat(boolean isNoiBat) {
		_isNoiBat = isNoiBat;
	}

	@JSON
	@Override
	public String getDonVi() {
		if (_donVi == null) {
			return "";
		}
		else {
			return _donVi;
		}
	}

	@Override
	public void setDonVi(String donVi) {
		_donVi = donVi;
	}

	@JSON
	@Override
	public String getLoaiTinBai() {
		if (_loaiTinBai == null) {
			return "";
		}
		else {
			return _loaiTinBai;
		}
	}

	@Override
	public void setLoaiTinBai(String loaiTinBai) {
		_loaiTinBai = loaiTinBai;
	}

	@JSON
	@Override
	public String getSoKyTuBaiViet() {
		if (_soKyTuBaiViet == null) {
			return "";
		}
		else {
			return _soKyTuBaiViet;
		}
	}

	@Override
	public void setSoKyTuBaiViet(String soKyTuBaiViet) {
		_soKyTuBaiViet = soKyTuBaiViet;
	}

	@JSON
	@Override
	public String getSoAnhBaiViet() {
		if (_soAnhBaiViet == null) {
			return "";
		}
		else {
			return _soAnhBaiViet;
		}
	}

	@Override
	public void setSoAnhBaiViet(String soAnhBaiViet) {
		_soAnhBaiViet = soAnhBaiViet;
	}

	@JSON
	@Override
	public String getLoaiAnh() {
		if (_loaiAnh == null) {
			return "";
		}
		else {
			return _loaiAnh;
		}
	}

	@Override
	public void setLoaiAnh(String loaiAnh) {
		_loaiAnh = loaiAnh;
	}

	@JSON
	@Override
	public String getTheLoaiTinBai() {
		if (_theLoaiTinBai == null) {
			return "";
		}
		else {
			return _theLoaiTinBai;
		}
	}

	@Override
	public void setTheLoaiTinBai(String theLoaiTinBai) {
		_theLoaiTinBai = theLoaiTinBai;
	}

	@JSON
	@Override
	public boolean getIsTimer() {
		return _isTimer;
	}

	@JSON
	@Override
	public boolean isIsTimer() {
		return _isTimer;
	}

	@Override
	public void setIsTimer(boolean isTimer) {
		_isTimer = isTimer;
	}

	@JSON
	@Override
	public String getHumanAccess() {
		if (_humanAccess == null) {
			return "";
		}
		else {
			return _humanAccess;
		}
	}

	@Override
	public void setHumanAccess(String humanAccess) {
		_humanAccess = humanAccess;
	}

	@JSON
	@Override
	public String getHumanAccessIds() {
		if (_humanAccessIds == null) {
			return "";
		}
		else {
			return _humanAccessIds;
		}
	}

	@Override
	public void setHumanAccessIds(String humanAccessIds) {
		_humanAccessIds = humanAccessIds;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Article.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Article toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Article>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleImpl articleImpl = new ArticleImpl();

		articleImpl.setUuid(getUuid());
		articleImpl.setArticleId(getArticleId());
		articleImpl.setGroupId(getGroupId());
		articleImpl.setLanguage(getLanguage());
		articleImpl.setTitle(getTitle());
		articleImpl.setSummary(getSummary());
		articleImpl.setContent(getContent());
		articleImpl.setImage(getImage());
		articleImpl.setImageTitle(getImageTitle());
		articleImpl.setAuthor(getAuthor());
		articleImpl.setSource(getSource());
		articleImpl.setEventId(getEventId());
		articleImpl.setAllowComent(isAllowComent());
		articleImpl.setViewCount(getViewCount());
		articleImpl.setStatus(getStatus());
		articleImpl.setCreatedDate(getCreatedDate());
		articleImpl.setModifiedDate(getModifiedDate());
		articleImpl.setPendingDate(getPendingDate());
		articleImpl.setApprovedDate(getApprovedDate());
		articleImpl.setNeverExpire(isNeverExpire());
		articleImpl.setPublishedDateFrom(getPublishedDateFrom());
		articleImpl.setPublishedDateTo(getPublishedDateTo());
		articleImpl.setCreatedByUser(getCreatedByUser());
		articleImpl.setPendingByUser(getPendingByUser());
		articleImpl.setModifiedByUser(getModifiedByUser());
		articleImpl.setApprovedByUser(getApprovedByUser());
		articleImpl.setPublishedByUser(getPublishedByUser());
		articleImpl.setFriendlyURL(getFriendlyURL());
		articleImpl.setIsImageArticle(isIsImageArticle());
		articleImpl.setIsHomePage(isIsHomePage());
		articleImpl.setThuTu(getThuTu());
		articleImpl.setInvolveArt(getInvolveArt());
		articleImpl.setFolderId(getFolderId());
		articleImpl.setTags(getTags());
		articleImpl.setTagIds(getTagIds());
		articleImpl.setEventIds(getEventIds());
		articleImpl.setEvents(getEvents());
		articleImpl.setIsRss(isIsRss());
		articleImpl.setArticleMainId(getArticleMainId());
		articleImpl.setIsSubSite(isIsSubSite());
		articleImpl.setIsNoiBat(isIsNoiBat());
		articleImpl.setDonVi(getDonVi());
		articleImpl.setLoaiTinBai(getLoaiTinBai());
		articleImpl.setSoKyTuBaiViet(getSoKyTuBaiViet());
		articleImpl.setSoAnhBaiViet(getSoAnhBaiViet());
		articleImpl.setLoaiAnh(getLoaiAnh());
		articleImpl.setTheLoaiTinBai(getTheLoaiTinBai());
		articleImpl.setIsTimer(isIsTimer());
		articleImpl.setHumanAccess(getHumanAccess());
		articleImpl.setHumanAccessIds(getHumanAccessIds());

		articleImpl.resetOriginalValues();

		return articleImpl;
	}

	@Override
	public int compareTo(Article article) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), article.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Article)) {
			return false;
		}

		Article article = (Article)obj;

		long primaryKey = article.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ArticleModelImpl articleModelImpl = this;

		articleModelImpl._originalUuid = articleModelImpl._uuid;

		articleModelImpl._originalGroupId = articleModelImpl._groupId;

		articleModelImpl._setOriginalGroupId = false;

		articleModelImpl._originalLanguage = articleModelImpl._language;

		articleModelImpl._originalEventId = articleModelImpl._eventId;

		articleModelImpl._setOriginalEventId = false;

		articleModelImpl._originalStatus = articleModelImpl._status;

		articleModelImpl._setOriginalStatus = false;

		articleModelImpl._originalCreatedByUser =
			articleModelImpl._createdByUser;

		articleModelImpl._setOriginalCreatedByUser = false;

		articleModelImpl._originalFriendlyURL = articleModelImpl._friendlyURL;

		articleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Article> toCacheModel() {
		ArticleCacheModel articleCacheModel = new ArticleCacheModel();

		articleCacheModel.uuid = getUuid();

		String uuid = articleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			articleCacheModel.uuid = null;
		}

		articleCacheModel.articleId = getArticleId();

		articleCacheModel.groupId = getGroupId();

		articleCacheModel.language = getLanguage();

		String language = articleCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			articleCacheModel.language = null;
		}

		articleCacheModel.title = getTitle();

		String title = articleCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			articleCacheModel.title = null;
		}

		articleCacheModel.summary = getSummary();

		String summary = articleCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			articleCacheModel.summary = null;
		}

		articleCacheModel.content = getContent();

		String content = articleCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			articleCacheModel.content = null;
		}

		articleCacheModel.image = getImage();

		String image = articleCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			articleCacheModel.image = null;
		}

		articleCacheModel.imageTitle = getImageTitle();

		String imageTitle = articleCacheModel.imageTitle;

		if ((imageTitle != null) && (imageTitle.length() == 0)) {
			articleCacheModel.imageTitle = null;
		}

		articleCacheModel.author = getAuthor();

		String author = articleCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			articleCacheModel.author = null;
		}

		articleCacheModel.source = getSource();

		String source = articleCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			articleCacheModel.source = null;
		}

		articleCacheModel.eventId = getEventId();

		articleCacheModel.allowComent = isAllowComent();

		articleCacheModel.viewCount = getViewCount();

		articleCacheModel.status = getStatus();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			articleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			articleCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			articleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			articleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date pendingDate = getPendingDate();

		if (pendingDate != null) {
			articleCacheModel.pendingDate = pendingDate.getTime();
		}
		else {
			articleCacheModel.pendingDate = Long.MIN_VALUE;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			articleCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			articleCacheModel.approvedDate = Long.MIN_VALUE;
		}

		articleCacheModel.neverExpire = isNeverExpire();

		Date publishedDateFrom = getPublishedDateFrom();

		if (publishedDateFrom != null) {
			articleCacheModel.publishedDateFrom = publishedDateFrom.getTime();
		}
		else {
			articleCacheModel.publishedDateFrom = Long.MIN_VALUE;
		}

		Date publishedDateTo = getPublishedDateTo();

		if (publishedDateTo != null) {
			articleCacheModel.publishedDateTo = publishedDateTo.getTime();
		}
		else {
			articleCacheModel.publishedDateTo = Long.MIN_VALUE;
		}

		articleCacheModel.createdByUser = getCreatedByUser();

		articleCacheModel.pendingByUser = getPendingByUser();

		articleCacheModel.modifiedByUser = getModifiedByUser();

		articleCacheModel.approvedByUser = getApprovedByUser();

		articleCacheModel.publishedByUser = getPublishedByUser();

		articleCacheModel.friendlyURL = getFriendlyURL();

		String friendlyURL = articleCacheModel.friendlyURL;

		if ((friendlyURL != null) && (friendlyURL.length() == 0)) {
			articleCacheModel.friendlyURL = null;
		}

		articleCacheModel.isImageArticle = isIsImageArticle();

		articleCacheModel.isHomePage = isIsHomePage();

		articleCacheModel.thuTu = getThuTu();

		articleCacheModel.InvolveArt = getInvolveArt();

		String InvolveArt = articleCacheModel.InvolveArt;

		if ((InvolveArt != null) && (InvolveArt.length() == 0)) {
			articleCacheModel.InvolveArt = null;
		}

		articleCacheModel.folderId = getFolderId();

		articleCacheModel.tags = getTags();

		String tags = articleCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			articleCacheModel.tags = null;
		}

		articleCacheModel.tagIds = getTagIds();

		String tagIds = articleCacheModel.tagIds;

		if ((tagIds != null) && (tagIds.length() == 0)) {
			articleCacheModel.tagIds = null;
		}

		articleCacheModel.eventIds = getEventIds();

		String eventIds = articleCacheModel.eventIds;

		if ((eventIds != null) && (eventIds.length() == 0)) {
			articleCacheModel.eventIds = null;
		}

		articleCacheModel.events = getEvents();

		String events = articleCacheModel.events;

		if ((events != null) && (events.length() == 0)) {
			articleCacheModel.events = null;
		}

		articleCacheModel.isRss = isIsRss();

		articleCacheModel.articleMainId = getArticleMainId();

		articleCacheModel.isSubSite = isIsSubSite();

		articleCacheModel.isNoiBat = isIsNoiBat();

		articleCacheModel.donVi = getDonVi();

		String donVi = articleCacheModel.donVi;

		if ((donVi != null) && (donVi.length() == 0)) {
			articleCacheModel.donVi = null;
		}

		articleCacheModel.loaiTinBai = getLoaiTinBai();

		String loaiTinBai = articleCacheModel.loaiTinBai;

		if ((loaiTinBai != null) && (loaiTinBai.length() == 0)) {
			articleCacheModel.loaiTinBai = null;
		}

		articleCacheModel.soKyTuBaiViet = getSoKyTuBaiViet();

		String soKyTuBaiViet = articleCacheModel.soKyTuBaiViet;

		if ((soKyTuBaiViet != null) && (soKyTuBaiViet.length() == 0)) {
			articleCacheModel.soKyTuBaiViet = null;
		}

		articleCacheModel.soAnhBaiViet = getSoAnhBaiViet();

		String soAnhBaiViet = articleCacheModel.soAnhBaiViet;

		if ((soAnhBaiViet != null) && (soAnhBaiViet.length() == 0)) {
			articleCacheModel.soAnhBaiViet = null;
		}

		articleCacheModel.loaiAnh = getLoaiAnh();

		String loaiAnh = articleCacheModel.loaiAnh;

		if ((loaiAnh != null) && (loaiAnh.length() == 0)) {
			articleCacheModel.loaiAnh = null;
		}

		articleCacheModel.theLoaiTinBai = getTheLoaiTinBai();

		String theLoaiTinBai = articleCacheModel.theLoaiTinBai;

		if ((theLoaiTinBai != null) && (theLoaiTinBai.length() == 0)) {
			articleCacheModel.theLoaiTinBai = null;
		}

		articleCacheModel.isTimer = isIsTimer();

		articleCacheModel.humanAccess = getHumanAccess();

		String humanAccess = articleCacheModel.humanAccess;

		if ((humanAccess != null) && (humanAccess.length() == 0)) {
			articleCacheModel.humanAccess = null;
		}

		articleCacheModel.humanAccessIds = getHumanAccessIds();

		String humanAccessIds = articleCacheModel.humanAccessIds;

		if ((humanAccessIds != null) && (humanAccessIds.length() == 0)) {
			articleCacheModel.humanAccessIds = null;
		}

		return articleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Article)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Article)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Article>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _articleId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _language;
	private String _originalLanguage;
	private String _title;
	private String _summary;
	private String _content;
	private String _image;
	private String _imageTitle;
	private String _author;
	private String _source;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private boolean _allowComent;
	private long _viewCount;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private Date _createdDate;
	private Date _modifiedDate;
	private Date _pendingDate;
	private Date _approvedDate;
	private boolean _neverExpire;
	private Date _publishedDateFrom;
	private Date _publishedDateTo;
	private long _createdByUser;
	private long _originalCreatedByUser;
	private boolean _setOriginalCreatedByUser;
	private long _pendingByUser;
	private long _modifiedByUser;
	private long _approvedByUser;
	private long _publishedByUser;
	private String _friendlyURL;
	private String _originalFriendlyURL;
	private boolean _isImageArticle;
	private boolean _isHomePage;
	private long _thuTu;
	private String _InvolveArt;
	private long _folderId;
	private String _tags;
	private String _tagIds;
	private String _eventIds;
	private String _events;
	private boolean _isRss;
	private long _articleMainId;
	private boolean _isSubSite;
	private boolean _isNoiBat;
	private String _donVi;
	private String _loaiTinBai;
	private String _soKyTuBaiViet;
	private String _soAnhBaiViet;
	private String _loaiAnh;
	private String _theLoaiTinBai;
	private boolean _isTimer;
	private String _humanAccess;
	private String _humanAccessIds;
	private long _columnBitmask;
	private Article _escapedModel;

}