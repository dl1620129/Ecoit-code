/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.ArticleHistory;
import com.software.cms.model.ArticleHistoryModel;
import com.software.cms.model.ArticleHistorySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ArticleHistory service. Represents a row in the &quot;soft_cms_ArticleHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArticleHistoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleHistoryImpl}.
 * </p>
 *
 * @author DungNV
 * @see ArticleHistoryImpl
 * @generated
 */
@JSON(strict = true)
public class ArticleHistoryModelImpl
	extends BaseModelImpl<ArticleHistory> implements ArticleHistoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article history model instance should use the <code>ArticleHistory</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_ArticleHistory";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"articleHistoryId", Types.BIGINT},
		{"articleId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"summnary", Types.VARCHAR}, {"content", Types.VARCHAR},
		{"imageDescription", Types.VARCHAR}, {"image", Types.VARCHAR},
		{"author", Types.VARCHAR}, {"source", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"donVi", Types.VARCHAR}, {"loaiTinBai", Types.VARCHAR},
		{"soKyTuBaiViet", Types.VARCHAR}, {"soAnhBaiViet", Types.VARCHAR},
		{"loaiAnh", Types.VARCHAR}, {"theLoaiTinBai", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleHistoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summnary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("donVi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiTinBai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soKyTuBaiViet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soAnhBaiViet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiAnh", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("theLoaiTinBai", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_ArticleHistory (uuid_ VARCHAR(75) null,articleHistoryId LONG not null primary key,articleId LONG,title TEXT null,summnary TEXT null,content TEXT null,imageDescription TEXT null,image VARCHAR(75) null,author TEXT null,source TEXT null,userId LONG,createdDate DATE null,donVi TEXT null,loaiTinBai TEXT null,soKyTuBaiViet TEXT null,soAnhBaiViet TEXT null,loaiAnh TEXT null,theLoaiTinBai TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table soft_cms_ArticleHistory";

	public static final String ORDER_BY_JPQL =
		" ORDER BY articleHistory.articleHistoryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_ArticleHistory.articleHistoryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ARTICLEID_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long ARTICLEHISTORYID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ArticleHistory toModel(ArticleHistorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ArticleHistory model = new ArticleHistoryImpl();

		model.setUuid(soapModel.getUuid());
		model.setArticleHistoryId(soapModel.getArticleHistoryId());
		model.setArticleId(soapModel.getArticleId());
		model.setTitle(soapModel.getTitle());
		model.setSummnary(soapModel.getSummnary());
		model.setContent(soapModel.getContent());
		model.setImageDescription(soapModel.getImageDescription());
		model.setImage(soapModel.getImage());
		model.setAuthor(soapModel.getAuthor());
		model.setSource(soapModel.getSource());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setDonVi(soapModel.getDonVi());
		model.setLoaiTinBai(soapModel.getLoaiTinBai());
		model.setSoKyTuBaiViet(soapModel.getSoKyTuBaiViet());
		model.setSoAnhBaiViet(soapModel.getSoAnhBaiViet());
		model.setLoaiAnh(soapModel.getLoaiAnh());
		model.setTheLoaiTinBai(soapModel.getTheLoaiTinBai());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ArticleHistory> toModels(
		ArticleHistorySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ArticleHistory> models = new ArrayList<ArticleHistory>(
			soapModels.length);

		for (ArticleHistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ArticleHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleHistoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleHistoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleHistoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ArticleHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ArticleHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ArticleHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ArticleHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleHistory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ArticleHistory)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ArticleHistory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ArticleHistory, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ArticleHistory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ArticleHistory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ArticleHistory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ArticleHistory>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ArticleHistory.class.getClassLoader(), ArticleHistory.class,
			ModelWrapper.class);

		try {
			Constructor<ArticleHistory> constructor =
				(Constructor<ArticleHistory>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ArticleHistory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ArticleHistory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ArticleHistory, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ArticleHistory, Object>>();
		Map<String, BiConsumer<ArticleHistory, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ArticleHistory, ?>>();

		attributeGetterFunctions.put("uuid", ArticleHistory::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setUuid);
		attributeGetterFunctions.put(
			"articleHistoryId", ArticleHistory::getArticleHistoryId);
		attributeSetterBiConsumers.put(
			"articleHistoryId",
			(BiConsumer<ArticleHistory, Long>)
				ArticleHistory::setArticleHistoryId);
		attributeGetterFunctions.put("articleId", ArticleHistory::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId",
			(BiConsumer<ArticleHistory, Long>)ArticleHistory::setArticleId);
		attributeGetterFunctions.put("title", ArticleHistory::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setTitle);
		attributeGetterFunctions.put("summnary", ArticleHistory::getSummnary);
		attributeSetterBiConsumers.put(
			"summnary",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setSummnary);
		attributeGetterFunctions.put("content", ArticleHistory::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setContent);
		attributeGetterFunctions.put(
			"imageDescription", ArticleHistory::getImageDescription);
		attributeSetterBiConsumers.put(
			"imageDescription",
			(BiConsumer<ArticleHistory, String>)
				ArticleHistory::setImageDescription);
		attributeGetterFunctions.put("image", ArticleHistory::getImage);
		attributeSetterBiConsumers.put(
			"image",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setImage);
		attributeGetterFunctions.put("author", ArticleHistory::getAuthor);
		attributeSetterBiConsumers.put(
			"author",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setAuthor);
		attributeGetterFunctions.put("source", ArticleHistory::getSource);
		attributeSetterBiConsumers.put(
			"source",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setSource);
		attributeGetterFunctions.put("userId", ArticleHistory::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ArticleHistory, Long>)ArticleHistory::setUserId);
		attributeGetterFunctions.put(
			"createdDate", ArticleHistory::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<ArticleHistory, Date>)ArticleHistory::setCreatedDate);
		attributeGetterFunctions.put("donVi", ArticleHistory::getDonVi);
		attributeSetterBiConsumers.put(
			"donVi",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setDonVi);
		attributeGetterFunctions.put(
			"loaiTinBai", ArticleHistory::getLoaiTinBai);
		attributeSetterBiConsumers.put(
			"loaiTinBai",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setLoaiTinBai);
		attributeGetterFunctions.put(
			"soKyTuBaiViet", ArticleHistory::getSoKyTuBaiViet);
		attributeSetterBiConsumers.put(
			"soKyTuBaiViet",
			(BiConsumer<ArticleHistory, String>)
				ArticleHistory::setSoKyTuBaiViet);
		attributeGetterFunctions.put(
			"soAnhBaiViet", ArticleHistory::getSoAnhBaiViet);
		attributeSetterBiConsumers.put(
			"soAnhBaiViet",
			(BiConsumer<ArticleHistory, String>)
				ArticleHistory::setSoAnhBaiViet);
		attributeGetterFunctions.put("loaiAnh", ArticleHistory::getLoaiAnh);
		attributeSetterBiConsumers.put(
			"loaiAnh",
			(BiConsumer<ArticleHistory, String>)ArticleHistory::setLoaiAnh);
		attributeGetterFunctions.put(
			"theLoaiTinBai", ArticleHistory::getTheLoaiTinBai);
		attributeSetterBiConsumers.put(
			"theLoaiTinBai",
			(BiConsumer<ArticleHistory, String>)
				ArticleHistory::setTheLoaiTinBai);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArticleHistoryId() {
		return _articleHistoryId;
	}

	@Override
	public void setArticleHistoryId(long articleHistoryId) {
		_articleHistoryId = articleHistoryId;
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		_columnBitmask |= ARTICLEID_COLUMN_BITMASK;

		if (!_setOriginalArticleId) {
			_setOriginalArticleId = true;

			_originalArticleId = _articleId;
		}

		_articleId = articleId;
	}

	public long getOriginalArticleId() {
		return _originalArticleId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getSummnary() {
		if (_summnary == null) {
			return "";
		}
		else {
			return _summnary;
		}
	}

	@Override
	public void setSummnary(String summnary) {
		_summnary = summnary;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getImageDescription() {
		if (_imageDescription == null) {
			return "";
		}
		else {
			return _imageDescription;
		}
	}

	@Override
	public void setImageDescription(String imageDescription) {
		_imageDescription = imageDescription;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return "";
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getDonVi() {
		if (_donVi == null) {
			return "";
		}
		else {
			return _donVi;
		}
	}

	@Override
	public void setDonVi(String donVi) {
		_donVi = donVi;
	}

	@JSON
	@Override
	public String getLoaiTinBai() {
		if (_loaiTinBai == null) {
			return "";
		}
		else {
			return _loaiTinBai;
		}
	}

	@Override
	public void setLoaiTinBai(String loaiTinBai) {
		_loaiTinBai = loaiTinBai;
	}

	@JSON
	@Override
	public String getSoKyTuBaiViet() {
		if (_soKyTuBaiViet == null) {
			return "";
		}
		else {
			return _soKyTuBaiViet;
		}
	}

	@Override
	public void setSoKyTuBaiViet(String soKyTuBaiViet) {
		_soKyTuBaiViet = soKyTuBaiViet;
	}

	@JSON
	@Override
	public String getSoAnhBaiViet() {
		if (_soAnhBaiViet == null) {
			return "";
		}
		else {
			return _soAnhBaiViet;
		}
	}

	@Override
	public void setSoAnhBaiViet(String soAnhBaiViet) {
		_soAnhBaiViet = soAnhBaiViet;
	}

	@JSON
	@Override
	public String getLoaiAnh() {
		if (_loaiAnh == null) {
			return "";
		}
		else {
			return _loaiAnh;
		}
	}

	@Override
	public void setLoaiAnh(String loaiAnh) {
		_loaiAnh = loaiAnh;
	}

	@JSON
	@Override
	public String getTheLoaiTinBai() {
		if (_theLoaiTinBai == null) {
			return "";
		}
		else {
			return _theLoaiTinBai;
		}
	}

	@Override
	public void setTheLoaiTinBai(String theLoaiTinBai) {
		_theLoaiTinBai = theLoaiTinBai;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ArticleHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ArticleHistory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ArticleHistory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleHistoryImpl articleHistoryImpl = new ArticleHistoryImpl();

		articleHistoryImpl.setUuid(getUuid());
		articleHistoryImpl.setArticleHistoryId(getArticleHistoryId());
		articleHistoryImpl.setArticleId(getArticleId());
		articleHistoryImpl.setTitle(getTitle());
		articleHistoryImpl.setSummnary(getSummnary());
		articleHistoryImpl.setContent(getContent());
		articleHistoryImpl.setImageDescription(getImageDescription());
		articleHistoryImpl.setImage(getImage());
		articleHistoryImpl.setAuthor(getAuthor());
		articleHistoryImpl.setSource(getSource());
		articleHistoryImpl.setUserId(getUserId());
		articleHistoryImpl.setCreatedDate(getCreatedDate());
		articleHistoryImpl.setDonVi(getDonVi());
		articleHistoryImpl.setLoaiTinBai(getLoaiTinBai());
		articleHistoryImpl.setSoKyTuBaiViet(getSoKyTuBaiViet());
		articleHistoryImpl.setSoAnhBaiViet(getSoAnhBaiViet());
		articleHistoryImpl.setLoaiAnh(getLoaiAnh());
		articleHistoryImpl.setTheLoaiTinBai(getTheLoaiTinBai());

		articleHistoryImpl.resetOriginalValues();

		return articleHistoryImpl;
	}

	@Override
	public int compareTo(ArticleHistory articleHistory) {
		long primaryKey = articleHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ArticleHistory)) {
			return false;
		}

		ArticleHistory articleHistory = (ArticleHistory)obj;

		long primaryKey = articleHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ArticleHistoryModelImpl articleHistoryModelImpl = this;

		articleHistoryModelImpl._originalUuid = articleHistoryModelImpl._uuid;

		articleHistoryModelImpl._originalArticleId =
			articleHistoryModelImpl._articleId;

		articleHistoryModelImpl._setOriginalArticleId = false;

		articleHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ArticleHistory> toCacheModel() {
		ArticleHistoryCacheModel articleHistoryCacheModel =
			new ArticleHistoryCacheModel();

		articleHistoryCacheModel.uuid = getUuid();

		String uuid = articleHistoryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			articleHistoryCacheModel.uuid = null;
		}

		articleHistoryCacheModel.articleHistoryId = getArticleHistoryId();

		articleHistoryCacheModel.articleId = getArticleId();

		articleHistoryCacheModel.title = getTitle();

		String title = articleHistoryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			articleHistoryCacheModel.title = null;
		}

		articleHistoryCacheModel.summnary = getSummnary();

		String summnary = articleHistoryCacheModel.summnary;

		if ((summnary != null) && (summnary.length() == 0)) {
			articleHistoryCacheModel.summnary = null;
		}

		articleHistoryCacheModel.content = getContent();

		String content = articleHistoryCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			articleHistoryCacheModel.content = null;
		}

		articleHistoryCacheModel.imageDescription = getImageDescription();

		String imageDescription = articleHistoryCacheModel.imageDescription;

		if ((imageDescription != null) && (imageDescription.length() == 0)) {
			articleHistoryCacheModel.imageDescription = null;
		}

		articleHistoryCacheModel.image = getImage();

		String image = articleHistoryCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			articleHistoryCacheModel.image = null;
		}

		articleHistoryCacheModel.author = getAuthor();

		String author = articleHistoryCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			articleHistoryCacheModel.author = null;
		}

		articleHistoryCacheModel.source = getSource();

		String source = articleHistoryCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			articleHistoryCacheModel.source = null;
		}

		articleHistoryCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			articleHistoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			articleHistoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		articleHistoryCacheModel.donVi = getDonVi();

		String donVi = articleHistoryCacheModel.donVi;

		if ((donVi != null) && (donVi.length() == 0)) {
			articleHistoryCacheModel.donVi = null;
		}

		articleHistoryCacheModel.loaiTinBai = getLoaiTinBai();

		String loaiTinBai = articleHistoryCacheModel.loaiTinBai;

		if ((loaiTinBai != null) && (loaiTinBai.length() == 0)) {
			articleHistoryCacheModel.loaiTinBai = null;
		}

		articleHistoryCacheModel.soKyTuBaiViet = getSoKyTuBaiViet();

		String soKyTuBaiViet = articleHistoryCacheModel.soKyTuBaiViet;

		if ((soKyTuBaiViet != null) && (soKyTuBaiViet.length() == 0)) {
			articleHistoryCacheModel.soKyTuBaiViet = null;
		}

		articleHistoryCacheModel.soAnhBaiViet = getSoAnhBaiViet();

		String soAnhBaiViet = articleHistoryCacheModel.soAnhBaiViet;

		if ((soAnhBaiViet != null) && (soAnhBaiViet.length() == 0)) {
			articleHistoryCacheModel.soAnhBaiViet = null;
		}

		articleHistoryCacheModel.loaiAnh = getLoaiAnh();

		String loaiAnh = articleHistoryCacheModel.loaiAnh;

		if ((loaiAnh != null) && (loaiAnh.length() == 0)) {
			articleHistoryCacheModel.loaiAnh = null;
		}

		articleHistoryCacheModel.theLoaiTinBai = getTheLoaiTinBai();

		String theLoaiTinBai = articleHistoryCacheModel.theLoaiTinBai;

		if ((theLoaiTinBai != null) && (theLoaiTinBai.length() == 0)) {
			articleHistoryCacheModel.theLoaiTinBai = null;
		}

		return articleHistoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ArticleHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ArticleHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ArticleHistory)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ArticleHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ArticleHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArticleHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ArticleHistory)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ArticleHistory>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _articleHistoryId;
	private long _articleId;
	private long _originalArticleId;
	private boolean _setOriginalArticleId;
	private String _title;
	private String _summnary;
	private String _content;
	private String _imageDescription;
	private String _image;
	private String _author;
	private String _source;
	private long _userId;
	private Date _createdDate;
	private String _donVi;
	private String _loaiTinBai;
	private String _soKyTuBaiViet;
	private String _soAnhBaiViet;
	private String _loaiAnh;
	private String _theLoaiTinBai;
	private long _columnBitmask;
	private ArticleHistory _escapedModel;

}