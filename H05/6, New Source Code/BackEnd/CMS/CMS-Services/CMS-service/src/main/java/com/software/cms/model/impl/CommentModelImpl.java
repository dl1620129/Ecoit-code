/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.Comment;
import com.software.cms.model.CommentModel;
import com.software.cms.model.CommentSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Comment service. Represents a row in the &quot;soft_cms_Comment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CommentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommentImpl}.
 * </p>
 *
 * @author DungNV
 * @see CommentImpl
 * @generated
 */
@JSON(strict = true)
public class CommentModelImpl
	extends BaseModelImpl<Comment> implements CommentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comment model instance should use the <code>Comment</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_Comment";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"commentId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"createdDate", Types.TIMESTAMP},
		{"username", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"content", Types.VARCHAR}, {"likes", Types.BIGINT},
		{"approved", Types.BOOLEAN}, {"articleId", Types.BIGINT},
		{"parentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("likes", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_Comment (uuid_ VARCHAR(75) null,commentId LONG not null primary key,groupId LONG,createdDate DATE null,username TEXT null,email TEXT null,content TEXT null,likes LONG,approved BOOLEAN,articleId LONG,parentId LONG)";

	public static final String TABLE_SQL_DROP = "drop table soft_cms_Comment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY comment.createdDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_Comment.createdDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ARTICLEID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long PARENTID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long CREATEDDATE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Comment toModel(CommentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Comment model = new CommentImpl();

		model.setUuid(soapModel.getUuid());
		model.setCommentId(soapModel.getCommentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setUsername(soapModel.getUsername());
		model.setEmail(soapModel.getEmail());
		model.setContent(soapModel.getContent());
		model.setLikes(soapModel.getLikes());
		model.setApproved(soapModel.isApproved());
		model.setArticleId(soapModel.getArticleId());
		model.setParentId(soapModel.getParentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Comment> toModels(CommentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Comment> models = new ArrayList<Comment>(soapModels.length);

		for (CommentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Comment.class;
	}

	@Override
	public String getModelClassName() {
		return Comment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Comment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Comment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Comment)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Comment, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Comment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Comment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Comment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Comment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Comment>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Comment.class.getClassLoader(), Comment.class, ModelWrapper.class);

		try {
			Constructor<Comment> constructor =
				(Constructor<Comment>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Comment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Comment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Comment, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Comment, Object>>();
		Map<String, BiConsumer<Comment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Comment, ?>>();

		attributeGetterFunctions.put("uuid", Comment::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Comment, String>)Comment::setUuid);
		attributeGetterFunctions.put("commentId", Comment::getCommentId);
		attributeSetterBiConsumers.put(
			"commentId", (BiConsumer<Comment, Long>)Comment::setCommentId);
		attributeGetterFunctions.put("groupId", Comment::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Comment, Long>)Comment::setGroupId);
		attributeGetterFunctions.put("createdDate", Comment::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<Comment, Date>)Comment::setCreatedDate);
		attributeGetterFunctions.put("username", Comment::getUsername);
		attributeSetterBiConsumers.put(
			"username", (BiConsumer<Comment, String>)Comment::setUsername);
		attributeGetterFunctions.put("email", Comment::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Comment, String>)Comment::setEmail);
		attributeGetterFunctions.put("content", Comment::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Comment, String>)Comment::setContent);
		attributeGetterFunctions.put("likes", Comment::getLikes);
		attributeSetterBiConsumers.put(
			"likes", (BiConsumer<Comment, Long>)Comment::setLikes);
		attributeGetterFunctions.put("approved", Comment::getApproved);
		attributeSetterBiConsumers.put(
			"approved", (BiConsumer<Comment, Boolean>)Comment::setApproved);
		attributeGetterFunctions.put("articleId", Comment::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId", (BiConsumer<Comment, Long>)Comment::setArticleId);
		attributeGetterFunctions.put("parentId", Comment::getParentId);
		attributeSetterBiConsumers.put(
			"parentId", (BiConsumer<Comment, Long>)Comment::setParentId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCommentId() {
		return _commentId;
	}

	@Override
	public void setCommentId(long commentId) {
		_commentId = commentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		_username = username;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public long getLikes() {
		return _likes;
	}

	@Override
	public void setLikes(long likes) {
		_likes = likes;
	}

	@JSON
	@Override
	public boolean getApproved() {
		return _approved;
	}

	@JSON
	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		_approved = approved;
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		_columnBitmask |= ARTICLEID_COLUMN_BITMASK;

		if (!_setOriginalArticleId) {
			_setOriginalArticleId = true;

			_originalArticleId = _articleId;
		}

		_articleId = articleId;
	}

	public long getOriginalArticleId() {
		return _originalArticleId;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Comment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Comment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Comment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommentImpl commentImpl = new CommentImpl();

		commentImpl.setUuid(getUuid());
		commentImpl.setCommentId(getCommentId());
		commentImpl.setGroupId(getGroupId());
		commentImpl.setCreatedDate(getCreatedDate());
		commentImpl.setUsername(getUsername());
		commentImpl.setEmail(getEmail());
		commentImpl.setContent(getContent());
		commentImpl.setLikes(getLikes());
		commentImpl.setApproved(isApproved());
		commentImpl.setArticleId(getArticleId());
		commentImpl.setParentId(getParentId());

		commentImpl.resetOriginalValues();

		return commentImpl;
	}

	@Override
	public int compareTo(Comment comment) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(), comment.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Comment)) {
			return false;
		}

		Comment comment = (Comment)obj;

		long primaryKey = comment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CommentModelImpl commentModelImpl = this;

		commentModelImpl._originalUuid = commentModelImpl._uuid;

		commentModelImpl._originalGroupId = commentModelImpl._groupId;

		commentModelImpl._setOriginalGroupId = false;

		commentModelImpl._originalArticleId = commentModelImpl._articleId;

		commentModelImpl._setOriginalArticleId = false;

		commentModelImpl._originalParentId = commentModelImpl._parentId;

		commentModelImpl._setOriginalParentId = false;

		commentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Comment> toCacheModel() {
		CommentCacheModel commentCacheModel = new CommentCacheModel();

		commentCacheModel.uuid = getUuid();

		String uuid = commentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commentCacheModel.uuid = null;
		}

		commentCacheModel.commentId = getCommentId();

		commentCacheModel.groupId = getGroupId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			commentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			commentCacheModel.createdDate = Long.MIN_VALUE;
		}

		commentCacheModel.username = getUsername();

		String username = commentCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			commentCacheModel.username = null;
		}

		commentCacheModel.email = getEmail();

		String email = commentCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			commentCacheModel.email = null;
		}

		commentCacheModel.content = getContent();

		String content = commentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			commentCacheModel.content = null;
		}

		commentCacheModel.likes = getLikes();

		commentCacheModel.approved = isApproved();

		commentCacheModel.articleId = getArticleId();

		commentCacheModel.parentId = getParentId();

		return commentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Comment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Comment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Comment)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Comment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Comment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Comment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Comment>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _commentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createdDate;
	private String _username;
	private String _email;
	private String _content;
	private long _likes;
	private boolean _approved;
	private long _articleId;
	private long _originalArticleId;
	private boolean _setOriginalArticleId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private long _columnBitmask;
	private Comment _escapedModel;

}