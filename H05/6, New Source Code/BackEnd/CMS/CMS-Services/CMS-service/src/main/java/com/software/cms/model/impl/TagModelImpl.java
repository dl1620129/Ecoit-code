/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.software.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.software.cms.model.Tag;
import com.software.cms.model.TagModel;
import com.software.cms.model.TagSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Tag service. Represents a row in the &quot;soft_cms_Tag&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TagModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TagImpl}.
 * </p>
 *
 * @author DungNV
 * @see TagImpl
 * @generated
 */
@JSON(strict = true)
public class TagModelImpl extends BaseModelImpl<Tag> implements TagModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tag model instance should use the <code>Tag</code> interface instead.
	 */
	public static final String TABLE_NAME = "soft_cms_Tag";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"tagId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"language", Types.VARCHAR},
		{"tagName", Types.VARCHAR}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tagId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tagName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table soft_cms_Tag (uuid_ VARCHAR(75) null,tagId LONG not null primary key,groupId LONG,language VARCHAR(75) null,tagName TEXT null,description TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table soft_cms_Tag";

	public static final String ORDER_BY_JPQL = " ORDER BY tag.tagName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY soft_cms_Tag.tagName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long LANGUAGE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long TAGNAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Tag toModel(TagSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Tag model = new TagImpl();

		model.setUuid(soapModel.getUuid());
		model.setTagId(soapModel.getTagId());
		model.setGroupId(soapModel.getGroupId());
		model.setLanguage(soapModel.getLanguage());
		model.setTagName(soapModel.getTagName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Tag> toModels(TagSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Tag> models = new ArrayList<Tag>(soapModels.length);

		for (TagSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TagModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tagId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTagId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tagId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tag.class;
	}

	@Override
	public String getModelClassName() {
		return Tag.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Tag, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Tag, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tag, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Tag)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Tag, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Tag, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Tag)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Tag, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Tag, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Tag>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Tag.class.getClassLoader(), Tag.class, ModelWrapper.class);

		try {
			Constructor<Tag> constructor =
				(Constructor<Tag>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Tag, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Tag, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Tag, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Tag, Object>>();
		Map<String, BiConsumer<Tag, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Tag, ?>>();

		attributeGetterFunctions.put("uuid", Tag::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Tag, String>)Tag::setUuid);
		attributeGetterFunctions.put("tagId", Tag::getTagId);
		attributeSetterBiConsumers.put(
			"tagId", (BiConsumer<Tag, Long>)Tag::setTagId);
		attributeGetterFunctions.put("groupId", Tag::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Tag, Long>)Tag::setGroupId);
		attributeGetterFunctions.put("language", Tag::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<Tag, String>)Tag::setLanguage);
		attributeGetterFunctions.put("tagName", Tag::getTagName);
		attributeSetterBiConsumers.put(
			"tagName", (BiConsumer<Tag, String>)Tag::setTagName);
		attributeGetterFunctions.put("description", Tag::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Tag, String>)Tag::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTagId() {
		return _tagId;
	}

	@Override
	public void setTagId(long tagId) {
		_tagId = tagId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@JSON
	@Override
	public String getTagName() {
		if (_tagName == null) {
			return "";
		}
		else {
			return _tagName;
		}
	}

	@Override
	public void setTagName(String tagName) {
		_columnBitmask = -1L;

		_tagName = tagName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Tag.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tag toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Tag> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TagImpl tagImpl = new TagImpl();

		tagImpl.setUuid(getUuid());
		tagImpl.setTagId(getTagId());
		tagImpl.setGroupId(getGroupId());
		tagImpl.setLanguage(getLanguage());
		tagImpl.setTagName(getTagName());
		tagImpl.setDescription(getDescription());

		tagImpl.resetOriginalValues();

		return tagImpl;
	}

	@Override
	public int compareTo(Tag tag) {
		int value = 0;

		value = getTagName().compareTo(tag.getTagName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tag)) {
			return false;
		}

		Tag tag = (Tag)obj;

		long primaryKey = tag.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TagModelImpl tagModelImpl = this;

		tagModelImpl._originalUuid = tagModelImpl._uuid;

		tagModelImpl._originalGroupId = tagModelImpl._groupId;

		tagModelImpl._setOriginalGroupId = false;

		tagModelImpl._originalLanguage = tagModelImpl._language;

		tagModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Tag> toCacheModel() {
		TagCacheModel tagCacheModel = new TagCacheModel();

		tagCacheModel.uuid = getUuid();

		String uuid = tagCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tagCacheModel.uuid = null;
		}

		tagCacheModel.tagId = getTagId();

		tagCacheModel.groupId = getGroupId();

		tagCacheModel.language = getLanguage();

		String language = tagCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			tagCacheModel.language = null;
		}

		tagCacheModel.tagName = getTagName();

		String tagName = tagCacheModel.tagName;

		if ((tagName != null) && (tagName.length() == 0)) {
			tagCacheModel.tagName = null;
		}

		tagCacheModel.description = getDescription();

		String description = tagCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tagCacheModel.description = null;
		}

		return tagCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Tag, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Tag, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tag, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Tag)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Tag, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Tag, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tag, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Tag)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Tag>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _tagId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _language;
	private String _originalLanguage;
	private String _tagName;
	private String _description;
	private long _columnBitmask;
	private Tag _escapedModel;

}