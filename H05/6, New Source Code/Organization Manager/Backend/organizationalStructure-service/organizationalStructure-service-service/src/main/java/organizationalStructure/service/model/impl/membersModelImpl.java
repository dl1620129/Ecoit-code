/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package organizationalStructure.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

import organizationalStructure.service.model.members;
import organizationalStructure.service.model.membersModel;
import organizationalStructure.service.model.membersSoap;

/**
 * The base model implementation for the members service. Represents a row in the &quot;portal_members&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>membersModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link membersImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see membersImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class membersModelImpl
	extends BaseModelImpl<members> implements membersModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a members model instance should use the <code>members</code> interface instead.
	 */
	public static final String TABLE_NAME = "portal_members";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"memberId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"organizationId", Types.BIGINT},
		{"fullName", Types.VARCHAR}, {"birthday", Types.TIMESTAMP},
		{"address", Types.VARCHAR}, {"sex", Types.BOOLEAN},
		{"position", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"createUser", Types.BIGINT}, {"modifiedUser", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"isLeader", Types.BOOLEAN},
		{"urlImage", Types.VARCHAR}, {"folderId", Types.BIGINT},
		{"imageFileId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sex", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isLeader", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("urlImage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageFileId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table portal_members (uuid_ VARCHAR(75) null,memberId LONG not null primary key,groupId LONG,organizationId LONG,fullName VARCHAR(75) null,birthday DATE null,address VARCHAR(75) null,sex BOOLEAN,position VARCHAR(75) null,createDate DATE null,createUser LONG,modifiedUser LONG,modifiedDate DATE null,isLeader BOOLEAN,urlImage VARCHAR(75) null,folderId LONG,imageFileId LONG)";

	public static final String TABLE_SQL_DROP = "drop table portal_members";

	public static final String ORDER_BY_JPQL = " ORDER BY members.memberId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY portal_members.memberId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long ORGANIZATIONID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long MEMBERID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static members toModel(membersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		members model = new membersImpl();

		model.setUuid(soapModel.getUuid());
		model.setMemberId(soapModel.getMemberId());
		model.setGroupId(soapModel.getGroupId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setFullName(soapModel.getFullName());
		model.setBirthday(soapModel.getBirthday());
		model.setAddress(soapModel.getAddress());
		model.setSex(soapModel.getSex());
		model.setPosition(soapModel.getPosition());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreateUser(soapModel.getCreateUser());
		model.setModifiedUser(soapModel.getModifiedUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setIsLeader(soapModel.getIsLeader());
		model.setUrlImage(soapModel.getUrlImage());
		model.setFolderId(soapModel.getFolderId());
		model.setImageFileId(soapModel.getImageFileId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<members> toModels(membersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<members> models = new ArrayList<members>(soapModels.length);

		for (membersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public membersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _memberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMemberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _memberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return members.class;
	}

	@Override
	public String getModelClassName() {
		return members.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<members, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<members, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<members, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((members)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<members, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<members, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(members)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<members, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<members, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, members>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			members.class.getClassLoader(), members.class, ModelWrapper.class);

		try {
			Constructor<members> constructor =
				(Constructor<members>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<members, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<members, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<members, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<members, Object>>();
		Map<String, BiConsumer<members, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<members, ?>>();

		attributeGetterFunctions.put("uuid", members::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<members, String>)members::setUuid);
		attributeGetterFunctions.put("memberId", members::getMemberId);
		attributeSetterBiConsumers.put(
			"memberId", (BiConsumer<members, Long>)members::setMemberId);
		attributeGetterFunctions.put("groupId", members::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<members, Long>)members::setGroupId);
		attributeGetterFunctions.put(
			"organizationId", members::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<members, Long>)members::setOrganizationId);
		attributeGetterFunctions.put("fullName", members::getFullName);
		attributeSetterBiConsumers.put(
			"fullName", (BiConsumer<members, String>)members::setFullName);
		attributeGetterFunctions.put("birthday", members::getBirthday);
		attributeSetterBiConsumers.put(
			"birthday", (BiConsumer<members, Date>)members::setBirthday);
		attributeGetterFunctions.put("address", members::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<members, String>)members::setAddress);
		attributeGetterFunctions.put("sex", members::getSex);
		attributeSetterBiConsumers.put(
			"sex", (BiConsumer<members, Boolean>)members::setSex);
		attributeGetterFunctions.put("position", members::getPosition);
		attributeSetterBiConsumers.put(
			"position", (BiConsumer<members, String>)members::setPosition);
		attributeGetterFunctions.put("createDate", members::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<members, Date>)members::setCreateDate);
		attributeGetterFunctions.put("createUser", members::getCreateUser);
		attributeSetterBiConsumers.put(
			"createUser", (BiConsumer<members, Long>)members::setCreateUser);
		attributeGetterFunctions.put("modifiedUser", members::getModifiedUser);
		attributeSetterBiConsumers.put(
			"modifiedUser",
			(BiConsumer<members, Long>)members::setModifiedUser);
		attributeGetterFunctions.put("modifiedDate", members::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<members, Date>)members::setModifiedDate);
		attributeGetterFunctions.put("isLeader", members::getIsLeader);
		attributeSetterBiConsumers.put(
			"isLeader", (BiConsumer<members, Boolean>)members::setIsLeader);
		attributeGetterFunctions.put("urlImage", members::getUrlImage);
		attributeSetterBiConsumers.put(
			"urlImage", (BiConsumer<members, String>)members::setUrlImage);
		attributeGetterFunctions.put("folderId", members::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<members, Long>)members::setFolderId);
		attributeGetterFunctions.put("imageFileId", members::getImageFileId);
		attributeSetterBiConsumers.put(
			"imageFileId", (BiConsumer<members, Long>)members::setImageFileId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_columnBitmask = -1L;

		_memberId = memberId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		_birthday = birthday;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public Boolean getSex() {
		return _sex;
	}

	@Override
	public void setSex(Boolean sex) {
		_sex = sex;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreateUser() {
		return _createUser;
	}

	@Override
	public void setCreateUser(long createUser) {
		_createUser = createUser;
	}

	@JSON
	@Override
	public long getModifiedUser() {
		return _modifiedUser;
	}

	@Override
	public void setModifiedUser(long modifiedUser) {
		_modifiedUser = modifiedUser;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Boolean getIsLeader() {
		return _isLeader;
	}

	@Override
	public void setIsLeader(Boolean isLeader) {
		_isLeader = isLeader;
	}

	@JSON
	@Override
	public String getUrlImage() {
		if (_urlImage == null) {
			return "";
		}
		else {
			return _urlImage;
		}
	}

	@Override
	public void setUrlImage(String urlImage) {
		_urlImage = urlImage;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public long getImageFileId() {
		return _imageFileId;
	}

	@Override
	public void setImageFileId(long imageFileId) {
		_imageFileId = imageFileId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, members.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public members toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, members>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		membersImpl membersImpl = new membersImpl();

		membersImpl.setUuid(getUuid());
		membersImpl.setMemberId(getMemberId());
		membersImpl.setGroupId(getGroupId());
		membersImpl.setOrganizationId(getOrganizationId());
		membersImpl.setFullName(getFullName());
		membersImpl.setBirthday(getBirthday());
		membersImpl.setAddress(getAddress());
		membersImpl.setSex(getSex());
		membersImpl.setPosition(getPosition());
		membersImpl.setCreateDate(getCreateDate());
		membersImpl.setCreateUser(getCreateUser());
		membersImpl.setModifiedUser(getModifiedUser());
		membersImpl.setModifiedDate(getModifiedDate());
		membersImpl.setIsLeader(getIsLeader());
		membersImpl.setUrlImage(getUrlImage());
		membersImpl.setFolderId(getFolderId());
		membersImpl.setImageFileId(getImageFileId());

		membersImpl.resetOriginalValues();

		return membersImpl;
	}

	@Override
	public int compareTo(members members) {
		int value = 0;

		if (getMemberId() < members.getMemberId()) {
			value = -1;
		}
		else if (getMemberId() > members.getMemberId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof members)) {
			return false;
		}

		members members = (members)obj;

		long primaryKey = members.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		membersModelImpl membersModelImpl = this;

		membersModelImpl._originalUuid = membersModelImpl._uuid;

		membersModelImpl._originalGroupId = membersModelImpl._groupId;

		membersModelImpl._setOriginalGroupId = false;

		membersModelImpl._originalOrganizationId =
			membersModelImpl._organizationId;

		membersModelImpl._setOriginalOrganizationId = false;

		membersModelImpl._setModifiedDate = false;

		membersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<members> toCacheModel() {
		membersCacheModel membersCacheModel = new membersCacheModel();

		membersCacheModel.uuid = getUuid();

		String uuid = membersCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			membersCacheModel.uuid = null;
		}

		membersCacheModel.memberId = getMemberId();

		membersCacheModel.groupId = getGroupId();

		membersCacheModel.organizationId = getOrganizationId();

		membersCacheModel.fullName = getFullName();

		String fullName = membersCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			membersCacheModel.fullName = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			membersCacheModel.birthday = birthday.getTime();
		}
		else {
			membersCacheModel.birthday = Long.MIN_VALUE;
		}

		membersCacheModel.address = getAddress();

		String address = membersCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			membersCacheModel.address = null;
		}

		membersCacheModel.sex = getSex();

		membersCacheModel.position = getPosition();

		String position = membersCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			membersCacheModel.position = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			membersCacheModel.createDate = createDate.getTime();
		}
		else {
			membersCacheModel.createDate = Long.MIN_VALUE;
		}

		membersCacheModel.createUser = getCreateUser();

		membersCacheModel.modifiedUser = getModifiedUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			membersCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			membersCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		membersCacheModel.isLeader = getIsLeader();

		membersCacheModel.urlImage = getUrlImage();

		String urlImage = membersCacheModel.urlImage;

		if ((urlImage != null) && (urlImage.length() == 0)) {
			membersCacheModel.urlImage = null;
		}

		membersCacheModel.folderId = getFolderId();

		membersCacheModel.imageFileId = getImageFileId();

		return membersCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<members, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<members, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<members, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((members)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<members, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<members, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<members, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((members)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, members>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _memberId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private String _fullName;
	private Date _birthday;
	private String _address;
	private Boolean _sex;
	private String _position;
	private Date _createDate;
	private long _createUser;
	private long _modifiedUser;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Boolean _isLeader;
	private String _urlImage;
	private long _folderId;
	private long _imageFileId;
	private long _columnBitmask;
	private members _escapedModel;

}