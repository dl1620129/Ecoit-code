/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ecoit.mr.model.impl;

import com.ecoit.mr.model.MemberReport;
import com.ecoit.mr.model.MemberReportModel;
import com.ecoit.mr.model.MemberReportSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MemberReport service. Represents a row in the &quot;ecoit_mr_MemberReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MemberReportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberReportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MemberReportImpl
 * @generated
 */
@JSON(strict = true)
public class MemberReportModelImpl
	extends BaseModelImpl<MemberReport> implements MemberReportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a member report model instance should use the <code>MemberReport</code> interface instead.
	 */
	public static final String TABLE_NAME = "ecoit_mr_MemberReport";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"memberReportId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdByUser", Types.BIGINT}, {"modifiedByUser", Types.BIGINT},
		{"tong", Types.BIGINT}, {"congTac", Types.BIGINT},
		{"hocTap", Types.BIGINT}, {"nghiPhep", Types.BIGINT},
		{"nghiOm", Types.BIGINT}, {"nghiBu", Types.BIGINT},
		{"liDoKhac", Types.BIGINT}, {"note", Types.VARCHAR},
		{"unitId", Types.BIGINT}, {"language", Types.VARCHAR},
		{"status", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberReportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tong", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("congTac", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hocTap", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nghiPhep", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nghiOm", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nghiBu", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("liDoKhac", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ecoit_mr_MemberReport (uuid_ VARCHAR(75) null,memberReportId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,createdByUser LONG,modifiedByUser LONG,tong LONG,congTac LONG,hocTap LONG,nghiPhep LONG,nghiOm LONG,nghiBu LONG,liDoKhac LONG,note VARCHAR(550) null,unitId LONG,language VARCHAR(75) null,status LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table ecoit_mr_MemberReport";

	public static final String ORDER_BY_JPQL =
		" ORDER BY memberReport.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ecoit_mr_MemberReport.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UNITID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MemberReport toModel(MemberReportSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MemberReport model = new MemberReportImpl();

		model.setUuid(soapModel.getUuid());
		model.setMemberReportId(soapModel.getMemberReportId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setTong(soapModel.getTong());
		model.setCongTac(soapModel.getCongTac());
		model.setHocTap(soapModel.getHocTap());
		model.setNghiPhep(soapModel.getNghiPhep());
		model.setNghiOm(soapModel.getNghiOm());
		model.setNghiBu(soapModel.getNghiBu());
		model.setLiDoKhac(soapModel.getLiDoKhac());
		model.setNote(soapModel.getNote());
		model.setUnitId(soapModel.getUnitId());
		model.setLanguage(soapModel.getLanguage());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MemberReport> toModels(MemberReportSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MemberReport> models = new ArrayList<MemberReport>(
			soapModels.length);

		for (MemberReportSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MemberReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _memberReportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMemberReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _memberReportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MemberReport.class;
	}

	@Override
	public String getModelClassName() {
		return MemberReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MemberReport, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MemberReport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MemberReport, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MemberReport)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MemberReport, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MemberReport, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MemberReport)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MemberReport, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MemberReport, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MemberReport>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MemberReport.class.getClassLoader(), MemberReport.class,
			ModelWrapper.class);

		try {
			Constructor<MemberReport> constructor =
				(Constructor<MemberReport>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MemberReport, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MemberReport, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MemberReport, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MemberReport, Object>>();
		Map<String, BiConsumer<MemberReport, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MemberReport, ?>>();

		attributeGetterFunctions.put("uuid", MemberReport::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<MemberReport, String>)MemberReport::setUuid);
		attributeGetterFunctions.put(
			"memberReportId", MemberReport::getMemberReportId);
		attributeSetterBiConsumers.put(
			"memberReportId",
			(BiConsumer<MemberReport, Long>)MemberReport::setMemberReportId);
		attributeGetterFunctions.put("groupId", MemberReport::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<MemberReport, Long>)MemberReport::setGroupId);
		attributeGetterFunctions.put("companyId", MemberReport::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MemberReport, Long>)MemberReport::setCompanyId);
		attributeGetterFunctions.put("userId", MemberReport::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<MemberReport, Long>)MemberReport::setUserId);
		attributeGetterFunctions.put("userName", MemberReport::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MemberReport, String>)MemberReport::setUserName);
		attributeGetterFunctions.put("createDate", MemberReport::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MemberReport, Date>)MemberReport::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MemberReport::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MemberReport, Date>)MemberReport::setModifiedDate);
		attributeGetterFunctions.put(
			"createdByUser", MemberReport::getCreatedByUser);
		attributeSetterBiConsumers.put(
			"createdByUser",
			(BiConsumer<MemberReport, Long>)MemberReport::setCreatedByUser);
		attributeGetterFunctions.put(
			"modifiedByUser", MemberReport::getModifiedByUser);
		attributeSetterBiConsumers.put(
			"modifiedByUser",
			(BiConsumer<MemberReport, Long>)MemberReport::setModifiedByUser);
		attributeGetterFunctions.put("tong", MemberReport::getTong);
		attributeSetterBiConsumers.put(
			"tong", (BiConsumer<MemberReport, Long>)MemberReport::setTong);
		attributeGetterFunctions.put("congTac", MemberReport::getCongTac);
		attributeSetterBiConsumers.put(
			"congTac",
			(BiConsumer<MemberReport, Long>)MemberReport::setCongTac);
		attributeGetterFunctions.put("hocTap", MemberReport::getHocTap);
		attributeSetterBiConsumers.put(
			"hocTap", (BiConsumer<MemberReport, Long>)MemberReport::setHocTap);
		attributeGetterFunctions.put("nghiPhep", MemberReport::getNghiPhep);
		attributeSetterBiConsumers.put(
			"nghiPhep",
			(BiConsumer<MemberReport, Long>)MemberReport::setNghiPhep);
		attributeGetterFunctions.put("nghiOm", MemberReport::getNghiOm);
		attributeSetterBiConsumers.put(
			"nghiOm", (BiConsumer<MemberReport, Long>)MemberReport::setNghiOm);
		attributeGetterFunctions.put("nghiBu", MemberReport::getNghiBu);
		attributeSetterBiConsumers.put(
			"nghiBu", (BiConsumer<MemberReport, Long>)MemberReport::setNghiBu);
		attributeGetterFunctions.put("liDoKhac", MemberReport::getLiDoKhac);
		attributeSetterBiConsumers.put(
			"liDoKhac",
			(BiConsumer<MemberReport, Long>)MemberReport::setLiDoKhac);
		attributeGetterFunctions.put("note", MemberReport::getNote);
		attributeSetterBiConsumers.put(
			"note", (BiConsumer<MemberReport, String>)MemberReport::setNote);
		attributeGetterFunctions.put("unitId", MemberReport::getUnitId);
		attributeSetterBiConsumers.put(
			"unitId", (BiConsumer<MemberReport, Long>)MemberReport::setUnitId);
		attributeGetterFunctions.put("language", MemberReport::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<MemberReport, String>)MemberReport::setLanguage);
		attributeGetterFunctions.put("status", MemberReport::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<MemberReport, Long>)MemberReport::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMemberReportId() {
		return _memberReportId;
	}

	@Override
	public void setMemberReportId(long memberReportId) {
		_memberReportId = memberReportId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@JSON
	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@JSON
	@Override
	public long getTong() {
		return _tong;
	}

	@Override
	public void setTong(long tong) {
		_tong = tong;
	}

	@JSON
	@Override
	public long getCongTac() {
		return _congTac;
	}

	@Override
	public void setCongTac(long congTac) {
		_congTac = congTac;
	}

	@JSON
	@Override
	public long getHocTap() {
		return _hocTap;
	}

	@Override
	public void setHocTap(long hocTap) {
		_hocTap = hocTap;
	}

	@JSON
	@Override
	public long getNghiPhep() {
		return _nghiPhep;
	}

	@Override
	public void setNghiPhep(long nghiPhep) {
		_nghiPhep = nghiPhep;
	}

	@JSON
	@Override
	public long getNghiOm() {
		return _nghiOm;
	}

	@Override
	public void setNghiOm(long nghiOm) {
		_nghiOm = nghiOm;
	}

	@JSON
	@Override
	public long getNghiBu() {
		return _nghiBu;
	}

	@Override
	public void setNghiBu(long nghiBu) {
		_nghiBu = nghiBu;
	}

	@JSON
	@Override
	public long getLiDoKhac() {
		return _liDoKhac;
	}

	@Override
	public void setLiDoKhac(long liDoKhac) {
		_liDoKhac = liDoKhac;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public long getUnitId() {
		return _unitId;
	}

	@Override
	public void setUnitId(long unitId) {
		_columnBitmask |= UNITID_COLUMN_BITMASK;

		if (!_setOriginalUnitId) {
			_setOriginalUnitId = true;

			_originalUnitId = _unitId;
		}

		_unitId = unitId;
	}

	public long getOriginalUnitId() {
		return _originalUnitId;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(MemberReport.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MemberReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MemberReport toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MemberReport>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MemberReportImpl memberReportImpl = new MemberReportImpl();

		memberReportImpl.setUuid(getUuid());
		memberReportImpl.setMemberReportId(getMemberReportId());
		memberReportImpl.setGroupId(getGroupId());
		memberReportImpl.setCompanyId(getCompanyId());
		memberReportImpl.setUserId(getUserId());
		memberReportImpl.setUserName(getUserName());
		memberReportImpl.setCreateDate(getCreateDate());
		memberReportImpl.setModifiedDate(getModifiedDate());
		memberReportImpl.setCreatedByUser(getCreatedByUser());
		memberReportImpl.setModifiedByUser(getModifiedByUser());
		memberReportImpl.setTong(getTong());
		memberReportImpl.setCongTac(getCongTac());
		memberReportImpl.setHocTap(getHocTap());
		memberReportImpl.setNghiPhep(getNghiPhep());
		memberReportImpl.setNghiOm(getNghiOm());
		memberReportImpl.setNghiBu(getNghiBu());
		memberReportImpl.setLiDoKhac(getLiDoKhac());
		memberReportImpl.setNote(getNote());
		memberReportImpl.setUnitId(getUnitId());
		memberReportImpl.setLanguage(getLanguage());
		memberReportImpl.setStatus(getStatus());

		memberReportImpl.resetOriginalValues();

		return memberReportImpl;
	}

	@Override
	public int compareTo(MemberReport memberReport) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), memberReport.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MemberReport)) {
			return false;
		}

		MemberReport memberReport = (MemberReport)obj;

		long primaryKey = memberReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MemberReportModelImpl memberReportModelImpl = this;

		memberReportModelImpl._originalUuid = memberReportModelImpl._uuid;

		memberReportModelImpl._originalGroupId = memberReportModelImpl._groupId;

		memberReportModelImpl._setOriginalGroupId = false;

		memberReportModelImpl._originalCompanyId =
			memberReportModelImpl._companyId;

		memberReportModelImpl._setOriginalCompanyId = false;

		memberReportModelImpl._setModifiedDate = false;

		memberReportModelImpl._originalUnitId = memberReportModelImpl._unitId;

		memberReportModelImpl._setOriginalUnitId = false;

		memberReportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MemberReport> toCacheModel() {
		MemberReportCacheModel memberReportCacheModel =
			new MemberReportCacheModel();

		memberReportCacheModel.uuid = getUuid();

		String uuid = memberReportCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			memberReportCacheModel.uuid = null;
		}

		memberReportCacheModel.memberReportId = getMemberReportId();

		memberReportCacheModel.groupId = getGroupId();

		memberReportCacheModel.companyId = getCompanyId();

		memberReportCacheModel.userId = getUserId();

		memberReportCacheModel.userName = getUserName();

		String userName = memberReportCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			memberReportCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			memberReportCacheModel.createDate = createDate.getTime();
		}
		else {
			memberReportCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			memberReportCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			memberReportCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		memberReportCacheModel.createdByUser = getCreatedByUser();

		memberReportCacheModel.modifiedByUser = getModifiedByUser();

		memberReportCacheModel.tong = getTong();

		memberReportCacheModel.congTac = getCongTac();

		memberReportCacheModel.hocTap = getHocTap();

		memberReportCacheModel.nghiPhep = getNghiPhep();

		memberReportCacheModel.nghiOm = getNghiOm();

		memberReportCacheModel.nghiBu = getNghiBu();

		memberReportCacheModel.liDoKhac = getLiDoKhac();

		memberReportCacheModel.note = getNote();

		String note = memberReportCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			memberReportCacheModel.note = null;
		}

		memberReportCacheModel.unitId = getUnitId();

		memberReportCacheModel.language = getLanguage();

		String language = memberReportCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			memberReportCacheModel.language = null;
		}

		memberReportCacheModel.status = getStatus();

		return memberReportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MemberReport, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MemberReport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MemberReport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MemberReport)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MemberReport, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MemberReport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MemberReport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MemberReport)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MemberReport>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _memberReportId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdByUser;
	private long _modifiedByUser;
	private long _tong;
	private long _congTac;
	private long _hocTap;
	private long _nghiPhep;
	private long _nghiOm;
	private long _nghiBu;
	private long _liDoKhac;
	private String _note;
	private long _unitId;
	private long _originalUnitId;
	private boolean _setOriginalUnitId;
	private String _language;
	private long _status;
	private long _columnBitmask;
	private MemberReport _escapedModel;

}