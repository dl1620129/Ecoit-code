/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ChungThuSo.Service.model.impl;

import ChungThuSo.Service.model.Kyso;
import ChungThuSo.Service.model.KysoModel;
import ChungThuSo.Service.model.KysoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Kyso service. Represents a row in the &quot;cts_portal_Kyso&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>KysoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KysoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see KysoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class KysoModelImpl extends BaseModelImpl<Kyso> implements KysoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kyso model instance should use the <code>Kyso</code> interface instead.
	 */
	public static final String TABLE_NAME = "cts_portal_Kyso";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"kysoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"screenName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"rawData", Types.VARCHAR}, {"serialNumber", Types.VARCHAR},
		{"details", Types.VARCHAR}, {"organization", Types.VARCHAR},
		{"userName", Types.VARCHAR}, {"createUserId", Types.BIGINT},
		{"fromDate", Types.TIMESTAMP}, {"toDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kysoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rawData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("details", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cts_portal_Kyso (uuid_ VARCHAR(75) null,kysoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,screenName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,rawData VARCHAR(1000) null,serialNumber VARCHAR(75) null,details VARCHAR(1000) null,organization VARCHAR(1000) null,userName VARCHAR(75) null,createUserId LONG,fromDate DATE null,toDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table cts_portal_Kyso";

	public static final String ORDER_BY_JPQL = " ORDER BY kyso.kysoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cts_portal_Kyso.kysoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long SCREENNAME_COLUMN_BITMASK = 4L;

	public static final long SERIALNUMBER_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long KYSOID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Kyso toModel(KysoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Kyso model = new KysoImpl();

		model.setUuid(soapModel.getUuid());
		model.setKysoId(soapModel.getKysoId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setScreenName(soapModel.getScreenName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRawData(soapModel.getRawData());
		model.setSerialNumber(soapModel.getSerialNumber());
		model.setDetails(soapModel.getDetails());
		model.setOrganization(soapModel.getOrganization());
		model.setUserName(soapModel.getUserName());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Kyso> toModels(KysoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Kyso> models = new ArrayList<Kyso>(soapModels.length);

		for (KysoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public KysoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kysoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKysoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kysoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Kyso.class;
	}

	@Override
	public String getModelClassName() {
		return Kyso.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Kyso, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Kyso, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Kyso, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Kyso)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Kyso, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Kyso, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Kyso)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Kyso, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Kyso, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Kyso>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Kyso.class.getClassLoader(), Kyso.class, ModelWrapper.class);

		try {
			Constructor<Kyso> constructor =
				(Constructor<Kyso>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Kyso, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Kyso, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Kyso, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Kyso, Object>>();
		Map<String, BiConsumer<Kyso, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Kyso, ?>>();

		attributeGetterFunctions.put("uuid", Kyso::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Kyso, String>)Kyso::setUuid);
		attributeGetterFunctions.put("kysoId", Kyso::getKysoId);
		attributeSetterBiConsumers.put(
			"kysoId", (BiConsumer<Kyso, Long>)Kyso::setKysoId);
		attributeGetterFunctions.put("groupId", Kyso::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Kyso, Long>)Kyso::setGroupId);
		attributeGetterFunctions.put("companyId", Kyso::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Kyso, Long>)Kyso::setCompanyId);
		attributeGetterFunctions.put("userId", Kyso::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Kyso, Long>)Kyso::setUserId);
		attributeGetterFunctions.put("screenName", Kyso::getScreenName);
		attributeSetterBiConsumers.put(
			"screenName", (BiConsumer<Kyso, String>)Kyso::setScreenName);
		attributeGetterFunctions.put("createDate", Kyso::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Kyso, Date>)Kyso::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Kyso::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Kyso, Date>)Kyso::setModifiedDate);
		attributeGetterFunctions.put("rawData", Kyso::getRawData);
		attributeSetterBiConsumers.put(
			"rawData", (BiConsumer<Kyso, String>)Kyso::setRawData);
		attributeGetterFunctions.put("serialNumber", Kyso::getSerialNumber);
		attributeSetterBiConsumers.put(
			"serialNumber", (BiConsumer<Kyso, String>)Kyso::setSerialNumber);
		attributeGetterFunctions.put("details", Kyso::getDetails);
		attributeSetterBiConsumers.put(
			"details", (BiConsumer<Kyso, String>)Kyso::setDetails);
		attributeGetterFunctions.put("organization", Kyso::getOrganization);
		attributeSetterBiConsumers.put(
			"organization", (BiConsumer<Kyso, String>)Kyso::setOrganization);
		attributeGetterFunctions.put("userName", Kyso::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Kyso, String>)Kyso::setUserName);
		attributeGetterFunctions.put("createUserId", Kyso::getCreateUserId);
		attributeSetterBiConsumers.put(
			"createUserId", (BiConsumer<Kyso, Long>)Kyso::setCreateUserId);
		attributeGetterFunctions.put("fromDate", Kyso::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate", (BiConsumer<Kyso, Date>)Kyso::setFromDate);
		attributeGetterFunctions.put("toDate", Kyso::getToDate);
		attributeSetterBiConsumers.put(
			"toDate", (BiConsumer<Kyso, Date>)Kyso::setToDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getKysoId() {
		return _kysoId;
	}

	@Override
	public void setKysoId(long kysoId) {
		_kysoId = kysoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_columnBitmask |= SCREENNAME_COLUMN_BITMASK;

		if (_originalScreenName == null) {
			_originalScreenName = _screenName;
		}

		_screenName = screenName;
	}

	public String getOriginalScreenName() {
		return GetterUtil.getString(_originalScreenName);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRawData() {
		if (_rawData == null) {
			return "";
		}
		else {
			return _rawData;
		}
	}

	@Override
	public void setRawData(String rawData) {
		_rawData = rawData;
	}

	@JSON
	@Override
	public String getSerialNumber() {
		if (_serialNumber == null) {
			return "";
		}
		else {
			return _serialNumber;
		}
	}

	@Override
	public void setSerialNumber(String serialNumber) {
		_columnBitmask |= SERIALNUMBER_COLUMN_BITMASK;

		if (_originalSerialNumber == null) {
			_originalSerialNumber = _serialNumber;
		}

		_serialNumber = serialNumber;
	}

	public String getOriginalSerialNumber() {
		return GetterUtil.getString(_originalSerialNumber);
	}

	@JSON
	@Override
	public String getDetails() {
		if (_details == null) {
			return "";
		}
		else {
			return _details;
		}
	}

	@Override
	public void setDetails(String details) {
		_details = details;
	}

	@JSON
	@Override
	public String getOrganization() {
		if (_organization == null) {
			return "";
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		_organization = organization;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public long getCreateUserId() {
		return _createUserId;
	}

	@Override
	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getCreateUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getCreateUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setCreateUserUuid(String createUserUuid) {
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Kyso.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Kyso.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Kyso toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Kyso>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KysoImpl kysoImpl = new KysoImpl();

		kysoImpl.setUuid(getUuid());
		kysoImpl.setKysoId(getKysoId());
		kysoImpl.setGroupId(getGroupId());
		kysoImpl.setCompanyId(getCompanyId());
		kysoImpl.setUserId(getUserId());
		kysoImpl.setScreenName(getScreenName());
		kysoImpl.setCreateDate(getCreateDate());
		kysoImpl.setModifiedDate(getModifiedDate());
		kysoImpl.setRawData(getRawData());
		kysoImpl.setSerialNumber(getSerialNumber());
		kysoImpl.setDetails(getDetails());
		kysoImpl.setOrganization(getOrganization());
		kysoImpl.setUserName(getUserName());
		kysoImpl.setCreateUserId(getCreateUserId());
		kysoImpl.setFromDate(getFromDate());
		kysoImpl.setToDate(getToDate());

		kysoImpl.resetOriginalValues();

		return kysoImpl;
	}

	@Override
	public int compareTo(Kyso kyso) {
		long primaryKey = kyso.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Kyso)) {
			return false;
		}

		Kyso kyso = (Kyso)obj;

		long primaryKey = kyso.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		KysoModelImpl kysoModelImpl = this;

		kysoModelImpl._originalUuid = kysoModelImpl._uuid;

		kysoModelImpl._originalGroupId = kysoModelImpl._groupId;

		kysoModelImpl._setOriginalGroupId = false;

		kysoModelImpl._originalCompanyId = kysoModelImpl._companyId;

		kysoModelImpl._setOriginalCompanyId = false;

		kysoModelImpl._originalScreenName = kysoModelImpl._screenName;

		kysoModelImpl._setModifiedDate = false;

		kysoModelImpl._originalSerialNumber = kysoModelImpl._serialNumber;

		kysoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Kyso> toCacheModel() {
		KysoCacheModel kysoCacheModel = new KysoCacheModel();

		kysoCacheModel.uuid = getUuid();

		String uuid = kysoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			kysoCacheModel.uuid = null;
		}

		kysoCacheModel.kysoId = getKysoId();

		kysoCacheModel.groupId = getGroupId();

		kysoCacheModel.companyId = getCompanyId();

		kysoCacheModel.userId = getUserId();

		kysoCacheModel.screenName = getScreenName();

		String screenName = kysoCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			kysoCacheModel.screenName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			kysoCacheModel.createDate = createDate.getTime();
		}
		else {
			kysoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			kysoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			kysoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		kysoCacheModel.rawData = getRawData();

		String rawData = kysoCacheModel.rawData;

		if ((rawData != null) && (rawData.length() == 0)) {
			kysoCacheModel.rawData = null;
		}

		kysoCacheModel.serialNumber = getSerialNumber();

		String serialNumber = kysoCacheModel.serialNumber;

		if ((serialNumber != null) && (serialNumber.length() == 0)) {
			kysoCacheModel.serialNumber = null;
		}

		kysoCacheModel.details = getDetails();

		String details = kysoCacheModel.details;

		if ((details != null) && (details.length() == 0)) {
			kysoCacheModel.details = null;
		}

		kysoCacheModel.organization = getOrganization();

		String organization = kysoCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			kysoCacheModel.organization = null;
		}

		kysoCacheModel.userName = getUserName();

		String userName = kysoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			kysoCacheModel.userName = null;
		}

		kysoCacheModel.createUserId = getCreateUserId();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			kysoCacheModel.fromDate = fromDate.getTime();
		}
		else {
			kysoCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			kysoCacheModel.toDate = toDate.getTime();
		}
		else {
			kysoCacheModel.toDate = Long.MIN_VALUE;
		}

		return kysoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Kyso, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Kyso, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Kyso, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Kyso)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Kyso, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Kyso, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Kyso, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Kyso)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Kyso>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _kysoId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _screenName;
	private String _originalScreenName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _rawData;
	private String _serialNumber;
	private String _originalSerialNumber;
	private String _details;
	private String _organization;
	private String _userName;
	private long _createUserId;
	private Date _fromDate;
	private Date _toDate;
	private long _columnBitmask;
	private Kyso _escapedModel;

}